I"%<p>웹페이지를 만들다보면 줄바꿈 태그(<code class="language-plaintext highlighter-rouge">br</code>)를 디바이스가 모바일이냐 PC냐에 따라 다르게 적용하고 싶을 때가 있다.</p>

<p>예를 들면 모바일에서는 줄바꿈을 했으면 좋겠고 PC에서는 그대로 길게 냅두고 싶은 경우다.</p>

<p>전통적인 방법으로는 css를 사용하는 방법이 있겠다.</p>

<p>빠르게 인터넷을 검색해보니 다음과 같은 코드가 나왔다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 767px 기준 */</span>
<span class="k">@media</span> <span class="n">only</span> <span class="n">screen</span> <span class="n">and</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">767px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nt">br</span><span class="nc">.ignore</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">inline-block</span><span class="p">;</span>
    <span class="nl">content</span><span class="p">:</span> <span class="s1">" "</span><span class="p">;</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span> <span class="m">2px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>global.css 파일 안에 이렇게 정의해준 뒤에 <code class="language-plaintext highlighter-rouge">&lt;br className="ignore" /&gt;</code>와 같이 사용해주면 모바일 버전에서만 br 태그를 무시할 수 있다.</p>

<p>처음에는 아하 그렇구나 싶었다.</p>

<p>하지만 사용하다보니 무조건 &lt;p&gt;태그 안에 위치해야 한다거나, 반대로 PC에서만 br 태그를 무시하고 싶을 때 스타일을 새로 적용해 주어야 하는 등 딱 봐도 여러 한계점이 존재했다.</p>

<p>결국 이러한 불편함에서 벗어나기 위해서 여러 방법들을 찾아보기 시작했다.</p>

<h2 id="usemediaquery">useMediaQuery</h2>

<p>그 중 하나는 <code class="language-plaintext highlighter-rouge">useMediaQuery</code>를 활용하여 <code class="language-plaintext highlighter-rouge">isMobile</code> 변수를 만들어서 컴포넌트에 조건을 걸어 사용하는 것이다.</p>

<p>나름 깔끔하게 코드를 정리할 수 있고 <code class="language-plaintext highlighter-rouge">isMobile</code> 변수를 필두로 삼항연산자를 사용하여 모바일용 컴포넌트, PC용 컴포넌트를 나누어 렌더링하는 것이 가능했다. 코드 가독성도 나름 올라갔다.</p>

<p>하지만 이러한 방법은 매번 페이지마다 isMobile을 적용해주어야 한다는 귀찮음이 있었다. 그 외에도 새로고침을 할 때마다 PC화면일지언정 모바일용 컴포넌트가 먼저 렌더링된 후에 PC용으로 전환되는 등의 깜빡임 현상이 존재했다. 이거는 꽤나 큰 스트레스로 다가왔다.</p>

<h2 id="tailwind">tailwind</h2>

<p>결국 돌고 돌아서 tailwind로 돌아왔다.</p>

<p>첫 문제였던 디바이스에 따른 br 태그의 선택 적용 문제도 tailwind를 사용하면서 깔끔하게 해결되었다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">sm:block hidden</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div&gt; /</span><span class="o">/</span> <span class="nx">pc</span>
<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">sm:hidden</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div&gt; /</span><span class="o">/</span> <span class="nx">mobile</span>
</code></pre></div></div>

<p>div를 예시로 들었지만 br도 똑같이 적용하면 된다. 코드도 한결 간단해졌고 PC용 컴포넌트, 모바일용 컴포넌트에 따라 가장 바깥을 위의 div 예시처럼 감싸주면 해결된다.</p>

<p>코드 간결성, 가독성을 모두 잡을 수 있어서 좋았다.</p>
:ET