<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2023-04-02T15:37:11+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">froggydisk</title><subtitle>This is for frogs in the world.</subtitle><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><entry><title type="html">[Jenkins] 젠킨스에서 도커 이미지를 빌드할 때 발생하는 이슈들</title><link href="http://localhost:4000/21th-post/" rel="alternate" type="text/html" title="[Jenkins] 젠킨스에서 도커 이미지를 빌드할 때 발생하는 이슈들" /><published>2023-04-02T00:00:00+07:00</published><updated>2023-04-02T00:00:00+07:00</updated><id>http://localhost:4000/21th-post</id><content type="html" xml:base="http://localhost:4000/21th-post/"><![CDATA[<h1 id="작업-환경">작업 환경</h1>
<hr />
<p>젠킨스를 통해 깃허브에서 도커 이미지를 빌드하여 이미지 저장소로 올리는 과정에서 발생하는 이슈들을 다룹니다.<br />
이 글은 CI 파이프라인 구축을 설명하고 있지 않습니다. 환경 구축은 아래 출처를 참고해주세요.</p>

<p>● <a href="https://smoh.tistory.com/420">Jenkins로 Docker 이미지 빌드하기</a><br />
● <a href="https://zunoxi.tistory.com/131">젠킨스 연동 및 push 하기</a></p>

<h1 id="설정-파일">설정 파일</h1>
<hr />

<p>젠킨스가 깃허브에서 코드를 받아와서 도커 이미지를 빌드할 때 필요로 하는 파일이 두 가지 존재한다. 하나는 Jenkinsfile이고 나머지는 Dockerfile이다. 두 파일은 코드의 루트 경로에 위치하고 있어야 한다.<br />
처음 작성할 때 막막했던 기억이 있어 누군가는 필요할 것 같아 첨부해 둔다.</p>

<h3 id="-jenkinsfile">📌 Jenkinsfile</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">app</span>
<span class="n">node</span> <span class="p">{</span>        
    <span class="n">stage</span><span class="p">(</span><span class="s">'Checkout'</span><span class="p">){</span>            
        <span class="n">checkout</span> <span class="n">scm</span>            
    <span class="p">}</span>
    
    <span class="n">stage</span><span class="p">(</span><span class="s">'Build image'</span><span class="p">){</span>                       
        <span class="n">app</span> <span class="o">=</span> <span class="n">docker</span><span class="p">.</span><span class="n">build</span><span class="p">(</span><span class="s">"[저장소도메인]/[프로젝트명]/[이미지명]"</span><span class="p">)</span>
        <span class="c1"># 예를 들면 "harbor.test.io/example-project/test-image"
</span>        <span class="c1"># 하버의 경우 프로젝트는 사전에 생성해 놓아야하지만 이미지는 자동 생성된다.
</span>    <span class="p">}</span>
	
    <span class="c1"># withRegistry 안에는 저장소 도메인과 젠킨스에 미리 등록해 놓은 Credential의 ID를 적어준다.
</span>    <span class="c1"># 예를 들면 docker.withRegistry('https://harbor.test.io', 'Harbor')
</span>    <span class="n">stage</span><span class="p">(</span><span class="s">'Push image'</span><span class="p">){</span> 
        <span class="n">docker</span><span class="p">.</span><span class="n">withRegistry</span><span class="p">(</span><span class="s">'https://[저장소도메인]'</span><span class="p">,</span> <span class="s">'[CredID]'</span><span class="p">){</span>
            <span class="n">app</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="s">"${env.BUILD_NUMBER}"</span><span class="p">)</span>
            <span class="n">app</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="s">"latest"</span><span class="p">)</span>
        <span class="p">}</span>                
    <span class="p">}</span>		
<span class="p">}</span>
</code></pre></div></div>

<p>모든 이미지에는 젠킨스 프로세스 번호가 붙고 가장 최근에 올라간 도커 이미지에만 latest 태그가 붙는다.</p>

<h3 id="-dockerfile">📌 Dockerfile</h3>
<p>Dockerfile은 구축하고자 하는 환경에 따라 이미지 파일이 다를 수 있다. 본인의 환경에 맞는 이미지를 가져오자.<br />
아래는 python이 깔려있는 nodeJS 이미지를 이용하여 서버를 실행하는 예시이다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FROM</span> <span class="n">nikolaik</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">nodejs</span><span class="p">:</span><span class="n">python3</span><span class="p">.</span><span class="mi">8</span><span class="o">-</span><span class="n">nodejs16</span> 

<span class="n">WORKDIR</span> <span class="o">/</span><span class="n">app</span>

<span class="n">COPY</span> <span class="p">.</span> <span class="o">/</span><span class="n">app</span>

<span class="n">RUN</span> <span class="n">npm</span> <span class="n">install</span> <span class="o">&amp;&amp;</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">r</span> <span class="n">requirements</span><span class="p">.</span><span class="n">txt</span>

<span class="n">EXPOSE</span> <span class="mi">8080</span>

<span class="n">CMD</span> <span class="p">[</span> <span class="s">"node"</span><span class="p">,</span> <span class="s">"app.js"</span> <span class="p">]</span>
</code></pre></div></div>
<p>COPY를 할 때에는 COPY [복사해 올 곳] [복사해 갈 곳] 순으로 적는데 복사해 올 곳은 상대경로로, 복사해 갈 곳은 절대경로로 적는 것이 원칙이다. 꼭 지키지 않아도 동작에는 이상이 없긴 하다.</p>

<h1 id="에러">에러</h1>
<hr />

<p>다음은 위의 구축 과정에서 발생하기 쉬운 에러와 그 해결 방안을 설명한다.</p>

<h3 id="-에러-1">🔒 에러 1</h3>

<p><strong><code class="language-plaintext highlighter-rouge">groovy.lang.missingpropertyexception: No such property: docker for class: groovy.lang.Binding</code></strong></p>

<p>🔑 해결: Jenkins에서 Docker Pipeline 플러그인 설치 (<a href="https://may9noy.tistory.com/990">참고</a>)</p>

<h3 id="-에러-2">🔒 에러 2</h3>

<p><strong><code class="language-plaintext highlighter-rouge">/var/run/docker.sock: connect: permission denied</code></strong></p>

<p>🔑 해결: 모든 노드에서 sudo chmod 666 /var/run/docker.sock로 접근 권한 허용(<a href="https://may9noy.tistory.com/990">참고</a>)</p>

<h3 id="-에러-3">🔒 에러 3</h3>

<p><strong><code class="language-plaintext highlighter-rouge">script.sh 1 docker not found</code></strong></p>

<p>🔑 해결: jenkins deployment 파일에서 volume mount를 추가 (<a href="https://anfrhrl5555.tistory.com/137">참고</a>)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">apiVersion</span><span class="p">:</span> <span class="n">apps</span><span class="o">/</span><span class="n">v1</span>
<span class="n">kind</span><span class="p">:</span> <span class="n">Deployment</span>
<span class="n">metadata</span><span class="p">:</span>
  <span class="n">name</span><span class="p">:</span> <span class="n">jenkins</span>
  <span class="n">namespace</span><span class="p">:</span> <span class="n">jenkins</span>
<span class="n">spec</span><span class="p">:</span>
  <span class="n">replicas</span><span class="p">:</span> <span class="mi">1</span>
  <span class="n">selector</span><span class="p">:</span>
    <span class="n">matchLabels</span><span class="p">:</span>
      <span class="n">app</span><span class="p">:</span> <span class="n">jenkins</span>
  <span class="n">template</span><span class="p">:</span>
    <span class="n">metadata</span><span class="p">:</span>
      <span class="n">labels</span><span class="p">:</span>
        <span class="n">app</span><span class="p">:</span> <span class="n">jenkins</span>
    <span class="n">spec</span><span class="p">:</span>
      <span class="n">containers</span><span class="p">:</span>
      <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">jenkins</span>
        <span class="n">image</span><span class="p">:</span> <span class="n">jenkins</span><span class="o">/</span><span class="n">jenkins</span><span class="p">:</span><span class="n">lts</span>
        <span class="n">ports</span><span class="p">:</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">httpe</span><span class="o">-</span><span class="n">port</span>
            <span class="n">containerPort</span><span class="p">:</span> <span class="mi">8080</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">jnlp</span><span class="o">-</span><span class="n">port</span>
            <span class="n">containerPort</span><span class="p">:</span> <span class="mi">50000</span>
        <span class="n">volumeMounts</span><span class="p">:</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">jenkins</span><span class="o">-</span><span class="n">data</span>
            <span class="n">mountPath</span><span class="p">:</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">jenkins_home</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">-</span><span class="n">socket</span>
            <span class="n">mountPath</span><span class="p">:</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">docker</span><span class="p">.</span><span class="n">sock</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">-</span><span class="nb">bin</span>
            <span class="n">mountPath</span><span class="p">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">docker</span> 
      <span class="n">volumes</span><span class="p">:</span>
        <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">jenkins</span><span class="o">-</span><span class="n">data</span>
          <span class="n">persistentVolumeClaim</span><span class="p">:</span>
            <span class="n">claimName</span><span class="p">:</span> <span class="n">jenkins</span><span class="o">-</span><span class="n">pvc</span>
        <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">-</span><span class="n">socket</span>
          <span class="n">hostPath</span><span class="p">:</span>
            <span class="n">path</span><span class="p">:</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">docker</span><span class="p">.</span><span class="n">sock</span>
            <span class="nb">type</span><span class="p">:</span> <span class="n">Socket</span>
        <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">-</span><span class="nb">bin</span>
          <span class="n">hostPath</span><span class="p">:</span>
            <span class="n">path</span><span class="p">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">docker</span>
            <span class="nb">type</span><span class="p">:</span> <span class="n">File</span>
</code></pre></div></div>

<h3 id="-에러-4">🔒 에러 4</h3>

<p><strong><code class="language-plaintext highlighter-rouge">stat /var/lib/docker/tmp: no such file or directory</code></strong></p>

<p>🔑 해결: Jenkins 파드가 돌고 있는 노드에 도커가 제대로 실행되고 있지 않는 상태일 가능성이 높다. 해당 노드에서 sudo service docker restart를 한 뒤 /var/lib/docker 파일 안에 파일이 제대로 생성되어 있는지 확인한다. docker파일은 sudo chmod 755 docker로 접근 권한을 주어야 확인이 가능하다.</p>

<h1 id="결과">결과</h1>

<p>33번만에 성공했다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Jenkins, Docker, Harbor" /><summary type="html"><![CDATA[작업 환경 젠킨스를 통해 깃허브에서 도커 이미지를 빌드하여 이미지 저장소로 올리는 과정에서 발생하는 이슈들을 다룹니다. 이 글은 CI 파이프라인 구축을 설명하고 있지 않습니다. 환경 구축은 아래 출처를 참고해주세요.]]></summary></entry><entry><title type="html">[Ubuntu] Nvidia 드라이버 설치 후 ssh 접속 불가 문제</title><link href="http://localhost:4000/20th-post/" rel="alternate" type="text/html" title="[Ubuntu] Nvidia 드라이버 설치 후 ssh 접속 불가 문제" /><published>2023-03-23T00:00:00+07:00</published><updated>2023-03-23T00:00:00+07:00</updated><id>http://localhost:4000/20th-post</id><content type="html" xml:base="http://localhost:4000/20th-post/"><![CDATA[<h1 id="대상">대상</h1>
<p>이 글은 Nvidia GPU가 설치된 우분투 서버에 ssh 접속을 하기 위해 세팅을 하시는 분들을 대상으로 합니다.</p>

<h1 id="1-nvidia-드라이버-설치">1. Nvidia 드라이버 설치</h1>

<h3 id="장치-확인">장치 확인</h3>
<p>먼저 GPU 장치가 잘 인식되어 있는지 확인한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lshw</span> <span class="o">-</span><span class="n">C</span> <span class="n">display</span>
</code></pre></div></div>

<h3 id="설치">설치</h3>
<p>Nvidia 드라이버 설치를 위해서는 우선 <code class="language-plaintext highlighter-rouge">ubuntu-drivers</code>가 필요합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">apt</span> <span class="n">install</span> <span class="n">ubuntu</span><span class="o">-</span><span class="n">drivers</span><span class="o">-</span><span class="n">common</span>
</code></pre></div></div>
<p>이후 ubuntu-drivers를 이용하여 권장 설치를 진행한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">add</span><span class="o">-</span><span class="n">apt</span><span class="o">-</span><span class="n">repository</span> <span class="n">ppa</span><span class="p">:</span><span class="n">graphics</span><span class="o">-</span><span class="n">drivers</span><span class="o">/</span><span class="n">ppa</span>
<span class="n">sudo</span> <span class="n">apt</span> <span class="n">update</span>
<span class="n">sudo</span> <span class="n">ubuntu</span><span class="o">-</span><span class="n">drivers</span> <span class="n">autoinstall</span>
</code></pre></div></div>
<p>시간이 조금 걸리므로 조급해하지 말자. 설치가 완료되었다면 재부팅으로 마무리한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">reboot</span>
</code></pre></div></div>
<p>이제 <code class="language-plaintext highlighter-rouge">nvidia-smi</code> 명령어로 GPU의 현재 상태를 볼 수 있다.</p>

<p>혹시라도 귀찮아서 재부팅을 안하는 분은 아래와 같은 에러를 만날 수 있으니 귀찮더라도 꼭 하자.</p>

<p>⚠️ <strong>NVIDIA-SMI has failed because it couldn’t communicate with the NVIDIA driver.</strong><br />
<strong>Make sure that the latest NVIDIA driver is installed and running.</strong></p>

<p>nvidia-smi보다 좀 더 간단하게 볼 수 있는 툴로는 <code class="language-plaintext highlighter-rouge">gpustat</code>을 추천한다. 설치도 간단하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span> <span class="n">install</span> <span class="n">gpustat</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">gpustat</code>을 입력하면 GPU 상태를 보여준다.</p>

<h3 id="참고">참고</h3>
<p><a href="https://pstudio411.tistory.com/entry/Ubuntu-2004-Nvidia%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0">Nvidia드라이버 설치하기</a></p>

<p><br /></p>

<h1 id="2-설치-이후-만나는-상황">2. 설치 이후 만나는 상황</h1>

<h3 id="-문제">🔒 문제</h3>

<p>📍 <strong><code class="language-plaintext highlighter-rouge">처음에는 ssh가 잘 되다가 어느 순간부터 접속이 되지 않는다</code></strong></p>

<p>Nvidia 드라이버의 호환성 문제로 인해 컴퓨터가 다운되는 것이라고 예상해서 여러번의 재설치를 거쳤으나 해결되지 않았다.</p>

<p>이는 모니터를 연결해 놓지 않는 서버 컴퓨터의 특성상 놓치기 쉬운 부분인데 알고 보니 단순히 절전 모드에 들어간 것이었다.</p>

<p>Nvidia 드라이버를 설치하면 재부팅시 디폴트 모드가 GUI 모드로 변경되고 절전 모드도 자동으로 세팅된다.</p>

<p>이를 해결하기 위해서는 컴퓨터의 절전 모드 진입을 막아야 하는데 가능한 방법은 총 두 가지이다.</p>

<h3 id="-해결">🔑 해결</h3>

<p>📍 <strong><code class="language-plaintext highlighter-rouge">명령어로 절전 모드를 끈다</code></strong> (<a href="https://heekangpark.github.io/linux/ubuntu-server-sleep">참고</a>)</p>

<p>한 줄이면 가능하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">systemctl</span> <span class="n">mask</span> <span class="n">sleep</span><span class="p">.</span><span class="n">target</span> <span class="n">suspend</span><span class="p">.</span><span class="n">target</span> <span class="n">hibernate</span><span class="p">.</span><span class="n">target</span> <span class="n">hybrid</span><span class="o">-</span><span class="n">sleep</span><span class="p">.</span><span class="n">target</span>
</code></pre></div></div>

<p>아래 명령어로 설정이 잘 되었는지 확인한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">systemctl</span> <span class="n">status</span> <span class="n">sleep</span><span class="p">.</span><span class="n">target</span> <span class="n">suspend</span><span class="p">.</span><span class="n">target</span> <span class="n">hibernate</span><span class="p">.</span><span class="n">target</span> <span class="n">hybrid</span><span class="o">-</span><span class="n">sleep</span><span class="p">.</span><span class="n">target</span>
</code></pre></div></div>
<p><br /></p>

<p>📍 <strong><code class="language-plaintext highlighter-rouge">기본 모드를 CLI 모드로 전환한다</code></strong> (<a href="https://booiljung.github.io/technical_articles/linux/switch_gui_and_cli.html">참고</a>)</p>

<p>관련 설정 파일은 아래의 위치에 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">vim</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">default</span><span class="o">/</span><span class="n">grub</span>
</code></pre></div></div>

<p>다음 3가지 사항에 대해 수정한다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">GRUB_CMDLINE_LINUX_DEFAULT=""</code>를 주석 처리</li>
  <li><code class="language-plaintext highlighter-rouge">GRUB_CMDLINE_LINUX="text"</code>로 변경</li>
  <li><code class="language-plaintext highlighter-rouge">GRUB_TERMINAL=console</code>의 주석 제거</li>
</ul>

<p>esc → :wq → enter 순으로 변경 사항을 저장한 뒤 아래 명령어로 적용한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">update</span><span class="o">-</span><span class="n">grub</span> <span class="c1"># 변경 사항 적용
</span><span class="n">sudo</span> <span class="n">systemctl</span> <span class="nb">set</span><span class="o">-</span><span class="n">default</span> <span class="n">multi</span><span class="o">-</span><span class="n">user</span><span class="p">.</span><span class="n">target</span>
<span class="n">sudo</span> <span class="n">reboot</span> <span class="c1"># 재부팅
</span></code></pre></div></div>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Linux, Ubuntu, Nvidia" /><summary type="html"><![CDATA[대상 이 글은 Nvidia GPU가 설치된 우분투 서버에 ssh 접속을 하기 위해 세팅을 하시는 분들을 대상으로 합니다.]]></summary></entry><entry><title type="html">[k8s] 사설 저장소에서 도커 이미지 받아오기 실패</title><link href="http://localhost:4000/nineteenth-post/" rel="alternate" type="text/html" title="[k8s] 사설 저장소에서 도커 이미지 받아오기 실패" /><published>2023-03-22T00:00:00+07:00</published><updated>2023-03-22T00:00:00+07:00</updated><id>http://localhost:4000/nineteenth-post</id><content type="html" xml:base="http://localhost:4000/nineteenth-post/"><![CDATA[<h1 id="-에러">🔒 에러</h1>
<p>쿠버네티스에서 yaml 파일을 작성할 때 도커 이미지를 사용하는 파드를 생성하려고 했으나 제대로 생성이 되지 않고 계속해서 <code class="language-plaintext highlighter-rouge">ImagePullBackOff</code> 상태가 되었다. Kubernetes Dashboard를 통해서 보니 다음과 같은 <strong>401 Unauthorized</strong> 에러 메시지가 떠있었다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failed to pull image: rpc error: code = Unknown desc = failed to pull and unpack image: 
failed to resolve reference: pulling from host failed with status code [manifests latest]: 
401 Unauthorized
</code></pre></div></div>

<p>사설 저장소(Private Registry)에서 이미지를 받아올 때 Secret을 사용해서 인증을 하게 되는데 아무래도 인증에 계속 실패하고 있는 듯하다. 분명 Secret을 등록해 두었는데도 에러가 사라지지 않아서 오랜시간 삽질을 하였다. Nginx를 통해서 들어올 때도 https 프로토콜로 요청하고 있으니 아무런 문제가 없는데 이상했다.</p>

<h1 id="-해결">🔑 해결</h1>

<p>결국 구글링을 계속한 끝에 다음과 같은 글을 발견했다.<br />
<strong><code class="language-plaintext highlighter-rouge">Secrets의 경우 파드와 같은 네임스페이스에 존재해야합니다.</code></strong> (<a href="https://velog.io/@numerok/harbor-사용-시-unauthorized-unauthorized-to-access-repository">참고</a>)</p>

<p>정신이 번쩍 들었다. 개발에는 꼼꼼함이 필수라는 것을 다시금 느낀다. 빠르게 Secret을 다시 만들었다. <br />
아래는 Secret을 만드는 명령어이다. 필자는 저장소로 Harbor를 사용하고 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create secret docker-registry harbor --docker-server=[저장소주소] 
--docker-username=[저장소ID] --docker-password=[저장소비밀번호] -n [네임스페이스]
</code></pre></div></div>
<p>마지막에 <code class="language-plaintext highlighter-rouge">-n [네임스페이스]</code>가 가장 중요하다. 이는 파드를 생성하는 네임스페이스와 같아야한다!
<code class="language-plaintext highlighter-rouge">kubectl get secrets -n [네임스페이스]</code> 명령어로 Secret이 잘 생성되었는지 확인해본다.<br />
이해를 돕기 위해 아래에 yaml 파일 예시도 함께 첨부한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># deployment.yaml 예
</span><span class="p">...</span>
    <span class="n">template</span><span class="p">:</span>
      <span class="n">metadata</span><span class="p">:</span>
        <span class="n">labels</span><span class="p">:</span>
          <span class="n">app</span><span class="p">:</span> <span class="n">test</span>            
      <span class="n">spec</span><span class="p">:</span>
        <span class="n">imagePullSecrets</span><span class="p">:</span> 
        <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">harbor</span>
        <span class="n">containers</span><span class="p">:</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">test</span>
            <span class="n">image</span><span class="p">:</span> <span class="n">harbor</span><span class="p">.</span><span class="n">io</span><span class="o">/</span><span class="n">testImage</span><span class="p">:</span><span class="n">latest</span>
<span class="p">...</span>                        
</code></pre></div></div>
<p>누군가는 시간을 아꼈기를 바란다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Kubernetes, Harbor" /><summary type="html"><![CDATA[🔒 에러 쿠버네티스에서 yaml 파일을 작성할 때 도커 이미지를 사용하는 파드를 생성하려고 했으나 제대로 생성이 되지 않고 계속해서 ImagePullBackOff 상태가 되었다. Kubernetes Dashboard를 통해서 보니 다음과 같은 401 Unauthorized 에러 메시지가 떠있었다. Failed to pull image: rpc error: code = Unknown desc = failed to pull and unpack image: failed to resolve reference: pulling from host failed with status code [manifests latest]: 401 Unauthorized]]></summary></entry><entry><title type="html">[k8s] Jenkins에서 Credential 등록 불가 에러</title><link href="http://localhost:4000/eighteenth-post/" rel="alternate" type="text/html" title="[k8s] Jenkins에서 Credential 등록 불가 에러" /><published>2023-03-11T00:00:00+07:00</published><updated>2023-03-11T00:00:00+07:00</updated><id>http://localhost:4000/eighteenth-post</id><content type="html" xml:base="http://localhost:4000/eighteenth-post/"><![CDATA[<p align="center"><img src="https://github.com/froggydisk/froggydisk.github.io/blob/master/assets/img/18th.png?raw=true" /></p>

<h1 id="-credential을-등록하려해도-등록이-안-될-때">📌 Credential을 등록하려해도 등록이 안 될 때</h1>

<p>Jenkins와 GitHub Server를 연동하기 위해 Credential을 등록하는데 Add 버튼을 눌러도 제대로 등록이 되지 않았다.</p>

<p>(단, Username 항목에 연동하려는 서버의 유저 ID를 적고 ID 항목에는 각 Credential을 구분하기 위한 임의의 이름을 적었는지 확인하자. 단어가 헷갈릴 만하다.)</p>

<p>아무런 반응이 없어서 에러 메세지를 보기 위해 크롬에서 F12를 눌러 브라우저 콘솔창을 켰다.</p>

<p>그랬더니 다음과 같은 메시지를 띄워주고 있었다.</p>

<h3 id="-에러">🔒 에러</h3>

<p><strong><code class="language-plaintext highlighter-rouge">Mixed Content: The page was loaded over HTTPS, but requested an insecure script.</code></strong>
<strong><code class="language-plaintext highlighter-rouge">This request has been blocked; the content must be served over HTTPS.</code></strong></p>

<h3 id="-해결">🔑 해결</h3>

<p>이는 Nginx의 프록시 설정이 제대로 되어 있지 않아서 발생하는 문제이다. nginx.conf 파일 상단에 아래의 설정을 추가해준다.</p>

<p>참고로 nginx.conf는 일반적으로 /etc/nginx 경로에 존재한다. 혹은 sites-enabled에 있는 .conf 파일에 넣어주어도 무방하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># nginx.conf
</span><span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="n">Real</span><span class="o">-</span><span class="n">IP</span> <span class="err">$</span><span class="n">remote_addr</span><span class="p">;</span>
<span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="n">Forwarded</span><span class="o">-</span><span class="n">For</span> <span class="err">$</span><span class="n">proxy_add_x_forwarded_for</span><span class="p">;</span>
<span class="n">proxy_set_header</span> <span class="n">Host</span> <span class="err">$</span><span class="n">http_host</span><span class="p">;</span>
<span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="n">Forwarded</span><span class="o">-</span><span class="n">Proto</span> <span class="err">$</span><span class="n">scheme</span><span class="p">;</span> <span class="c1"># &lt;- 중요
</span></code></pre></div></div>

<p>원인은 암호화된 HTTPS 페이지에 HTTP 프로토콜로 요청을 보내고 있기 때문이다.</p>

<p>위 설정이 어떠한 의미를 담고 있는지 참고할 만한 글을 두 개 소개한다. 해당 글들은 이에 대한 설명을 담고 있다.</p>

<p>● <a href="https://velog.io/@csk917work/Nginx-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95">Nginx 서버 설정(프록시, 캐시, 보안)</a><br />
● <a href="https://mchch.tistory.com/234">Nginx reverse proxy 설정</a></p>

<p>이후 nginx를 reload하면 정상적으로 Credential 등록이 가능해진다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">service</span> <span class="n">nginx</span> <span class="nb">reload</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="-참고할-만한-정보">📌 참고할 만한 정보</h2>

<p>플러그인을 설치하다가 Jenkins를 재시작해야할 일이 있었는데 이후에 모든 설정이 초기화되는 현상을 만났다.</p>

<h3 id="-에러-1">🔒 에러</h3>
<p>혹시라도 <code class="language-plaintext highlighter-rouge">https://[jenkins 도메인]/restart</code>를 이용해 Jenkins를 재시작할 때 설정이 초기화되는 현상이 있다면 pv 설정이 제대로 되어있나 살펴보자.</p>

<h3 id="-해결-1">🔑 해결</h3>
<p><code class="language-plaintext highlighter-rouge">kubectl get pv -A</code>로 pv 관련 reclaim policy 설정이 <strong><code class="language-plaintext highlighter-rouge">Retain</code></strong>으로 되어 있나 확인한다.</p>

<p>혹여나 Delete로 되어 있다면 patch 명령어를 통해 설정을 바꾸어준다. (<a href="https://kubernetes.io/ko/docs/tasks/administer-cluster/change-pv-reclaim-policy/">참고</a>)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kubectl</span> <span class="n">patch</span> <span class="n">pv</span> <span class="o">&lt;</span><span class="n">your</span><span class="o">-</span><span class="n">pv</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">-</span><span class="n">p</span> <span class="s">'{"spec":{"persistentVolumeReclaimPolicy":"Retain"}}'</span>
</code></pre></div></div>

<p>이후 pv와 pvc는 삭제한 뒤 다시 만들어준다. 추가로 <code class="language-plaintext highlighter-rouge">kubectl logs</code> 명령어로 Jenkins 파드에서 에러 메시지를 보내고 있지 않나 확인한다.</p>

<p>Jenkins를 restart해도 설정이 남아있다면 성공이다.</p>

<p>이는 비단 Jenkins 뿐만 아니라 pv와 연계해서 k8s 위에서 돌아가고 있는 모든 서비스에도 적용되는 사안이므로 pv 설정은 항상 신중해야한다.</p>

<p>안 그러면 소중한 데이터를 날리는 일이 있을 수 있다. (나의 이야기다…)</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Kubernetes, Jenkins, Nginx" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[k8s] 로컬에서 원격 하버 저장소로 도커 이미지 업로드</title><link href="http://localhost:4000/seventeenth-post/" rel="alternate" type="text/html" title="[k8s] 로컬에서 원격 하버 저장소로 도커 이미지 업로드" /><published>2023-03-09T00:00:00+07:00</published><updated>2023-03-09T00:00:00+07:00</updated><id>http://localhost:4000/seventeenth-post</id><content type="html" xml:base="http://localhost:4000/seventeenth-post/"><![CDATA[<h1 id="-도커-원격-로그인">📌 도커 원격 로그인</h1>

<p>쿠버네티스 상에 하버 서비스를 띄우는데 성공했다면 로컬에서 도커 이미지를 보낼 준비가 된 것이다.</p>

<p>로그인 방법은 간단하다. 단, 기본적으로 로컬에 도커가 돌고 있어야 한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">docker</span> <span class="n">login</span> <span class="p">[</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">하버도메인</span><span class="p">]</span>
</code></pre></div></div>

<p>만약 이 과정에서 로그인 에러가 발생했다면 해결 방법은 두 가지이다. (<a href="https://qkqhxla1.tistory.com/1123">참고</a>)</p>

<h3 id="-에러">🔒 에러</h3>
<p><strong><code class="language-plaintext highlighter-rouge">Error saving credentials: error storing credentials - err: exit status 1, out: ''</code></strong></p>

<h3 id="-해결">🔑 해결</h3>
<p>● <code class="language-plaintext highlighter-rouge">~/.docker/config.json</code> 파일에서 <code class="language-plaintext highlighter-rouge">"credsStore":</code>의 내용을 <code class="language-plaintext highlighter-rouge">""</code>로 수정한다.</p>

<p>● 혹은 <code class="language-plaintext highlighter-rouge">~/.docker/config.json</code> 파일을 삭제해준다.</p>

<p>이후 도커를 재시작하고 다시 로그인을 시도한다.</p>

<h1 id="-도커-이미지-업로드">📌 도커 이미지 업로드</h1>

<p>로그인에 성공하였다면 실제로 push를 해 볼 차례이다. push 순서는 다음과 같다.</p>
<ol>
  <li>원격 하버 저장소에 로그인</li>
  <li>원하는 도커 이미지의 태그 생성</li>
  <li>저장소에 push</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 로그인
</span><span class="n">sudo</span> <span class="n">docker</span> <span class="n">login</span> <span class="p">[</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">하버도메인</span><span class="p">]</span>
<span class="c1"># push할 이미지를 찾는다. 없으면 허브에서 pull 해온다.
</span><span class="n">sudo</span> <span class="n">docker</span> <span class="n">images</span> 
<span class="c1"># 도커 이미지에 tag를 붙여준다.
</span><span class="n">sudo</span> <span class="n">docker</span> <span class="n">tag</span> <span class="p">[</span><span class="n">선택한</span> <span class="n">도커이미지</span><span class="p">]</span> <span class="p">[</span><span class="n">하버도메인</span><span class="p">]</span><span class="o">/</span><span class="p">[</span><span class="n">프로젝트명</span><span class="p">]</span><span class="o">/</span><span class="p">[</span><span class="n">도커이미지</span><span class="p">]:[</span><span class="n">버전명</span><span class="p">]</span>
<span class="c1"># 저장소에 push
</span><span class="n">sudo</span> <span class="n">docker</span> <span class="n">push</span> <span class="p">[</span><span class="n">하버도메인</span><span class="p">]</span><span class="o">/</span><span class="p">[</span><span class="n">프로젝트명</span><span class="p">]</span><span class="o">/</span><span class="p">[</span><span class="n">도커이미지</span><span class="p">]:[</span><span class="n">버전명</span><span class="p">]</span>
</code></pre></div></div>

<p>주의할 점은 하버 포탈에 해당 프로젝트가 이미 생성된 상태여야 한다는 것이다. 다만 버전명은 꼭 숫자가 아니어도 된다.</p>

<p>예를 들면 다음과 같다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo docker tag harbor.domain.io/my-project/busybox:0.1
</code></pre></div></div>

<h3 id="-에러-1">🔒 에러</h3>
<p>만약 push가 정상적으로 되지 않고 <strong><code class="language-plaintext highlighter-rouge">Retrying in 5 seconds</code></strong>와 같은 메시지가 반복된다면 아래와 같이 해결한다.</p>

<h3 id="-해결-1">🔑 해결</h3>
<p>헬름을 통해 다운받았다면 하버의 deployment yaml 파일이 존재할 것이다. 파일 내용의 한 부분만 수정해주면 된다. (<a href="https://www.claudiokuenzler.com/blog/958/running-harbor-registry-behind-reverse-proxy-solve-docker-push-errors">참고</a>)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="n">registry</span><span class="p">:</span>
	<span class="p">...</span>
	<span class="n">relativeurls</span><span class="p">:</span> <span class="n">true</span> <span class="c1"># false에서 true로 변경
</span></code></pre></div></div>

<p>그 이후에는 변경 사항을 적용해 주면 된다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">helm</span> <span class="n">upgrade</span> <span class="o">--</span><span class="n">install</span> <span class="n">harbor</span> <span class="n">harbor</span><span class="o">/</span><span class="n">harbor</span> <span class="o">-</span><span class="n">f</span> <span class="n">my</span><span class="o">-</span><span class="n">values</span><span class="p">.</span><span class="n">yaml</span> <span class="o">-</span><span class="n">n</span> <span class="n">harbor</span>
</code></pre></div></div>

<p>온프레미스 관련 에러는 항상 레퍼런스가 적어 해결이 어렵다. 누군가에게는 도움이 되었길 빈다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Kubernetes, Harbor, Helm, Docker" /><summary type="html"><![CDATA[📌 도커 원격 로그인]]></summary></entry><entry><title type="html">[React Native] iOS 푸쉬 알림을 위해 Firebase를 적용하면서 만난 에러들</title><link href="http://localhost:4000/sixteenth-post/" rel="alternate" type="text/html" title="[React Native] iOS 푸쉬 알림을 위해 Firebase를 적용하면서 만난 에러들" /><published>2023-02-09T00:00:00+07:00</published><updated>2023-02-09T00:00:00+07:00</updated><id>http://localhost:4000/sixteenth-post</id><content type="html" xml:base="http://localhost:4000/sixteenth-post/"><![CDATA[<p>앱을 만들다보면 어느 순간 노티 기능을 적용해야할 때가 온다. 차근차근 개발을 진행하다보니 나 또한 어느새 그러한 페이즈에 도달해 있었다.</p>

<p>검색해보니 React Native로 앱을 만들 때 노티 기능은 보통 Firebase를 연동하는 경우가 많은 듯하다.</p>

<p>설정할 것이 꽤나 많지만 차근차근 진행하면 그렇게 어렵지는 않다. 아무래도 안드로이드보다는 iOS가 좀 더 손이 많이 간다.</p>

<p>깔끔하게 설명해주는 글이 있어서 먼저 소개한다. 아직 설정 전인 분들은 참고하셔도 좋을 것 같다.</p>

<p>📍<a href="https://velog.io/@mayinjanuary/React-Native-Firebase-로-푸쉬-알림-구현하기-안드로이드-세팅">Android에서 Firebase를 이용한 푸쉬 알림 설정</a><br />
📍<a href="https://velog.io/@mayinjanuary/React-Native-Firebase-로-푸쉬-알림-구현하기-2-IOS-앱-세팅하기">iOS에서 Firebase를 이용한 푸쉬 알림 설정</a></p>

<p>안드로이드는 에뮬레이터에서도 푸쉬 알림 테스트가 가능하기에 설정 난이도가 높지 않고 고맙게도 특별한 에러도 없었다.</p>

<p>반면, iOS는 시뮬레이터에서는 테스트가 불가능하여 실제 기기에 빌드해서 테스트를 진행할 수밖에 없다.</p>

<p>문제는 설정은 잘 따라서 한 것 같은데 빌드가 안되는 것이었다…</p>

<p>보통 처음에 만나는 버그는 다음과 같다.</p>

<h2 id="에러-1">에러 1</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The Swift pod `FirebaseCoreInternal` depends upon `GoogleUtilities`, which does not define modules.
To opt into those targets generating module maps (which is necessary to import them from Swift when building as static libraries), 
you may set `use_modular_headers!` globally in your Podfile, or specify `:modular_headers =&gt; true` for particular dependencies.
</code></pre></div></div>

<p>해결 방법은 <strong>podfile에서 config=use_native_modules 아래에 <code class="language-plaintext highlighter-rouge">pod 'GoogleUtilities', :modular_headers =&gt; true</code>를 추가</strong>해주는 것이다.</p>

<p>이후에 pod install을 다시 해주면 된다.</p>

<p>여기서 모든 문제가 해결이 되는 사람은 매우 매우 다행인 것이다. 두 번째로 만나는 에러는 아마 다음일 것이다.</p>

<h2 id="에러-2">에러 2</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Module 'Firebase' not found 혹은 Module 'FirebaseCore' not found
</code></pre></div></div>

<p>구글링을 해보면 여러가지 해결 방법이 나오는데 필자는 1번 해결 방법과 같은 위치에 <strong><code class="language-plaintext highlighter-rouge">pod 'FirebaseCore', :modular_headers =&gt; true</code></strong>(FirebaseCore 말고 상황에 맞게 모듈명을 교체)를 추가해 주는 것으로 해결할 수 있었다. (혹시라도 Xcode에서 @import FirebaseCore를 #import “FirebaseCore/FirebaseCore.h”로 바꿔주어 에러를 해결하려 하면 또 다른 에러를 만날 가능성이 매우 높을 것이므로 추천하지는 않는다.)</p>

<p>하지만 여기까지 진행해도 Xcode는 여전히 에러를 내뿜는 경우가 있다.</p>

<h2 id="에러-3">에러 3</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Redefinition of module ‘Firebase’ 혹은 Redefinition of module 'FirebaseCore'
</code></pre></div></div>

<p>이걸 해결한답시고 podfile에 2번 해결 방법을 지우고 <code class="language-plaintext highlighter-rouge">use_frameworks! :linkage =&gt; :static</code>를 추가할 수 있는데 이 설정은 flipper와 충돌을 일으키기에 잠재적인 에러의 원인이 될 가능성이 농후하다. 실제로 podfile에서 user_flipper()를 주석 처리해야 하는 경우가 많을 것이라고 예상된다.</p>

<p>필자의 경우에는 flipper를 사용하지 않으니 MQTT가 작동하지 않는 버그를 만났다. (<a href="https://stackoverflow.com/questions/72289521/swift-pods-cannot-yet-be-integrated-as-static-libraries-firebasecoreinternal-lib">stackoverflow</a>)</p>

<p>잘 되는 사람은 그대로 진행해도 되지만 개인적으로는 <code class="language-plaintext highlighter-rouge">use_frameworks! :linkage =&gt; :static</code>보다는 not found 모듈을 일일이 <code class="language-plaintext highlighter-rouge">pod [모듈], :modular_headers =&gt; true</code> 해주는 것을 추천한다.</p>

<p>그래서 Redefinition 에러는 어떻게 해결하느냐고?</p>

<p>에러 메시지만 봐도 알겠지만 이유는 모듈을 여러번 정의하였기 때문이다. 이는 해당 모듈과 관련한 패키지가 여러개 존재할 가능성을 시사한다.</p>

<p>잘 생각해보면 Firebase 홈페이지에서 처음으로 앱을 등록할 때 <code class="language-plaintext highlighter-rouge">firebase-ios-sdk</code> 패키지를 Xcode 상에서 등록하라는 가이드를 받는다. 시키는대로 착실하게 진행한 사람은 아마도 위와 같은 에러를 만날 것이다. 
하지만 우리는 2번에서 <code class="language-plaintext highlighter-rouge">FirebaseCore</code> 라이브러리를 수동으로 다운받았기에 사실상 같은 기능을 하는 필요없는 패키지를 다운받은 것이다.</p>

<p>웃기게도 firebase-ios-sdk가 모듈을 찾지 못해서 수동으로 다운받았더니 적반하장으로 왜 다시 정의하냐고 에러를 주는 것이다. 어딘가 꼬여있음이 분명하다.</p>

<p>아무튼! 이러한 사실을 깨달았다면 이제 해결은 간단하다.</p>

<p><strong>Xcode에서 firebase-ios-sdk를 삭제해주면 된다.</strong> (<a href="https://stackoverflow.com/questions/70760326/flutter-on-ios-redefinition-of-module-firebase">stackoverflow</a>)</p>

<p>이걸로 not found 에러와 redefinition 에러의 무한 반복에서 벗어나셨다면 축하드린다.</p>

<p>필자는 이를 위해 꼬박 하루를 써버렸다. 언제나 가장 어려운 건 환경 세팅이라는 것에는 변함이 없다. 누군가는 시간을 절약하길 간절히 바란다.</p>

<p>혹시나 참고를 원하시는 분이 있을까봐 Podfile 내용도 첨부한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require_relative</span> <span class="err">'</span><span class="o">../</span><span class="n">node_modules</span><span class="o">/</span><span class="n">react</span><span class="o">-</span><span class="kd">native</span><span class="o">/</span><span class="n">scripts</span><span class="o">/</span><span class="n">react_native_pods</span><span class="err">'</span>
<span class="n">require_relative</span> <span class="err">'</span><span class="o">../</span><span class="n">node_modules</span><span class="o">/</span><span class="nd">@react</span><span class="o">-</span><span class="kd">native</span><span class="o">-</span><span class="n">community</span><span class="o">/</span><span class="n">cli</span><span class="o">-</span><span class="n">platform</span><span class="o">-</span><span class="n">ios</span><span class="o">/</span><span class="n">native_modules</span><span class="err">'</span>

<span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="o">,</span> <span class="err">'</span><span class="mf">12.4</span><span class="err">'</span>
<span class="n">install</span><span class="o">!</span> <span class="err">'</span><span class="n">cocoapods</span><span class="err">'</span><span class="o">,</span> <span class="o">:</span><span class="n">deterministic_uuids</span> <span class="o">=&gt;</span> <span class="kc">false</span>

<span class="n">target</span> <span class="err">'</span><span class="n">example_app</span><span class="err">'</span> <span class="k">do</span>
  <span class="n">config</span> <span class="o">=</span> <span class="n">use_native_modules</span><span class="o">!</span>

  <span class="err">#</span> <span class="nc">Flags</span> <span class="n">change</span> <span class="n">depending</span> <span class="n">on</span> <span class="n">the</span> <span class="n">env</span> <span class="n">values</span><span class="o">.</span>
  <span class="n">flags</span> <span class="o">=</span> <span class="n">get_default_flags</span><span class="o">()</span>
  
  <span class="n">pod</span> <span class="err">'</span><span class="nc">FirebaseCore</span><span class="err">'</span><span class="o">,</span> <span class="o">:</span><span class="n">modular_headers</span> <span class="o">=&gt;</span> <span class="kc">true</span> <span class="err">#</span> <span class="o">&lt;-</span> <span class="n">여기</span> <span class="n">추가</span>
  <span class="n">pod</span> <span class="err">'</span><span class="nc">GoogleUtilities</span><span class="err">'</span><span class="o">,</span> <span class="o">:</span><span class="n">modular_headers</span> <span class="o">=&gt;</span> <span class="kc">true</span> <span class="err">#</span> <span class="o">&lt;-</span> <span class="n">여기</span> <span class="n">추가</span>

  <span class="n">use_react_native</span><span class="o">!(</span>
    <span class="o">:</span><span class="n">path</span> <span class="o">=&gt;</span> <span class="n">config</span><span class="o">[:</span><span class="n">reactNativePath</span><span class="o">],</span>
    <span class="err">#</span> <span class="n">to</span> <span class="n">enable</span> <span class="n">hermes</span> <span class="n">on</span> <span class="n">iOS</span><span class="o">,</span> <span class="n">change</span> <span class="err">`</span><span class="kc">false</span><span class="err">`</span> <span class="n">to</span> <span class="err">`</span><span class="kc">true</span><span class="err">`</span> <span class="n">and</span> <span class="n">then</span> <span class="n">install</span> <span class="n">pods</span>
    <span class="o">:</span><span class="n">hermes_enabled</span> <span class="o">=&gt;</span> <span class="kc">false</span><span class="o">,</span>
    <span class="o">:</span><span class="n">fabric_enabled</span> <span class="o">=&gt;</span> <span class="n">flags</span><span class="o">[:</span><span class="n">fabric_enabled</span><span class="o">],</span>
    <span class="o">:</span><span class="n">flipper_configuration</span> <span class="o">=&gt;</span> <span class="nc">FlipperConfiguration</span><span class="o">.</span><span class="na">enabled</span><span class="o">,</span>
    <span class="err">#</span> <span class="nc">An</span> <span class="n">absolute</span> <span class="n">path</span> <span class="n">to</span> <span class="n">your</span> <span class="n">application</span> <span class="n">root</span><span class="o">.</span>
    <span class="o">:</span><span class="n">app_path</span> <span class="o">=&gt;</span> <span class="s">"#{Pod::Config.instance.installation_root}/.."</span>
  <span class="o">)</span>

  <span class="n">target</span> <span class="err">'</span><span class="n">example_appTests</span><span class="err">'</span> <span class="k">do</span>
    <span class="n">inherit</span><span class="o">!</span> <span class="o">:</span><span class="n">complete</span>
    <span class="err">#</span> <span class="nc">Pods</span> <span class="k">for</span> <span class="n">testing</span>
  <span class="n">end</span>

  <span class="n">post_install</span> <span class="k">do</span> <span class="o">|</span><span class="n">installer</span><span class="o">|</span>
    <span class="n">react_native_post_install</span><span class="o">(</span><span class="n">installer</span><span class="o">)</span>
    <span class="n">__apply_Xcode_12_5_M1_post_install_workaround</span><span class="o">(</span><span class="n">installer</span><span class="o">)</span>
  <span class="n">end</span>
<span class="n">end</span>
</code></pre></div></div>

<p>스택오버플로우를 보다보면 <code class="language-plaintext highlighter-rouge">$RNFirebaseAsStaticFramework = true;</code>를 추가하라는 글도 많은데 <code class="language-plaintext highlighter-rouge">use_frameworks! :linkage =&gt; :static</code>를 사용하지 않는다면 굳이 추가해주지 않아도 된다. React Native Firebase <a href="https://rnfirebase.io">공식 문서</a>에도 잘 나와있으니 한번쯤 확인해보는 것도 좋겠다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, Firebase" /><summary type="html"><![CDATA[앱을 만들다보면 어느 순간 노티 기능을 적용해야할 때가 온다. 차근차근 개발을 진행하다보니 나 또한 어느새 그러한 페이즈에 도달해 있었다.]]></summary></entry><entry><title type="html">[React Native] BottomTabNavigator unmountOnBlur가 SafeAreaView에 미치는 영향</title><link href="http://localhost:4000/fifteenth-post/" rel="alternate" type="text/html" title="[React Native] BottomTabNavigator unmountOnBlur가 SafeAreaView에 미치는 영향" /><published>2022-11-21T00:00:00+07:00</published><updated>2022-11-21T00:00:00+07:00</updated><id>http://localhost:4000/fifteenth-post</id><content type="html" xml:base="http://localhost:4000/fifteenth-post/"><![CDATA[<p>React Native에서 Bottom Tab Navigator를 사용할 때 특정 탭을 누를 때마다 화면이 리렌더링 되도록 하고 싶을 때가 있다.</p>

<p>그럴 때 사용하는 것이 <code class="language-plaintext highlighter-rouge">unmountOnBlur: true</code> 이다. 사용법은 아래 코드와 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="err">{</span><span class="nn">createBottomTabNavigator</span><span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="nd">@react</span><span class="o">-</span><span class="n">navigation</span><span class="o">/</span><span class="n">bottom</span><span class="o">-</span><span class="n">tabs</span><span class="err">'</span><span class="o">;</span>

<span class="kd">const</span> <span class="nc">BottomTab</span> <span class="o">=</span> <span class="n">createBottomTabNavigator</span><span class="o">();</span>
<span class="kd">const</span> <span class="nc">ExampleScreen</span> <span class="o">=</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">BottomTab</span><span class="o">.</span><span class="na">Navigator</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nc">BottomTab</span><span class="o">.</span><span class="na">Screen</span>
        <span class="n">name</span><span class="o">=</span><span class="s">"NavigatorMain"</span>
        <span class="n">component</span><span class="o">={</span><span class="nc">NavigatorMain</span><span class="o">}</span>
        <span class="n">options</span><span class="o">={</span> <span class="o">{</span>
          <span class="nl">tabBarLabel:</span> <span class="err">'</span><span class="nc">Main</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">unmountOnBlur:</span> <span class="kc">true</span><span class="o">,</span> <span class="c1">// 이 부분</span>
        <span class="o">}</span> <span class="o">}</span>
      <span class="o">/&gt;</span>
    <span class="o">&lt;/</span><span class="nc">BottomTab</span><span class="o">.</span><span class="na">Navigator</span><span class="o">&gt;</span>
  <span class="o">)}</span>
</code></pre></div></div>

<p>문제는 해당 옵션을 사용하게 되면 리렌더링은 문제가 없지만 알 수 없는 깜빡임이 발생한다는 것이다.</p>

<p>화면 렌더링 순서에 의해 발생하는 깜빡임으로, 사실 예민한 사람이 아니고서야 잘 눈치채지 못 할 지도 모른다.</p>

<p>원인은 SafeAreaView의 적용 타이밍이 생각보다 빠르지 않다는 데에 있다.</p>

<p>unmountOnBlur를 통해서 화면을 리렌더링할 시에는 <SafeAreaView> 태그 안의 요소가 먼저 그려진 뒤 status bar 만큼의 크기가 뒤늦게 margin값으로 내려온다.</SafeAreaView></p>

<p>해결 방법은 단순히 SafeAreaView를 사용하지 않는 데에 있다.</p>

<p>대신 react-native-status-bar-height라는 status bar의 높이를 알려주는 라이브러리가 있으니 그것을 통해 직접 컴포넌트에 스타일을 지정해 주면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="err">{</span><span class="nn">getStatusBarHeight</span><span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="n">react</span><span class="o">-</span><span class="kd">native</span><span class="o">-</span><span class="n">status</span><span class="o">-</span><span class="n">bar</span><span class="o">-</span><span class="n">height</span><span class="err">'</span><span class="o">;</span>
<span class="kd">const</span> <span class="nc">ExampleScreen</span> <span class="o">=</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
<span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span>
      <span class="n">style</span><span class="o">={</span> 
        <span class="o">{</span>
        <span class="nl">height:</span> <span class="nc">Dimensions</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="err">'</span><span class="n">window</span><span class="err">'</span><span class="o">).</span><span class="na">height</span><span class="o">,</span>
        <span class="nl">top:</span> <span class="n">getStatusBarHeight</span><span class="o">()</span> <span class="c1">// 이 부분</span>
        <span class="o">}</span>
      <span class="o">}&gt;</span>
      <span class="o">...</span> 
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
<span class="o">)}</span>
</code></pre></div></div>

<h3 id="참고">참고</h3>
<p><a href="https://github.com/ovr/react-native-status-bar-height">react-native-status-bar-height</a></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[React Native에서 Bottom Tab Navigator를 사용할 때 특정 탭을 누를 때마다 화면이 리렌더링 되도록 하고 싶을 때가 있다.]]></summary></entry><entry><title type="html">[React Native] Blank screen issue on iOS</title><link href="http://localhost:4000/fourteenth-post/" rel="alternate" type="text/html" title="[React Native] Blank screen issue on iOS" /><published>2022-11-13T00:00:00+07:00</published><updated>2022-11-13T00:00:00+07:00</updated><id>http://localhost:4000/fourteenth-post</id><content type="html" xml:base="http://localhost:4000/fourteenth-post/"><![CDATA[<p align="center"><img src="https://github.com/froggydisk/froggydisk.github.io/blob/master/assets/img/black_screen.png?raw=true" width="250" height="500" style="border: 1px solid black" /></p>

<p>어느 순간부터 빌드는 되는데 화면에 아무것도 나타나지 않는 증상이 나타났다. 빌드는 성공하였기 때문에 라이브러리를 설치하면서 어딘가 설정이 꼬인건가 싶었다.</p>

<p>node_modules를 지웠다 설치하고를 몇 번이나 반복하였지만 해결되지 않았다. 당연히 캐시 삭제 정도로는 어림도 없었다.</p>

<p>에러 코드조차 나오지 않는 버그였기에 원인 분석부터가 막막했다. 새로운 프로젝트를 새로 하나 팔까 하다가 우선 깃 히스토리를 거슬러 올라가 보기로 하였다.</p>

<p>다행히 메인 브랜치에 push 해놓은 버전은 빌드가 잘 되었다.</p>

<p>이제부터는 다른 부분을 찾아내는 노가다이다. 라이브러리를 새로 설치하고 코드를 하나하나 비교하면서 바꾸어 주었는데 생각지도 못한 곳에서 버그를 재현할 수 있었다.</p>

<p>일단, 인터넷에서 검색하면 React Native는 <code class="language-plaintext highlighter-rouge">자바스크립트 프레임워크</code>라고 나온다. 그러므로 당연히 자바스크립트 코드를 사용할 수 있다.</p>

<p>하지만 디버깅까지 제대로 해준다고는 하지 않았다…</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">example</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">array</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>
<p>문제가 된 부분은 위와 같다. for문을 사용할 때 <code class="language-plaintext highlighter-rouge">i += 2</code>에서 <code class="language-plaintext highlighter-rouge">=</code>를 빼먹는 실수가 있었는데 Metro에서는 아무런 버그를 띄워주지 않는다.</p>

<p>갑자기 멈춰버린 앱을 리로드하면 그때부터 버그 지옥이 시작되는 것이다.</p>

<p>설마 JS 코드 오타를 잡아주지 않는다고는 생각하지 않았기에 더욱더 헤맸던 것 같다.</p>

<h3 id="결론">결론</h3>
<p>● <strong>문제</strong>: 앱을 빌드했을 때 Bundle 100% 혹은 Loading from Metro… 문구에서 화면이 멈추고 하얀색 공백 화면만 떠있는 현상.
<br />
● <strong>해결</strong>: 자바스크립트 문법이 틀린 것이 없나 살펴보고 수정한다. (혹은 최근에 설치한 라이브러리가 문제일 수 있다)</p>

<p>● <strong>Issue</strong>: The simulator is stuck with the message ‘Bundle 100%’ or ‘Loading from Metro…’ on the white screen.
<br />
● <strong>How to solve</strong>: Check the grammar of your JavaScript code. Metro doesn’t let you know the typo of JS code, but just stops the App.</p>

<h3 id="참고">참고</h3>
<p><a href="https://github.com/facebook/react-native/issues/26605">Blank Screen Issue on iOS #26605</a></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, JavaScript" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[React Native] 서버에서 이미지를 fetch 해올 때 화면에 제대로 나타나지 않는 현상</title><link href="http://localhost:4000/thirteenth-post/" rel="alternate" type="text/html" title="[React Native] 서버에서 이미지를 fetch 해올 때 화면에 제대로 나타나지 않는 현상" /><published>2022-11-09T00:00:00+07:00</published><updated>2022-11-09T00:00:00+07:00</updated><id>http://localhost:4000/thirteenth-post</id><content type="html" xml:base="http://localhost:4000/thirteenth-post/"><![CDATA[<p>글을 쓰면서도 조금은 부끄럽지만 가끔은 정말 간단한 걸로 몇 시간을 헤매고는 한다. 
<br />
React Native에서 Multer를 이용하여 서버에서 이미지를 불러오는데 다운 받아온 이미지가 화면에 표시되지 않는 현상이 있었다. 
<br />
공식 문서를 그대로 따라서 fetch 함수를 사용하였고 uri도 로그에 제대로 찍혀 있는데도 계속 문제가 남아있어 머리를 꽁꽁 싸맸다.
<br />
나중에 보니 해결 방법은 매우 간단했다. 
<br />
잊고 있었던 것이다. 샘플 이미지는 전부 local의 asset 폴더에 저장하여 사용하고 있었기에 그동안 신경쓰지 않고 있었지만 사실 <code class="language-plaintext highlighter-rouge">이미지는 width와 height를 지정해주는 것이 좋다</code>는 것을.
<br />
그렇다. fetch 문제인 줄 알고 axios로 바꿔도 보고 하였지만 결국 설정 문제였던 것이다. 
resizeMode 옵션을 너무 신뢰하고 있었는지 이를 눈치채는데 오랜 시간이 걸렸다. 
한 번도 아니고 두 번이나 똑같은 문제로 헤맨 전적이 있다. 
<br />
누군가는 시간을 아끼기 바란다.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">Image</span><span class="w">
    </span><span class="n">source</span><span class="o">=</span><span class="p">{</span><span class="w"> </span><span class="p">{</span><span class="n">uri</span><span class="o">:</span><span class="w"> </span><span class="n">URI</span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="n">style</span><span class="o">=</span><span class="p">{</span><span class="w"> </span><span class="p">{</span><span class="n">height</span><span class="o">:</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">:</span><span class="w"> </span><span class="m">100</span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="o">/&gt;</span><span class="w">
</span></code></pre></div></div>

<h3 id="참고">참고</h3>
<p><a href="https://reactnative.dev/docs/image">React Native Doc. - Image</a></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, Multer" /><summary type="html"><![CDATA[글을 쓰면서도 조금은 부끄럽지만 가끔은 정말 간단한 걸로 몇 시간을 헤매고는 한다. React Native에서 Multer를 이용하여 서버에서 이미지를 불러오는데 다운 받아온 이미지가 화면에 표시되지 않는 현상이 있었다. 공식 문서를 그대로 따라서 fetch 함수를 사용하였고 uri도 로그에 제대로 찍혀 있는데도 계속 문제가 남아있어 머리를 꽁꽁 싸맸다. 나중에 보니 해결 방법은 매우 간단했다. 잊고 있었던 것이다. 샘플 이미지는 전부 local의 asset 폴더에 저장하여 사용하고 있었기에 그동안 신경쓰지 않고 있었지만 사실 이미지는 width와 height를 지정해주는 것이 좋다는 것을. 그렇다. fetch 문제인 줄 알고 axios로 바꿔도 보고 하였지만 결국 설정 문제였던 것이다. resizeMode 옵션을 너무 신뢰하고 있었는지 이를 눈치채는데 오랜 시간이 걸렸다. 한 번도 아니고 두 번이나 똑같은 문제로 헤맨 전적이 있다. 누군가는 시간을 아끼기 바란다.]]></summary></entry><entry><title type="html">[Multer] Error: ENOENT: no such file or directory</title><link href="http://localhost:4000/twelveth-post/" rel="alternate" type="text/html" title="[Multer] Error: ENOENT: no such file or directory" /><published>2022-11-08T00:00:00+07:00</published><updated>2022-11-08T00:00:00+07:00</updated><id>http://localhost:4000/twelveth-post</id><content type="html" xml:base="http://localhost:4000/twelveth-post/"><![CDATA[<p>● 서버 코드</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">multer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">multer</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">multer</span><span class="p">.</span><span class="nx">diskStorage</span><span class="p">({</span>
  <span class="na">destination</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">userId</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)).</span><span class="nx">userId</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">dir</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">./upload/</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">userId</span><span class="p">;</span> <span class="c1">// See here!</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">fs</span><span class="p">.</span><span class="nx">existsSync</span><span class="p">(</span><span class="nx">dir</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// 해당 유저의 디렉토리가 있는지 확인</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">mkdirSync</span><span class="p">(</span><span class="nx">dir</span><span class="p">,</span> <span class="p">{</span> <span class="na">recursive</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span> <span class="c1">// 없다면 디렉토리를 생성</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">dir</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="na">filename</span><span class="p">:</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">`</span><span class="p">${</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()}</span><span class="s2">_</span><span class="p">${</span><span class="nx">file</span><span class="p">.</span><span class="nx">originalname</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> 
  <span class="p">},</span>
<span class="p">});</span>
<span class="kd">var</span> <span class="nx">save</span> <span class="o">=</span> <span class="nx">multer</span><span class="p">({</span> <span class="na">storage</span><span class="p">:</span> <span class="nx">storage</span> <span class="p">}).</span><span class="nx">array</span><span class="p">(</span><span class="dl">"</span><span class="s2">profileImage</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// 한 장만 보낼 때는 .single("profileImage");를 써도 된다.</span>
</code></pre></div></div>
<p>Multer를 사용하여 이미지를 업로드할 때 유저별로 폴더를 만들어서 따로 저장하려고 하는데 자꾸 에러가 났다. 
<br />
디렉토리를 생성하지 못하는 걸로 보아 함수를 fs쪽 함수를 잘못 사용하고 있나 싶어서 열심히 찾아보았으나 아무런 진전이 없었다. 
<br />
오랜 시간 끝에 아무생각 없이 /upload/로 되어 있던 절대경로에 마침표를 붙여 상대경로로 만들어주었더니 정상적으로 작동하였다. 
<br />
서버 설정에 따라 마침표가 필요할 때가 있고 아닐 때가 있으므로 둘 다 해보고 되는 것으로 하면 되겠다. 
<br />
여기서 중요한 것은 항상 경로 체크를 선택지에 넣어두는 것이 무의미한 시간 낭비를 피할 수 있다는 것이다. 
<br />
참고를 위해 클라이언트쪽 코드도 남겨둔다.</p>

<p>● 클라이언트 코드</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">createFormData</span> <span class="o">=</span> <span class="p">(</span><span class="nx">image</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FormData</span><span class="p">();</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">data</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">body</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
    <span class="p">});</span>
    <span class="nx">data</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="dl">'</span><span class="s1">profileImage</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="c1">// 필드명으로서, 서버에서 정의된 것과 동일해야한다.</span>
      <span class="na">name</span><span class="p">:</span> <span class="nx">image</span><span class="p">.</span><span class="nx">name</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">multipart/form-data</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">uri</span><span class="p">:</span> <span class="nx">image</span><span class="p">.</span><span class="nx">uri</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
  <span class="p">};</span>

<span class="kd">const</span> <span class="nx">photoUpload</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:8080/user/upload</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
          <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">multipart/form-data</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="na">body</span><span class="p">:</span> <span class="nx">createFormData</span><span class="p">(</span><span class="nx">image</span><span class="p">,</span> <span class="p">{</span>
          <span class="na">userId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">tester</span><span class="dl">"</span><span class="p">,</span>
        <span class="p">}),</span>
      <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">upload success</span><span class="dl">'</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">upload error</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
      <span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="p">};</span>
    <span class="p">}</span>
  <span class="p">};</span>
</code></pre></div></div>

<h3 id="참고">참고</h3>
<p><a href="https://stackoverflow.com/questions/68254686/error-enoent-no-such-file-or-directory-mkdir-when-trying-to-create-directory">Error: ENOENT: no such file or directory, mkdir when trying to create directory</a></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, NodeJS, Multer" /><summary type="html"><![CDATA[● 서버 코드 ```javascript const multer = require(“multer”); const fs = require(“fs”);]]></summary></entry></feed>