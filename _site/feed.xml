<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2023-02-19T16:15:53+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">froggydisk</title><subtitle>This is for frogs in the world.</subtitle><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><entry><title type="html">[React Native] iOS 푸쉬 알림을 위해 Firebase를 적용하면서 만난 에러들</title><link href="http://localhost:4000/sixteenth-post/" rel="alternate" type="text/html" title="[React Native] iOS 푸쉬 알림을 위해 Firebase를 적용하면서 만난 에러들" /><published>2023-02-09T00:00:00+07:00</published><updated>2023-02-09T00:00:00+07:00</updated><id>http://localhost:4000/sixteenth-post</id><content type="html" xml:base="http://localhost:4000/sixteenth-post/"><![CDATA[<p>앱을 만들다보면 어느 순간 노티 기능을 적용해야할 때가 온다. 차근차근 개발을 진행하다보니 나 또한 어느새 그러한 페이즈에 도달해 있었다.</p>

<p>검색해보니 React Native로 앱을 만들 때 노티 기능은 보통 Firebase를 연동하는 경우가 많은 듯하다.</p>

<p>설정할 것이 꽤나 많지만 차근차근 진행하면 그렇게 어렵지는 않다. 아무래도 안드로이드보다는 iOS가 좀 더 손이 많이 간다.</p>

<p>깔끔하게 설명해주는 글이 있어서 먼저 소개한다. 아직 설정 전인 분들은 참고하셔도 좋을 것 같다.</p>

<p>📍<a href="https://velog.io/@mayinjanuary/React-Native-Firebase-로-푸쉬-알림-구현하기-안드로이드-세팅">Android에서 Firebase를 이용한 푸쉬 알림 설정</a><br />
📍<a href="https://velog.io/@mayinjanuary/React-Native-Firebase-로-푸쉬-알림-구현하기-2-IOS-앱-세팅하기">iOS에서 Firebase를 이용한 푸쉬 알림 설정</a></p>

<p>안드로이드는 에뮬레이터에서도 푸쉬 알림 테스트가 가능하기에 설정 난이도가 높지 않고 고맙게도 특별한 에러도 없었다.</p>

<p>반면, iOS는 시뮬레이터에서는 테스트가 불가능하여 실제 기기에 빌드해서 테스트를 진행할 수밖에 없다.</p>

<p>문제는 설정은 잘 따라서 한 것 같은데 빌드가 안되는 것이었다…</p>

<p>보통 처음에 만나는 버그는 다음과 같다.</p>

<h2 id="에러-1">에러 1</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The Swift pod `FirebaseCoreInternal` depends upon `GoogleUtilities`, which does not define modules.
To opt into those targets generating module maps (which is necessary to import them from Swift when building as static libraries), 
you may set `use_modular_headers!` globally in your Podfile, or specify `:modular_headers =&gt; true` for particular dependencies.
</code></pre></div></div>

<p>해결 방법은 <strong>podfile에서 config=use_native_modules 아래에 <code class="language-plaintext highlighter-rouge">pod 'GoogleUtilities', :modular_headers =&gt; true</code>를 추가</strong>해주는 것이다.</p>

<p>이후에 pod install을 다시 해주면 된다.</p>

<p>여기서 모든 문제가 해결이 되는 사람은 매우 매우 다행인 것이다. 두 번째로 만나는 에러는 아마 다음일 것이다.</p>

<h2 id="에러-2">에러 2</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Module 'Firebase' not found 혹은 Module 'FirebaseCore' not found
</code></pre></div></div>

<p>구글링을 해보면 여러가지 해결 방법이 나오는데 필자는 1번 해결 방법과 같은 위치에 <strong><code class="language-plaintext highlighter-rouge">pod 'FirebaseCore', :modular_headers =&gt; true</code></strong>(FirebaseCore 말고 상황에 맞게 모듈명을 교체)를 추가해 주는 것으로 해결할 수 있었다. (혹시라도 Xcode에서 @import FirebaseCore를 #import “FirebaseCore/FirebaseCore.h”로 바꿔주어 에러를 해결하려 하면 또 다른 에러를 만날 가능성이 매우 높을 것이므로 추천하지는 않는다.)</p>

<p>하지만 여기까지 진행해도 Xcode는 여전히 에러를 내뿜는 경우가 있다.</p>

<h2 id="에러-3">에러 3</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Redefinition of module ‘Firebase’ 혹은 Redefinition of module 'FirebaseCore'
</code></pre></div></div>

<p>이걸 해결한답시고 podfile에 2번 해결 방법을 지우고 <code class="language-plaintext highlighter-rouge">use_frameworks! :linkage =&gt; :static</code>를 추가할 수 있는데 이 설정은 flipper와 충돌을 일으키기에 잠재적인 에러의 원인이 될 가능성이 농후하다. 실제로 podfile에서 user_flipper()를 주석 처리해야 하는 경우가 많을 것이라고 예상된다.</p>

<p>필자의 경우에는 flipper를 사용하지 않으니 MQTT가 작동하지 않는 버그를 만났다. (<a href="https://stackoverflow.com/questions/72289521/swift-pods-cannot-yet-be-integrated-as-static-libraries-firebasecoreinternal-lib">stackoverflow</a>)</p>

<p>잘 되는 사람은 그대로 진행해도 되지만 개인적으로는 <code class="language-plaintext highlighter-rouge">use_frameworks! :linkage =&gt; :static</code>보다는 not found 모듈을 일일이 <code class="language-plaintext highlighter-rouge">pod [모듈], :modular_headers =&gt; true</code> 해주는 것을 추천한다.</p>

<p>그래서 Redefinition 에러는 어떻게 해결하느냐고?</p>

<p>에러 메시지만 봐도 알겠지만 이유는 모듈을 여러번 정의하였기 때문이다. 이는 해당 모듈과 관련한 패키지가 여러개 존재할 가능성을 시사한다.</p>

<p>잘 생각해보면 Firebase 홈페이지에서 처음으로 앱을 등록할 때 <code class="language-plaintext highlighter-rouge">firebase-ios-sdk</code> 패키지를 Xcode 상에서 등록하라는 가이드를 받는다. 시키는대로 착실하게 진행한 사람은 아마도 위와 같은 에러를 만날 것이다. 
하지만 우리는 2번에서 <code class="language-plaintext highlighter-rouge">FirebaseCore</code> 라이브러리를 수동으로 다운받았기에 사실상 같은 기능을 하는 필요없는 패키지를 다운받은 것이다.</p>

<p>웃기게도 firebase-ios-sdk가 모듈을 찾지 못해서 수동으로 다운받았더니 적반하장으로 왜 다시 정의하냐고 에러를 주는 것이다. 어딘가 꼬여있음이 분명하다.</p>

<p>아무튼! 이러한 사실을 깨달았다면 이제 해결은 간단하다.</p>

<p><strong>Xcode에서 firebase-ios-sdk를 삭제해주면 된다.</strong> (<a href="https://stackoverflow.com/questions/70760326/flutter-on-ios-redefinition-of-module-firebase">stackoverflow</a>)</p>

<p>이걸로 not found 에러와 redefinition 에러의 무한 반복에서 벗어나셨다면 축하드린다.</p>

<p>필자는 이를 위해 꼬박 하루를 써버렸다. 언제나 가장 어려운 건 환경 세팅이라는 것에는 변함이 없다. 누군가는 시간을 절약하길 간절히 바란다.</p>

<p>혹시나 참고를 원하시는 분이 있을까봐 Podfile 내용도 첨부한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">require_relative</span> <span class="err">'</span><span class="o">../</span><span class="n">node_modules</span><span class="o">/</span><span class="n">react</span><span class="o">-</span><span class="kd">native</span><span class="o">/</span><span class="n">scripts</span><span class="o">/</span><span class="n">react_native_pods</span><span class="err">'</span>
<span class="n">require_relative</span> <span class="err">'</span><span class="o">../</span><span class="n">node_modules</span><span class="o">/</span><span class="nd">@react</span><span class="o">-</span><span class="kd">native</span><span class="o">-</span><span class="n">community</span><span class="o">/</span><span class="n">cli</span><span class="o">-</span><span class="n">platform</span><span class="o">-</span><span class="n">ios</span><span class="o">/</span><span class="n">native_modules</span><span class="err">'</span>

<span class="n">platform</span> <span class="o">:</span><span class="n">ios</span><span class="o">,</span> <span class="err">'</span><span class="mf">12.4</span><span class="err">'</span>
<span class="n">install</span><span class="o">!</span> <span class="err">'</span><span class="n">cocoapods</span><span class="err">'</span><span class="o">,</span> <span class="o">:</span><span class="n">deterministic_uuids</span> <span class="o">=&gt;</span> <span class="kc">false</span>

<span class="n">target</span> <span class="err">'</span><span class="n">example_app</span><span class="err">'</span> <span class="k">do</span>
  <span class="n">config</span> <span class="o">=</span> <span class="n">use_native_modules</span><span class="o">!</span>

  <span class="err">#</span> <span class="nc">Flags</span> <span class="n">change</span> <span class="n">depending</span> <span class="n">on</span> <span class="n">the</span> <span class="n">env</span> <span class="n">values</span><span class="o">.</span>
  <span class="n">flags</span> <span class="o">=</span> <span class="n">get_default_flags</span><span class="o">()</span>
  
  <span class="n">pod</span> <span class="err">'</span><span class="nc">FirebaseCore</span><span class="err">'</span><span class="o">,</span> <span class="o">:</span><span class="n">modular_headers</span> <span class="o">=&gt;</span> <span class="kc">true</span> <span class="err">#</span> <span class="o">&lt;-</span> <span class="n">여기</span> <span class="n">추가</span>
  <span class="n">pod</span> <span class="err">'</span><span class="nc">GoogleUtilities</span><span class="err">'</span><span class="o">,</span> <span class="o">:</span><span class="n">modular_headers</span> <span class="o">=&gt;</span> <span class="kc">true</span> <span class="err">#</span> <span class="o">&lt;-</span> <span class="n">여기</span> <span class="n">추가</span>

  <span class="n">use_react_native</span><span class="o">!(</span>
    <span class="o">:</span><span class="n">path</span> <span class="o">=&gt;</span> <span class="n">config</span><span class="o">[:</span><span class="n">reactNativePath</span><span class="o">],</span>
    <span class="err">#</span> <span class="n">to</span> <span class="n">enable</span> <span class="n">hermes</span> <span class="n">on</span> <span class="n">iOS</span><span class="o">,</span> <span class="n">change</span> <span class="err">`</span><span class="kc">false</span><span class="err">`</span> <span class="n">to</span> <span class="err">`</span><span class="kc">true</span><span class="err">`</span> <span class="n">and</span> <span class="n">then</span> <span class="n">install</span> <span class="n">pods</span>
    <span class="o">:</span><span class="n">hermes_enabled</span> <span class="o">=&gt;</span> <span class="kc">false</span><span class="o">,</span>
    <span class="o">:</span><span class="n">fabric_enabled</span> <span class="o">=&gt;</span> <span class="n">flags</span><span class="o">[:</span><span class="n">fabric_enabled</span><span class="o">],</span>
    <span class="o">:</span><span class="n">flipper_configuration</span> <span class="o">=&gt;</span> <span class="nc">FlipperConfiguration</span><span class="o">.</span><span class="na">enabled</span><span class="o">,</span>
    <span class="err">#</span> <span class="nc">An</span> <span class="n">absolute</span> <span class="n">path</span> <span class="n">to</span> <span class="n">your</span> <span class="n">application</span> <span class="n">root</span><span class="o">.</span>
    <span class="o">:</span><span class="n">app_path</span> <span class="o">=&gt;</span> <span class="s">"#{Pod::Config.instance.installation_root}/.."</span>
  <span class="o">)</span>

  <span class="n">target</span> <span class="err">'</span><span class="n">example_appTests</span><span class="err">'</span> <span class="k">do</span>
    <span class="n">inherit</span><span class="o">!</span> <span class="o">:</span><span class="n">complete</span>
    <span class="err">#</span> <span class="nc">Pods</span> <span class="k">for</span> <span class="n">testing</span>
  <span class="n">end</span>

  <span class="n">post_install</span> <span class="k">do</span> <span class="o">|</span><span class="n">installer</span><span class="o">|</span>
    <span class="n">react_native_post_install</span><span class="o">(</span><span class="n">installer</span><span class="o">)</span>
    <span class="n">__apply_Xcode_12_5_M1_post_install_workaround</span><span class="o">(</span><span class="n">installer</span><span class="o">)</span>
  <span class="n">end</span>
<span class="n">end</span>
</code></pre></div></div>

<p>스택오버플로우를 보다보면 <code class="language-plaintext highlighter-rouge">$RNFirebaseAsStaticFramework = true;</code>를 추가하라는 글도 많은데 정확히 어떠한 역할을 해주는 지는 모르겠으나 필자의 경우에는 굳이 추가해주지 않아도 문제는 없었다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, Firebase" /><summary type="html"><![CDATA[앱을 만들다보면 어느 순간 노티 기능을 적용해야할 때가 온다. 차근차근 개발을 진행하다보니 나 또한 어느새 그러한 페이즈에 도달해 있었다.]]></summary></entry><entry><title type="html">[React Native] BottomTabNavigator unmountOnBlur가 SafeAreaView에 미치는 영향</title><link href="http://localhost:4000/fifteenth-post/" rel="alternate" type="text/html" title="[React Native] BottomTabNavigator unmountOnBlur가 SafeAreaView에 미치는 영향" /><published>2022-11-21T00:00:00+07:00</published><updated>2022-11-21T00:00:00+07:00</updated><id>http://localhost:4000/fifteenth-post</id><content type="html" xml:base="http://localhost:4000/fifteenth-post/"><![CDATA[<p>React Native에서 Bottom Tab Navigator를 사용할 때 특정 탭을 누를 때마다 화면이 리렌더링 되도록 하고 싶을 때가 있다.</p>

<p>그럴 때 사용하는 것이 <code class="language-plaintext highlighter-rouge">unmountOnBlur: true</code> 이다. 사용법은 아래 코드와 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="err">{</span><span class="nn">createBottomTabNavigator</span><span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="nd">@react</span><span class="o">-</span><span class="n">navigation</span><span class="o">/</span><span class="n">bottom</span><span class="o">-</span><span class="n">tabs</span><span class="err">'</span><span class="o">;</span>

<span class="kd">const</span> <span class="nc">BottomTab</span> <span class="o">=</span> <span class="n">createBottomTabNavigator</span><span class="o">();</span>
<span class="kd">const</span> <span class="nc">ExampleScreen</span> <span class="o">=</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">BottomTab</span><span class="o">.</span><span class="na">Navigator</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nc">BottomTab</span><span class="o">.</span><span class="na">Screen</span>
        <span class="n">name</span><span class="o">=</span><span class="s">"NavigatorMain"</span>
        <span class="n">component</span><span class="o">={</span><span class="nc">NavigatorMain</span><span class="o">}</span>
        <span class="n">options</span><span class="o">={</span> <span class="o">{</span>
          <span class="nl">tabBarLabel:</span> <span class="err">'</span><span class="nc">Main</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">unmountOnBlur:</span> <span class="kc">true</span><span class="o">,</span> <span class="c1">// 이 부분</span>
        <span class="o">}</span> <span class="o">}</span>
      <span class="o">/&gt;</span>
    <span class="o">&lt;/</span><span class="nc">BottomTab</span><span class="o">.</span><span class="na">Navigator</span><span class="o">&gt;</span>
  <span class="o">)}</span>
</code></pre></div></div>

<p>문제는 해당 옵션을 사용하게 되면 리렌더링은 문제가 없지만 알 수 없는 깜빡임이 발생한다는 것이다.</p>

<p>화면 렌더링 순서에 의해 발생하는 깜빡임으로, 사실 예민한 사람이 아니고서야 잘 눈치채지 못 할 지도 모른다.</p>

<p>원인은 SafeAreaView의 적용 타이밍이 생각보다 빠르지 않다는 데에 있다.</p>

<p>unmountOnBlur를 통해서 화면을 리렌더링할 시에는 <SafeAreaView> 태그 안의 요소가 먼저 그려진 뒤 status bar 만큼의 크기가 뒤늦게 margin값으로 내려온다.</SafeAreaView></p>

<p>해결 방법은 단순히 SafeAreaView를 사용하지 않는 데에 있다.</p>

<p>대신 react-native-status-bar-height라는 status bar의 높이를 알려주는 라이브러리가 있으니 그것을 통해 직접 컴포넌트에 스타일을 지정해 주면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="err">{</span><span class="nn">getStatusBarHeight</span><span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="n">react</span><span class="o">-</span><span class="kd">native</span><span class="o">-</span><span class="n">status</span><span class="o">-</span><span class="n">bar</span><span class="o">-</span><span class="n">height</span><span class="err">'</span><span class="o">;</span>
<span class="kd">const</span> <span class="nc">ExampleScreen</span> <span class="o">=</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
<span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span>
      <span class="n">style</span><span class="o">={</span> 
        <span class="o">{</span>
        <span class="nl">height:</span> <span class="nc">Dimensions</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="err">'</span><span class="n">window</span><span class="err">'</span><span class="o">).</span><span class="na">height</span><span class="o">,</span>
        <span class="nl">top:</span> <span class="n">getStatusBarHeight</span><span class="o">()</span> <span class="c1">// 이 부분</span>
        <span class="o">}</span>
      <span class="o">}&gt;</span>
      <span class="o">...</span> 
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
<span class="o">)}</span>
</code></pre></div></div>

<h3 id="참고">참고</h3>
<p><a href="https://github.com/ovr/react-native-status-bar-height">react-native-status-bar-height</a></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[React Native에서 Bottom Tab Navigator를 사용할 때 특정 탭을 누를 때마다 화면이 리렌더링 되도록 하고 싶을 때가 있다.]]></summary></entry><entry><title type="html">[React Native] Blank screen issue on iOS</title><link href="http://localhost:4000/fourteenth-post/" rel="alternate" type="text/html" title="[React Native] Blank screen issue on iOS" /><published>2022-11-13T00:00:00+07:00</published><updated>2022-11-13T00:00:00+07:00</updated><id>http://localhost:4000/fourteenth-post</id><content type="html" xml:base="http://localhost:4000/fourteenth-post/"><![CDATA[<p align="center"><img src="https://github.com/froggydisk/froggydisk.github.io/blob/master/assets/img/black_screen.png?raw=true" width="250" height="500" style="border: 1px solid black" /></p>

<p>어느 순간부터 빌드는 되는데 화면에 아무것도 나타나지 않는 증상이 나타났다. 빌드는 성공하였기 때문에 라이브러리를 설치하면서 어딘가 설정이 꼬인건가 싶었다.</p>

<p>node_modules를 지웠다 설치하고를 몇 번이나 반복하였지만 해결되지 않았다. 당연히 캐시 삭제 정도로는 어림도 없었다.</p>

<p>에러 코드조차 나오지 않는 버그였기에 원인 분석부터가 막막했다. 새로운 프로젝트를 새로 하나 팔까 하다가 우선 깃 히스토리를 거슬러 올라가 보기로 하였다.</p>

<p>다행히 메인 브랜치에 push 해놓은 버전은 빌드가 잘 되었다.</p>

<p>이제부터는 다른 부분을 찾아내는 노가다이다. 라이브러리를 새로 설치하고 코드를 하나하나 비교하면서 바꾸어 주었는데 생각지도 못한 곳에서 버그를 재현할 수 있었다.</p>

<p>일단, 인터넷에서 검색하면 React Native는 <code class="language-plaintext highlighter-rouge">자바스크립트 프레임워크</code>라고 나온다. 그러므로 당연히 자바스크립트 코드를 사용할 수 있다.</p>

<p>하지만 디버깅까지 제대로 해준다고는 하지 않았다…</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">example</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">array</span> <span class="o">=</span> <span class="p">[];</span>
  <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">100</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">array</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">array</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></div></div>
<p>문제가 된 부분은 위와 같다. for문을 사용할 때 <code class="language-plaintext highlighter-rouge">i += 2</code>에서 <code class="language-plaintext highlighter-rouge">=</code>를 빼먹는 실수가 있었는데 Metro에서는 아무런 버그를 띄워주지 않는다.</p>

<p>갑자기 멈춰버린 앱을 리로드하면 그때부터 버그 지옥이 시작되는 것이다.</p>

<p>설마 JS 코드 오타를 잡아주지 않는다고는 생각하지 않았기에 더욱더 헤맸던 것 같다.</p>

<h3 id="결론">결론</h3>
<p>● <strong>문제</strong>: 앱을 빌드했을 때 Bundle 100% 혹은 Loading from Metro… 문구에서 화면이 멈추고 하얀색 공백 화면만 떠있는 현상.
<br />
● <strong>해결</strong>: 자바스크립트 문법이 틀린 것이 없나 살펴보고 수정한다. (혹은 최근에 설치한 라이브러리가 문제일 수 있다)</p>

<p>● <strong>Issue</strong>: The simulator is stuck with the message ‘Bundle 100%’ or ‘Loading from Metro…’ on the white screen.
<br />
● <strong>How to solve</strong>: Check the grammar of your JavaScript code. Metro doesn’t let you know the typo of JS code, but just stops the App.</p>

<h3 id="참고">참고</h3>
<p><a href="https://github.com/facebook/react-native/issues/26605">Blank Screen Issue on iOS #26605</a></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, JavaScript" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[React Native] 서버에서 이미지를 fetch 해올 때 화면에 제대로 나타나지 않는 현상</title><link href="http://localhost:4000/thirteenth-post/" rel="alternate" type="text/html" title="[React Native] 서버에서 이미지를 fetch 해올 때 화면에 제대로 나타나지 않는 현상" /><published>2022-11-09T00:00:00+07:00</published><updated>2022-11-09T00:00:00+07:00</updated><id>http://localhost:4000/thirteenth-post</id><content type="html" xml:base="http://localhost:4000/thirteenth-post/"><![CDATA[<p>글을 쓰면서도 조금은 부끄럽지만 가끔은 정말 간단한 걸로 몇 시간을 헤매고는 한다. 
<br />
React Native에서 Multer를 이용하여 서버에서 이미지를 불러오는데 다운 받아온 이미지가 화면에 표시되지 않는 현상이 있었다. 
<br />
공식 문서를 그대로 따라서 fetch 함수를 사용하였고 uri도 로그에 제대로 찍혀 있는데도 계속 문제가 남아있어 머리를 꽁꽁 싸맸다.
<br />
나중에 보니 해결 방법은 매우 간단했다. 
<br />
잊고 있었던 것이다. 샘플 이미지는 전부 local의 asset 폴더에 저장하여 사용하고 있었기에 그동안 신경쓰지 않고 있었지만 사실 <code class="language-plaintext highlighter-rouge">이미지는 width와 height를 지정해주는 것이 좋다</code>는 것을.
<br />
그렇다. fetch 문제인 줄 알고 axios로 바꿔도 보고 하였지만 결국 설정 문제였던 것이다. 
resizeMode 옵션을 너무 신뢰하고 있었는지 이를 눈치채는데 오랜 시간이 걸렸다. 
한 번도 아니고 두 번이나 똑같은 문제로 헤맨 전적이 있다. 
<br />
누군가는 시간을 아끼기 바란다.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">Image</span><span class="w">
    </span><span class="n">source</span><span class="o">=</span><span class="p">{</span><span class="w"> </span><span class="p">{</span><span class="n">uri</span><span class="o">:</span><span class="w"> </span><span class="n">URI</span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
    </span><span class="n">style</span><span class="o">=</span><span class="p">{</span><span class="w"> </span><span class="p">{</span><span class="n">height</span><span class="o">:</span><span class="w"> </span><span class="m">100</span><span class="p">,</span><span class="w"> </span><span class="n">width</span><span class="o">:</span><span class="w"> </span><span class="m">100</span><span class="p">}</span><span class="w"> </span><span class="p">}</span><span class="w">
</span><span class="o">/&gt;</span><span class="w">
</span></code></pre></div></div>

<h3 id="참고">참고</h3>
<p><a href="https://reactnative.dev/docs/image">React Native Doc. - Image</a></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, Multer" /><summary type="html"><![CDATA[글을 쓰면서도 조금은 부끄럽지만 가끔은 정말 간단한 걸로 몇 시간을 헤매고는 한다. React Native에서 Multer를 이용하여 서버에서 이미지를 불러오는데 다운 받아온 이미지가 화면에 표시되지 않는 현상이 있었다. 공식 문서를 그대로 따라서 fetch 함수를 사용하였고 uri도 로그에 제대로 찍혀 있는데도 계속 문제가 남아있어 머리를 꽁꽁 싸맸다. 나중에 보니 해결 방법은 매우 간단했다. 잊고 있었던 것이다. 샘플 이미지는 전부 local의 asset 폴더에 저장하여 사용하고 있었기에 그동안 신경쓰지 않고 있었지만 사실 이미지는 width와 height를 지정해주는 것이 좋다는 것을. 그렇다. fetch 문제인 줄 알고 axios로 바꿔도 보고 하였지만 결국 설정 문제였던 것이다. resizeMode 옵션을 너무 신뢰하고 있었는지 이를 눈치채는데 오랜 시간이 걸렸다. 한 번도 아니고 두 번이나 똑같은 문제로 헤맨 전적이 있다. 누군가는 시간을 아끼기 바란다.]]></summary></entry><entry><title type="html">[Multer] Error: ENOENT: no such file or directory</title><link href="http://localhost:4000/twelveth-post/" rel="alternate" type="text/html" title="[Multer] Error: ENOENT: no such file or directory" /><published>2022-11-08T00:00:00+07:00</published><updated>2022-11-08T00:00:00+07:00</updated><id>http://localhost:4000/twelveth-post</id><content type="html" xml:base="http://localhost:4000/twelveth-post/"><![CDATA[<p>● 서버 코드</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">multer</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">multer</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">fs</span><span class="dl">"</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">storage</span> <span class="o">=</span> <span class="nx">multer</span><span class="p">.</span><span class="nx">diskStorage</span><span class="p">({</span>
  <span class="na">destination</span><span class="p">:</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">userId</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)).</span><span class="nx">userId</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">dir</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">./upload/</span><span class="dl">"</span> <span class="o">+</span> <span class="nx">userId</span><span class="p">;</span> <span class="c1">// See here!</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">fs</span><span class="p">.</span><span class="nx">existsSync</span><span class="p">(</span><span class="nx">dir</span><span class="p">))</span> <span class="p">{</span> <span class="c1">// 해당 유저의 디렉토리가 있는지 확인</span>
        <span class="nx">fs</span><span class="p">.</span><span class="nx">mkdirSync</span><span class="p">(</span><span class="nx">dir</span><span class="p">,</span> <span class="p">{</span> <span class="na">recursive</span><span class="p">:</span> <span class="kc">true</span> <span class="p">});</span> <span class="c1">// 없다면 디렉토리를 생성</span>
      <span class="p">}</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">dir</span><span class="p">);</span>
  <span class="p">},</span>
  <span class="na">filename</span><span class="p">:</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">file</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="s2">`</span><span class="p">${</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">()}</span><span class="s2">_</span><span class="p">${</span><span class="nx">file</span><span class="p">.</span><span class="nx">originalname</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span> 
  <span class="p">},</span>
<span class="p">});</span>
<span class="kd">var</span> <span class="nx">save</span> <span class="o">=</span> <span class="nx">multer</span><span class="p">({</span> <span class="na">storage</span><span class="p">:</span> <span class="nx">storage</span> <span class="p">}).</span><span class="nx">array</span><span class="p">(</span><span class="dl">"</span><span class="s2">profileImage</span><span class="dl">"</span><span class="p">);</span>
<span class="c1">// 한 장만 보낼 때는 .single("profileImage");를 써도 된다.</span>
</code></pre></div></div>
<p>Multer를 사용하여 이미지를 업로드할 때 유저별로 폴더를 만들어서 따로 저장하려고 하는데 자꾸 에러가 났다. 
<br />
디렉토리를 생성하지 못하는 걸로 보아 함수를 fs쪽 함수를 잘못 사용하고 있나 싶어서 열심히 찾아보았으나 아무런 진전이 없었다. 
<br />
오랜 시간 끝에 아무생각 없이 /upload/로 되어 있던 절대경로에 마침표를 붙여 상대경로로 만들어주었더니 정상적으로 작동하였다. 
<br />
서버 설정에 따라 마침표가 필요할 때가 있고 아닐 때가 있으므로 둘 다 해보고 되는 것으로 하면 되겠다. 
<br />
여기서 중요한 것은 항상 경로 체크를 선택지에 넣어두는 것이 무의미한 시간 낭비를 피할 수 있다는 것이다. 
<br />
참고를 위해 클라이언트쪽 코드도 남겨둔다.</p>

<p>● 클라이언트 코드</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">createFormData</span> <span class="o">=</span> <span class="p">(</span><span class="nx">image</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">FormData</span><span class="p">();</span>
    <span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">body</span><span class="p">).</span><span class="nx">forEach</span><span class="p">(</span><span class="nx">key</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="nx">data</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">body</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
    <span class="p">});</span>
    <span class="nx">data</span><span class="p">.</span><span class="nx">append</span><span class="p">(</span><span class="dl">'</span><span class="s1">profileImage</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="c1">// 필드명으로서, 서버에서 정의된 것과 동일해야한다.</span>
      <span class="na">name</span><span class="p">:</span> <span class="nx">image</span><span class="p">.</span><span class="nx">name</span>
      <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">multipart/form-data</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">uri</span><span class="p">:</span> <span class="nx">image</span><span class="p">.</span><span class="nx">uri</span><span class="p">,</span>
    <span class="p">});</span>
    <span class="k">return</span> <span class="nx">data</span><span class="p">;</span>
  <span class="p">};</span>

<span class="kd">const</span> <span class="nx">photoUpload</span> <span class="o">=</span> <span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="k">try</span> <span class="p">{</span>
      <span class="nx">fetch</span><span class="p">(</span><span class="dl">'</span><span class="s1">http://localhost:8080/user/upload</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">method</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">headers</span><span class="p">:</span> <span class="p">{</span>
          <span class="dl">'</span><span class="s1">Content-Type</span><span class="dl">'</span><span class="p">:</span> <span class="dl">'</span><span class="s1">multipart/form-data</span><span class="dl">'</span><span class="p">,</span>
        <span class="p">},</span>
        <span class="na">body</span><span class="p">:</span> <span class="nx">createFormData</span><span class="p">(</span><span class="nx">image</span><span class="p">,</span> <span class="p">{</span>
          <span class="na">userId</span><span class="p">:</span> <span class="dl">"</span><span class="s2">tester</span><span class="dl">"</span><span class="p">,</span>
        <span class="p">}),</span>
      <span class="p">})</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="nx">response</span><span class="p">.</span><span class="nx">text</span><span class="p">())</span>
        <span class="p">.</span><span class="nx">then</span><span class="p">(</span><span class="nx">response</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">upload success</span><span class="dl">'</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
        <span class="p">})</span>
        <span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">upload error</span><span class="dl">'</span><span class="p">,</span> <span class="nx">error</span><span class="p">);</span>
        <span class="p">});</span>
    <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
      <span class="nx">error</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
      <span class="p">};</span>
    <span class="p">}</span>
  <span class="p">};</span>
</code></pre></div></div>

<h3 id="참고">참고</h3>
<p><a href="https://stackoverflow.com/questions/68254686/error-enoent-no-such-file-or-directory-mkdir-when-trying-to-create-directory">Error: ENOENT: no such file or directory, mkdir when trying to create directory</a></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, NodeJS, Multer" /><summary type="html"><![CDATA[● 서버 코드 ```javascript const multer = require(“multer”); const fs = require(“fs”);]]></summary></entry><entry><title type="html">[React Native] Android Gradle plugin 의존성 에러</title><link href="http://localhost:4000/eleventh-post/" rel="alternate" type="text/html" title="[React Native] Android Gradle plugin 의존성 에러" /><published>2022-11-07T00:00:00+07:00</published><updated>2022-11-07T00:00:00+07:00</updated><id>http://localhost:4000/eleventh-post</id><content type="html" xml:base="http://localhost:4000/eleventh-post/"><![CDATA[<p>React Native로 개발을 하고는 있지만 주로 iOS 시뮬레이터만 보고 하다보니 오랜만에 안드로이드 빌드를 하게 되었다. 
<br />
안드로이드 스튜디오에 들어가서 아무 생각 없이 Gradle upgrade를 했더니 빌드가 안되기 시작했다. 
<br />
react-native run-android를 하였을 때 what went wrong에 뜨는 에러는 다음과 같다.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">The</span><span class="w"> </span><span class="n">Android</span><span class="w"> </span><span class="n">Gradle</span><span class="w"> </span><span class="n">plugin</span><span class="w"> </span><span class="n">supports</span><span class="w"> </span><span class="n">only</span><span class="w"> </span><span class="n">kotlin</span><span class="o">-</span><span class="n">android</span><span class="o">-</span><span class="n">extensions</span><span class="w"> 
</span><span class="n">Gradle</span><span class="w"> </span><span class="n">plugin</span><span class="w"> </span><span class="n">version</span><span class="w"> </span><span class="m">1.6.20</span><span class="w"> </span><span class="n">and</span><span class="w"> </span><span class="n">higher.</span><span class="w"> 
</span><span class="n">The</span><span class="w"> </span><span class="n">following</span><span class="w"> </span><span class="n">dependencies</span><span class="w"> </span><span class="n">do</span><span class="w"> </span><span class="n">not</span><span class="w"> </span><span class="n">satisfy</span><span class="w"> </span><span class="n">the</span><span class="w"> </span><span class="n">required</span><span class="w"> </span><span class="n">version</span><span class="o">:</span><span class="w"> 
</span><span class="n">project</span><span class="w"> </span><span class="s1">':react-native-safe-area-context'</span><span class="w"> </span><span class="o">-&gt;</span><span class="w"> </span><span class="n">org.jetbrains.kotlin</span><span class="o">:</span><span class="w">
</span><span class="n">kotlin</span><span class="o">-</span><span class="n">gradle</span><span class="o">-</span><span class="n">plugin</span><span class="o">:</span><span class="m">1.6.10</span><span class="w">
</span></code></pre></div></div>

<p>아마 Gradle plugin의 버전이 높아서 react-native-safe-area-context의 의존성과 맞지 않는다는 이야기 같다. 
<br />
한참을 고민하다가 Gradle 업데이트를 한 것이 생각나서 급하게 다운그레이드를 해주었다. 
<br />
다운그레이드는 별게 없다. 프로젝트의 android 폴더 안에 있는 build.gradle 파일을 수정해 주기만 하면 된다.</p>

<div class="language-r highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">classpath</span><span class="p">(</span><span class="s1">'com.android.tools.build:gradle:7.2.2'</span><span class="p">)</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>gradle:x.x.x 부분에서 숫자만 이전 버전으로 변경해준다.</p>

<h3 id="참고">참고</h3>
<p><a href="https://icat2048.tistory.com/462">[Gradle] Android 빌드를 위한 Gradle Version 관리</a>
<br />
<a href="https://daewonyoon.tistory.com/293">[Android|Kotlin] Gradle Sync Issue: Android Gradle plugin supports only Kotlin Gradle plugin version … and higher</a></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, Android" /><summary type="html"><![CDATA[React Native로 개발을 하고는 있지만 주로 iOS 시뮬레이터만 보고 하다보니 오랜만에 안드로이드 빌드를 하게 되었다. 안드로이드 스튜디오에 들어가서 아무 생각 없이 Gradle upgrade를 했더니 빌드가 안되기 시작했다. react-native run-android를 하였을 때 what went wrong에 뜨는 에러는 다음과 같다.]]></summary></entry><entry><title type="html">[React Native] Draggable Button과 ScrollView</title><link href="http://localhost:4000/tenth-post/" rel="alternate" type="text/html" title="[React Native] Draggable Button과 ScrollView" /><published>2022-10-27T00:00:00+07:00</published><updated>2022-10-27T00:00:00+07:00</updated><id>http://localhost:4000/tenth-post</id><content type="html" xml:base="http://localhost:4000/tenth-post/"><![CDATA[<p>리액트 네이티브를 이용하여 앱을 만들 때 이리저리 끌고 다닐 수 있는 버튼을 만들고 싶을 때가 있다. 
<br />
만들어놓고 화면에서 요리조리 움직이다보면 나름 재미가 있다. 
<br />
바퀴를 다시 발명하지 말라고 누군가 그랬던가. 구현을 위해 필자가 사용한 것은 <code class="language-plaintext highlighter-rouge">react-native-draggable</code>이라는 이미 잘 만들어진 라이브러리이다.</p>

<h3 id="설치">설치</h3>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">react</span><span class="o">-</span><span class="nx">native</span><span class="o">-</span><span class="nx">draggable</span>

<span class="nx">cd</span> <span class="nx">ios</span>
<span class="nx">arch</span> <span class="o">-</span><span class="nx">x86_64</span> <span class="nx">pod</span> <span class="nx">install</span> <span class="c1">// m1이 아닌 경우에는 그냥 pod install</span>
</code></pre></div></div>

<h3 id="사용">사용</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">Draggable</span> <span class="n">from</span> <span class="err">'</span><span class="n">react</span><span class="o">-</span><span class="kd">native</span><span class="o">-</span><span class="n">draggable</span><span class="err">'</span><span class="o">;</span>

<span class="o">&lt;</span><span class="nc">Draggable</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="nc">View</span><span class="o">&gt;</span> <span class="o">[</span><span class="n">내용</span><span class="o">]</span> <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="nc">Draggable</span><span class="o">&gt;</span>
</code></pre></div></div>
<p><br />
이처럼 설치하고 사용하는 것은 매우 간단하다. 
<br />
하지만 늘 그렇듯 항상 단독으로 사용할 때는 괜찮은데 여러 기능들이 맞물리면서 문제가 발생한다. 
<br />
오늘 얘기할 내용은 <code class="language-plaintext highlighter-rouge">Draggable Button</code>을 사용할 때 주의해야 할 점이다.</p>

<h3 id="주의">주의</h3>
<p>리액트 네이티브의 특성상 가장 아래에 위치한 컴포넌트가 화면 z축 최상단에 위치하게 된다. 즉 <code class="language-plaintext highlighter-rouge">Draggable Button</code>을 코드 상에서 가장 아래쪽에 배치해야한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">return</span><span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span><span class="o">&gt;</span>
        <span class="o">[</span><span class="n">화면</span> <span class="n">내용</span><span class="o">]...</span>
        <span class="o">&lt;</span><span class="nc">Draggable</span><span class="o">&gt;&lt;/</span><span class="nc">Draggable</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
<span class="o">)</span>
</code></pre></div></div>
<p>이렇게만해도 다행히 iOS에서는 (웬일로) 잘 동작하지만 여러 제스쳐가 동시에 입력되어야 하는 스크린에서는 기능들이 원하는 대로 작동하지 않을 때가 많다. 
<br />
특히 ScrollView 안에서는 스크롤 동작과 타이밍이 겹치면서 버튼을 원하는대로 움직이기 전에 화면 스크롤이 되어버린다. 따라서 버튼을 눌렀을 때 스크롤 기능을 멈춰주고
버튼에서 손을 떼었을 때 다시 스크롤 기능을 살려줄 필요가 있다. 
<br />
처음 개발을 하였을 때는 EventListener가 대체 어디에 쓰이는 걸까 긴가민가 했는데 이제 보면 절대 없어서는 안 될 기능이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="o">[</span><span class="n">scrollable</span><span class="o">,</span> <span class="n">setScrollable</span><span class="o">]</span> <span class="o">=</span> <span class="nc">React</span><span class="o">.</span><span class="na">useState</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>

<span class="k">return</span><span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nc">ScrollView</span> <span class="n">scrollEnabled</span><span class="o">={</span><span class="n">scrollable</span><span class="o">}&gt;</span>
	    <span class="o">[</span><span class="n">화면</span> <span class="n">내용</span><span class="o">]...</span>
            <span class="o">&lt;</span><span class="nc">Draggable</span>
            <span class="c1">// 버튼을 눌렀을 때의 이벤트</span>
            <span class="n">onPressIn</span><span class="o">={()</span> <span class="o">=&gt;</span> <span class="n">setScrollable</span><span class="o">(</span><span class="kc">false</span><span class="o">)}</span>
            <span class="c1">// 버튼에서 손을 떼었을 때의 이벤트</span>
            <span class="n">onPressOut</span><span class="o">={()</span> <span class="o">=&gt;</span> <span class="n">setScrollable</span><span class="o">(</span><span class="kc">true</span><span class="o">)}</span>
            <span class="o">&gt;&lt;/</span><span class="nc">Draggable</span><span class="o">&gt;</span>
        <span class="o">&lt;/</span><span class="nc">ScrollView</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
<span class="o">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Draggable Button</code>말고도 제스쳐가 필요한 컴포넌트가 하나의 스크린 상에 복수개 존재할 때는 이렇게 구현해 주면 충돌을 막을 수 있다!</p>

<h3 id="참고">참고</h3>
<p><a href="https://github.com/tongyy/react-native-draggable">Draggable Button GitHub</a></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[리액트 네이티브를 이용하여 앱을 만들 때 이리저리 끌고 다닐 수 있는 버튼을 만들고 싶을 때가 있다. 만들어놓고 화면에서 요리조리 움직이다보면 나름 재미가 있다. 바퀴를 다시 발명하지 말라고 누군가 그랬던가. 구현을 위해 필자가 사용한 것은 react-native-draggable이라는 이미 잘 만들어진 라이브러리이다.]]></summary></entry><entry><title type="html">[React Native] Bottom Tab Navigator 없애기</title><link href="http://localhost:4000/nineth-post/" rel="alternate" type="text/html" title="[React Native] Bottom Tab Navigator 없애기" /><published>2022-10-26T00:00:00+07:00</published><updated>2022-10-26T00:00:00+07:00</updated><id>http://localhost:4000/nineth-post</id><content type="html" xml:base="http://localhost:4000/nineth-post/"><![CDATA[<p>React Native를 이용하여 앱을 만들게 되면 <a href="https://reactnavigation.org/docs/bottom-tab-navigator/">@react-navigation/bottom-tab</a> 라이브러리의 네비게이터를 자주 이용하게 된다. 
<br /> 
네비게이터를 하나만 사용할 때는 문제가 없는데 여러개의 네비게이터들이 차곡차곡 쌓이면서부터 문제가 발생하기 시작한다.
<br /> 
특정 스크린으로 이동할 때에는 하단 메뉴바를 안보이게 해야 할 때가 많은데 주로 아래와 같이 해결할 것이다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">import</span> <span class="p">{</span><span class="nx">getFocusedRouteNameFromRoute</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@react-navigation/native</span><span class="dl">'</span><span class="p">;</span>
    <span class="k">import</span> <span class="p">{</span><span class="nx">createNativeStackNavigator</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@react-navigation/native-stack</span><span class="dl">'</span><span class="p">;</span>

    <span class="kd">const</span> <span class="nx">Stack</span> <span class="o">=</span> <span class="nx">createNativeStackNavigator</span><span class="p">();</span>
    
    <span class="kd">const</span> <span class="nx">NavigatorExample</span> <span class="o">=</span> <span class="p">({</span><span class="nx">navigation</span><span class="p">,</span> <span class="nx">route</span><span class="p">})</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">React</span><span class="p">.</span><span class="nx">useLayoutEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">screens</span> <span class="o">=</span> <span class="p">{</span><span class="na">NavigatorOne</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="na">NavigatorTwo</span><span class="p">:</span> <span class="mi">2</span><span class="p">};</span> <span class="c1">// 하단 메뉴탭을 숨길 곳</span>
        <span class="kd">const</span> <span class="nx">routeName</span> <span class="o">=</span> <span class="nx">getFocusedRouteNameFromRoute</span><span class="p">(</span><span class="nx">route</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">routeName</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">routeName</span> <span class="k">in</span> <span class="nx">screens</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">navigation</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">({</span><span class="na">tabBarStyle</span><span class="p">:</span> <span class="p">{</span><span class="na">display</span><span class="p">:</span> <span class="dl">'</span><span class="s1">none</span><span class="dl">'</span><span class="p">}});</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nx">navigation</span><span class="p">.</span><span class="nx">setOptions</span><span class="p">({</span><span class="na">tabBarStyle</span><span class="p">:</span> <span class="p">{</span><span class="na">display</span><span class="p">:</span> <span class="dl">'</span><span class="s1">flex</span><span class="dl">'</span><span class="p">}});</span>
        <span class="p">}</span>
        <span class="p">},</span> <span class="p">[</span><span class="nx">navigation</span><span class="p">,</span> <span class="nx">route</span><span class="p">]);</span>
    <span class="k">return</span><span class="p">(</span>
        <span class="p">...</span>
    <span class="p">)</span>
    <span class="p">}</span>
</code></pre></div></div>
<p>이렇게 하면 원하는 스크린에서 하단 탭이 사라지기는 하나 그 흔적을 남기게 된다. 
<br /> 
필자가 경험한 바로는 보통 세 가지 버그가 일어나기 쉽다.</p>
<ol>
  <li>화면 이동 뒤 하단 메뉴가 있던 자리만 현재 스크린의 배경색과 색이 다르다.</li>
  <li>화면 이동 뒤 하단 메뉴가 있던 자리에 버튼을 위치시키면 제대로 눌리지 않는다.</li>
  <li>화면을 이동하는 찰나에 이전 화면의 하단 탭이 사라지면서 알 수 없는 잔상(flicker)을 남긴다.</li>
</ol>

<p>위와 같은 문제를 해결하기 위해서는 가장 윗 부분의 태그, 즉 보통 <code class="language-plaintext highlighter-rouge">&lt;SafeAreaView&gt;</code>일 텐데 이곳을 잘 공략해야한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nc">SafeAreaView</span> <span class="n">style</span><span class="o">={</span> <span class="o">{</span><span class="nl">height:</span><span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">}</span> <span class="o">}&gt;</span>
</code></pre></div></div>
<p>보통 위와 같이 설정해주는 것이 일반적이다. 하지만 저렇게 지정할 시에는 해당 스크린에서 일어나는 모든 일은 하단 탭 바로 윗단까지만 적용되게 된다.
고로 하단 탭이 사라진 자리에 대한 영향력이 없다는 의미이다. 
<br />
해결을 위해 추천하는 방법은 아래와 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nc">NavigatorExample</span> <span class="o">=</span> <span class="o">({</span><span class="n">navigation</span><span class="o">,</span> <span class="n">route</span><span class="o">})</span> <span class="o">=&gt;</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span> <span class="n">style</span><span class="o">={</span> <span class="o">{</span><span class="nl">height:</span> <span class="nc">Dimensions</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="err">'</span><span class="n">window</span><span class="err">'</span><span class="o">).</span><span class="na">height</span><span class="o">}</span> <span class="o">}&gt;</span> <span class="c1">// 이 부분이 중요</span>
        <span class="o">&lt;</span><span class="nc">Stack</span><span class="o">.</span><span class="na">Navigator</span>
        <span class="n">screenOptions</span><span class="o">=&gt;</span>
        <span class="o">&lt;</span><span class="nc">Stack</span><span class="o">.</span><span class="na">Screen</span> <span class="n">name</span><span class="o">=</span><span class="s">"RootHome"</span> <span class="n">component</span><span class="o">={</span><span class="nc">RootHome</span><span class="o">}</span> <span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="nc">Stack</span><span class="o">.</span><span class="na">Screen</span> <span class="n">name</span><span class="o">=</span><span class="s">"NavigatorOne"</span> <span class="n">component</span><span class="o">={</span><span class="nc">NavigatorOne</span><span class="o">}</span> <span class="o">/&gt;</span>
        <span class="o">&lt;</span><span class="nc">Stack</span><span class="o">.</span><span class="na">Screen</span> <span class="n">name</span><span class="o">=</span><span class="s">"NavigatorTwo"</span> <span class="n">component</span><span class="o">={</span><span class="nc">NavigatorTwo</span><span class="o">}</span> <span class="o">/&gt;</span>
        <span class="o">&lt;/</span><span class="nc">Stack</span><span class="o">.</span><span class="na">Navigator</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
    <span class="o">);</span>
<span class="o">};</span>
</code></pre></div></div>
<p>바로 <code class="language-plaintext highlighter-rouge">Dimension.get('window')</code>를 활용하는 방법이다. 이것이 위치해야할 곳은 bottom tab 네비게이터 위에서 stack 네비게이터가 분기하는 지점이다. 
<br />
즉 bottom tab 네비게이터 위에 있으면서 stack 네비게이터의 루트가 될 네비게이터와 그 홈 스크린이 적당하다. 
<br />
위의 예를 들어보면 NavigatorExample이라는 stack 네비게이터가 어떤 bottom tab 네비게이터 위에 있다고 가정하자. 
<br />
그러면 NavigatorExample 네비게이터와 그 홈 스크린인 RootHome 스크린의 height는 Dimension.get(‘window’).height로 지정해주어야 한다. 
위에서는 RootHome에 대한 예시가 없지만 잊지 말자. 
<br />
이렇게 하면 버그는 해결되었을 것이다! 
그래도 불안하다면 웬만한 스크린의 높이 지정은 Dimension을 이용하도록 하자.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[React Native를 이용하여 앱을 만들게 되면 @react-navigation/bottom-tab 라이브러리의 네비게이터를 자주 이용하게 된다. 네비게이터를 하나만 사용할 때는 문제가 없는데 여러개의 네비게이터들이 차곡차곡 쌓이면서부터 문제가 발생하기 시작한다. 특정 스크린으로 이동할 때에는 하단 메뉴바를 안보이게 해야 할 때가 많은데 주로 아래와 같이 해결할 것이다. ```javascript import {getFocusedRouteNameFromRoute} from ‘@react-navigation/native’; import {createNativeStackNavigator} from ‘@react-navigation/native-stack’;]]></summary></entry><entry><title type="html">구글 서치 콘솔에서 리디렉션 오류로 색인 등록이 안될 때</title><link href="http://localhost:4000/eighth-post/" rel="alternate" type="text/html" title="구글 서치 콘솔에서 리디렉션 오류로 색인 등록이 안될 때" /><published>2022-03-24T00:00:00+07:00</published><updated>2022-03-24T00:00:00+07:00</updated><id>http://localhost:4000/eighth-post</id><content type="html" xml:base="http://localhost:4000/eighth-post/"><![CDATA[<p>이번에 블로그 테마를 바꾸면서 Google Search Console 설정을 다시 해 줄 필요가 있었다.
하지만 사이트맵을 새로 등록해도 바로 읽어들이지 못하였다. 결국 이전 블로그 글은 구글 검색이 되는데 404에러가 뜨고 새로 등록한 글들은 검색이 안되는 상황에 맞닥뜨렸다.
이는 블로그 글들의 파일경로가 바뀌면서 주소가 변경되었기 때문인데 마냥 기다릴 수만은 없었기에 색인 생성 요청을 해보았다.<br />
며칠이 지난 후에 결과가 나왔는데 리디렉션 오류로 여전히 구글 검색이 안되었다.<br />
다른 블로그를 찾아보니 구글이 크롤링을 할 때 숫자 하나 차이는 구별하지 못하기 때문이라는 글이 있어서 URL의 숫자부분을 전부 문자로 바꾸어주었다. 
예를 들어 기존의 URL이 <code class="language-plaintext highlighter-rouge">https://froggydisk.github.io/7th-post</code> 와 같았다면 변경 후에는 <code class="language-plaintext highlighter-rouge">https://froggydisk.github.io/seventh-post</code> 이 되었다.<br />
희망을 품고 또 며칠을 기다렸지만 리디렉션 오류는 해결되지 않았다.<br />
사이트맵을 읽을 때까지 기다려야하나 고민하던 찰나 URL경로 끝에 <code class="language-plaintext highlighter-rouge">/</code> 를 붙여보자는 생각이 들어서 즉시 실행해 옮겼다.<br />
결과는 성공!<br />
이유는 모르겠지만 <code class="language-plaintext highlighter-rouge">https://froggydisk.github.io/seventh-post/</code> 의 URL로 색인 생성 요청을 하였더니 리디렉션 오류가 사라지고 색인 등록에 성공하였다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Google Search Console" /><summary type="html"><![CDATA[이번에 블로그 테마를 바꾸면서 Google Search Console 설정을 다시 해 줄 필요가 있었다. 하지만 사이트맵을 새로 등록해도 바로 읽어들이지 못하였다. 결국 이전 블로그 글은 구글 검색이 되는데 404에러가 뜨고 새로 등록한 글들은 검색이 안되는 상황에 맞닥뜨렸다. 이는 블로그 글들의 파일경로가 바뀌면서 주소가 변경되었기 때문인데 마냥 기다릴 수만은 없었기에 색인 생성 요청을 해보았다. 며칠이 지난 후에 결과가 나왔는데 리디렉션 오류로 여전히 구글 검색이 안되었다. 다른 블로그를 찾아보니 구글이 크롤링을 할 때 숫자 하나 차이는 구별하지 못하기 때문이라는 글이 있어서 URL의 숫자부분을 전부 문자로 바꾸어주었다. 예를 들어 기존의 URL이 https://froggydisk.github.io/7th-post 와 같았다면 변경 후에는 https://froggydisk.github.io/seventh-post 이 되었다. 희망을 품고 또 며칠을 기다렸지만 리디렉션 오류는 해결되지 않았다. 사이트맵을 읽을 때까지 기다려야하나 고민하던 찰나 URL경로 끝에 / 를 붙여보자는 생각이 들어서 즉시 실행해 옮겼다. 결과는 성공! 이유는 모르겠지만 https://froggydisk.github.io/seventh-post/ 의 URL로 색인 생성 요청을 하였더니 리디렉션 오류가 사라지고 색인 등록에 성공하였다.]]></summary></entry><entry><title type="html">Buy me a coffee 버튼 만들기 ☕️</title><link href="http://localhost:4000/seventh-post/" rel="alternate" type="text/html" title="Buy me a coffee 버튼 만들기 ☕️" /><published>2022-03-03T00:00:00+07:00</published><updated>2022-03-03T00:00:00+07:00</updated><id>http://localhost:4000/seventh-post</id><content type="html" xml:base="http://localhost:4000/seventh-post/"><![CDATA[<p>여러 블로그를 돌아다니다보니 포스트 아래쪽에 달려있는 예쁜 버튼들에 눈길이 갔다. <code class="language-plaintext highlighter-rouge">Buy me a coffee</code>로도 유명한 후원 버튼이었는데 애드 포스트가 덕지덕지 붙어있는 것보다 훨씬 깔끔해 보여서 한 번 만들어보기로 하였다. 후원보다는 디자인적인 욕심이 큰 것 같다.</p>

<h1 id="순서">순서</h1>
<ol>
  <li>우선 마음에 드는 버튼 디자인을 찾거나 직접 디자인한다. 나의 경우에는 여러 레퍼런스를 찾아보았는데 <a href="https://velog.io/@whdnjsdyd111/CSS-버튼-이쁘게-꾸미기">waster.log</a>에서 많은 도움을 받았다.</li>
  <li>다음으로는 버튼에 단순히 <code class="language-plaintext highlighter-rouge">onclick="location.href=</code>를 붙여주면 끝이난다.</li>
</ol>

<p>하나는 카카오, 다른 하나는 <code class="language-plaintext highlighter-rouge">buy me a coffee</code>로 해서 총 두 개의 버튼을 만들었다. 카카오는 모바일에서만 가능하고 카카오계정이 드러나다보니 조금 노골적인 느낌이 들었다. <code class="language-plaintext highlighter-rouge">buy me a coffee</code>는 후원페이지도 직접 꾸밀 수 있고 깔끔한 UI가 마음에 들었는데 후원 절차가 비교적 까다롭고 한화 결제가 불가능하다는 것이 마음에 걸렸다. 또한 일정 금액 이상이 아니면 인출도 불가능하다.</p>

<p>코드는 아래와 같다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="err">!</span><span class="n">DOCTYPE</span> <span class="n">html</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">html</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">head</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">script</span> <span class="n">src</span><span class="o">=</span><span class="s">"[fontawesome사이트에서 발급되는 url]"</span> <span class="n">crossorigin</span><span class="o">=</span><span class="s">"anonymous"</span><span class="o">&gt;&lt;/</span><span class="n">script</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">head</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="n">body</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">div</span> <span class="n">class</span><span class="o">=</span><span class="s">"support-link-btn"</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="n">button</span> <span class="n">class</span><span class="o">=</span><span class="s">"w-btn w-btn-yellow"</span> <span class="n">onclick</span><span class="o">=</span><span class="s">"location.href='[카카오페이 송금 url]'"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="n">span</span><span class="o">&gt;</span><span class="n">Give</span> <span class="n">me</span> <span class="n">a</span> <span class="n">kakao</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="n">i</span> <span class="n">class</span><span class="o">=</span><span class="s">"fa-solid fa-heart fa-beat"</span> <span class="n">style</span><span class="o">=</span><span class="s">"--fa-animation-duration: 1s;"</span><span class="o">&gt;&lt;/</span><span class="n">i</span><span class="o">&gt;</span>
      <span class="o">&lt;/</span><span class="n">button</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="n">button</span> <span class="n">class</span><span class="o">=</span><span class="s">"w-btn w-btn-gra1 w-btn-gra-anim"</span> <span class="n">onclick</span><span class="o">=</span><span class="s">"location.href='[buy me a coffee 후원페이지 url]'"</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="n">span</span><span class="o">&gt;</span><span class="n">Buy</span> <span class="n">me</span> <span class="n">a</span> <span class="n">coffee</span><span class="o">&lt;/</span><span class="n">span</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="n">i</span> <span class="n">class</span><span class="o">=</span><span class="s">"fa-solid fa-mug-hot"</span><span class="o">&gt;&lt;/</span><span class="n">i</span><span class="o">&gt;</span>
      <span class="o">&lt;/</span><span class="n">button</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="n">div</span><span class="o">&gt;</span>
  <span class="o">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">html</span><span class="o">&gt;</span>


<span class="o">&lt;</span><span class="n">style</span> <span class="nb">type</span><span class="o">=</span><span class="s">"text/css"</span><span class="o">&gt;</span>
<span class="o">@</span><span class="kn">import</span> <span class="nn">url</span><span class="p">(</span><span class="s">"https://fonts.googleapis.com/css?family=Poppins:200,300,400,500,600,700,800,900&amp;display=swap"</span><span class="p">);</span>

<span class="c1"># 버튼 위치 조정
</span><span class="p">.</span><span class="n">support</span><span class="o">-</span><span class="n">link</span><span class="o">-</span><span class="n">btn</span> <span class="p">{</span>
      <span class="n">text</span><span class="o">-</span><span class="n">align</span><span class="p">:</span> <span class="n">center</span><span class="p">;</span>
      <span class="n">margin</span><span class="o">-</span><span class="n">top</span><span class="p">:</span> <span class="mi">3</span><span class="n">em</span><span class="p">;</span>
  <span class="p">}</span>

<span class="c1"># 버튼 디자인 설정
</span><span class="p">.</span><span class="n">w</span><span class="o">-</span><span class="n">btn</span> <span class="p">{</span>
    <span class="n">font</span><span class="o">-</span><span class="n">size</span><span class="p">:</span> <span class="mf">0.8</span><span class="n">em</span><span class="p">;</span>
    <span class="n">position</span><span class="p">:</span> <span class="n">relative</span><span class="p">;</span>
    <span class="n">border</span><span class="p">:</span> <span class="n">none</span><span class="p">;</span>
    <span class="n">display</span><span class="p">:</span> <span class="n">inline</span><span class="o">-</span><span class="n">block</span><span class="p">;</span>
    <span class="n">padding</span><span class="p">:</span> <span class="mi">15</span><span class="n">px</span> <span class="mi">30</span><span class="n">px</span><span class="p">;</span>
    <span class="n">border</span><span class="o">-</span><span class="n">radius</span><span class="p">:</span> <span class="mi">15</span><span class="n">px</span><span class="p">;</span>
    <span class="n">font</span><span class="o">-</span><span class="n">family</span><span class="p">:</span> <span class="s">"paybooc-Light"</span><span class="p">,</span> <span class="n">sans</span><span class="o">-</span><span class="n">serif</span><span class="p">;</span>
    <span class="n">box</span><span class="o">-</span><span class="n">shadow</span><span class="p">:</span> <span class="mi">0</span> <span class="mi">15</span><span class="n">px</span> <span class="mi">35</span><span class="n">px</span> <span class="n">rgba</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">);</span>
    <span class="n">text</span><span class="o">-</span><span class="n">decoration</span><span class="p">:</span> <span class="n">none</span><span class="p">;</span>
    <span class="n">font</span><span class="o">-</span><span class="n">weight</span><span class="p">:</span> <span class="mi">600</span><span class="p">;</span>
    <span class="n">transition</span><span class="p">:</span> <span class="mf">0.25</span><span class="n">s</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="n">w</span><span class="o">-</span><span class="n">btn</span><span class="p">:</span><span class="n">hover</span> <span class="p">{</span>
    <span class="n">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="mf">1.1</span><span class="p">);</span>
    <span class="n">cursor</span><span class="p">:</span> <span class="n">pointer</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="n">w</span><span class="o">-</span><span class="n">btn</span><span class="p">:</span><span class="n">active</span> <span class="p">{</span>
    <span class="n">transform</span><span class="p">:</span> <span class="n">scale</span><span class="p">(</span><span class="mf">1.1</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1"># hover 시 물결 효과
</span><span class="o">@</span><span class="n">keyframes</span> <span class="n">ring</span> <span class="p">{</span>
    <span class="mi">0</span><span class="o">%</span> <span class="p">{</span>
        <span class="n">width</span><span class="p">:</span> <span class="mi">30</span><span class="n">px</span><span class="p">;</span>
        <span class="n">height</span><span class="p">:</span> <span class="mi">30</span><span class="n">px</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="mi">100</span><span class="o">%</span> <span class="p">{</span>
        <span class="n">width</span><span class="p">:</span> <span class="mi">300</span><span class="n">px</span><span class="p">;</span>
        <span class="n">height</span><span class="p">:</span> <span class="mi">300</span><span class="n">px</span><span class="p">;</span>
        <span class="n">border</span><span class="o">-</span><span class="n">color</span><span class="p">:</span> <span class="n">transparent</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="p">.</span><span class="n">w</span><span class="o">-</span><span class="n">btn</span><span class="p">:</span><span class="n">hover</span><span class="p">::</span><span class="n">after</span> <span class="p">{</span>
    <span class="n">content</span><span class="p">:</span> <span class="s">""</span><span class="p">;</span>
    <span class="n">border</span><span class="o">-</span><span class="n">radius</span><span class="p">:</span> <span class="mi">100</span><span class="o">%</span><span class="p">;</span>
    <span class="n">border</span><span class="p">:</span> <span class="mi">6</span><span class="n">px</span> <span class="n">solid</span> <span class="c1">#9dc8c8;
</span>    <span class="n">position</span><span class="p">:</span> <span class="n">absolute</span><span class="p">;</span>
    <span class="n">z</span><span class="o">-</span><span class="n">index</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="n">top</span><span class="p">:</span> <span class="mi">50</span><span class="o">%</span><span class="p">;</span>
    <span class="n">left</span><span class="p">:</span> <span class="mi">50</span><span class="o">%</span><span class="p">;</span>
    <span class="n">transform</span><span class="p">:</span> <span class="n">translate</span><span class="p">(</span><span class="o">-</span><span class="mi">50</span><span class="o">%</span><span class="p">,</span> <span class="o">-</span><span class="mi">50</span><span class="o">%</span><span class="p">);</span>
    <span class="n">animation</span><span class="p">:</span> <span class="n">ring</span> <span class="mf">1.5</span><span class="n">s</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1"># 카카오 버튼
</span><span class="p">.</span><span class="n">w</span><span class="o">-</span><span class="n">btn</span><span class="o">-</span><span class="n">yellow</span> <span class="p">{</span>
  <span class="n">background</span><span class="o">-</span><span class="n">color</span><span class="p">:</span> <span class="c1">#fce205;
</span>  <span class="n">color</span><span class="p">:</span> <span class="c1">#3B240B;
</span><span class="p">}</span>

<span class="c1"># buy me a coffee 버튼
</span><span class="p">.</span><span class="n">w</span><span class="o">-</span><span class="n">btn</span><span class="o">-</span><span class="n">gra1</span> <span class="p">{</span>
    <span class="n">background</span><span class="p">:</span> <span class="n">linear</span><span class="o">-</span><span class="n">gradient</span><span class="p">(</span><span class="o">-</span><span class="mi">45</span><span class="n">deg</span><span class="p">,</span> <span class="c1">#ee7752, #e73c7e, #23a6d5, #23d5ab);
</span>    <span class="n">color</span><span class="p">:</span> <span class="n">white</span><span class="p">;</span>
<span class="p">}</span>

<span class="p">.</span><span class="n">w</span><span class="o">-</span><span class="n">btn</span><span class="o">-</span><span class="n">gra</span><span class="o">-</span><span class="n">anim</span> <span class="p">{</span>
    <span class="n">background</span><span class="o">-</span><span class="n">size</span><span class="p">:</span> <span class="mi">400</span><span class="o">%</span> <span class="mi">400</span><span class="o">%</span><span class="p">;</span>
    <span class="n">animation</span><span class="p">:</span> <span class="n">gradient</span> <span class="mi">7</span><span class="n">s</span> <span class="n">ease</span> <span class="n">infinite</span><span class="p">;</span>
<span class="p">}</span>

<span class="o">@</span><span class="n">keyframes</span> <span class="n">gradient</span> <span class="p">{</span>
    <span class="mi">0</span><span class="o">%</span> <span class="p">{</span>
        <span class="n">background</span><span class="o">-</span><span class="n">position</span><span class="p">:</span> <span class="mi">0</span><span class="o">%</span> <span class="mi">50</span><span class="o">%</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="mi">50</span><span class="o">%</span> <span class="p">{</span>
        <span class="n">background</span><span class="o">-</span><span class="n">position</span><span class="p">:</span> <span class="mi">100</span><span class="o">%</span> <span class="mi">50</span><span class="o">%</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="mi">100</span><span class="o">%</span> <span class="p">{</span>
        <span class="n">background</span><span class="o">-</span><span class="n">position</span><span class="p">:</span> <span class="mi">0</span><span class="o">%</span> <span class="mi">50</span><span class="o">%</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="o">&lt;/</span><span class="n">style</span><span class="o">&gt;</span>
</code></pre></div></div>

<p>버튼 안에 들어갈 아이콘을 찾을 때는 <a href="https://fontawesome.com">fontawesome</a>을 추천한다. 완성본은 footer쪽을 보세요! ⬇️</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="HTML/CSS" /><summary type="html"><![CDATA[여러 블로그를 돌아다니다보니 포스트 아래쪽에 달려있는 예쁜 버튼들에 눈길이 갔다. Buy me a coffee로도 유명한 후원 버튼이었는데 애드 포스트가 덕지덕지 붙어있는 것보다 훨씬 깔끔해 보여서 한 번 만들어보기로 하였다. 후원보다는 디자인적인 욕심이 큰 것 같다.]]></summary></entry></feed>