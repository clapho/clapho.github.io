<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2023-08-17T21:26:58+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">froggydisk</title><subtitle>This is for frogs in the world.</subtitle><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><entry><title type="html">[React Native] 모서리가 둥근 삼각형 만들기</title><link href="http://localhost:4000/30th-post/" rel="alternate" type="text/html" title="[React Native] 모서리가 둥근 삼각형 만들기" /><published>2023-08-17T00:00:00+07:00</published><updated>2023-08-17T00:00:00+07:00</updated><id>http://localhost:4000/30th-post</id><content type="html" xml:base="http://localhost:4000/30th-post/"><![CDATA[<p>앱을 만들다가 도형을 그려야할 때가 오면 나도 모르게 한숨을 내쉬고 있다.        <br />
디테일적인 부분까지 챙기려면 은근히 손이 많이 가는 작업이기 때문이다.</p>

<p>오늘은 오전 내내 모서리가 둥근 삼각형을 그려야했기에 나중을 위해서 기록해둔다.</p>

<h1 id="설계도">설계도</h1>
<p>삼각형을 그리기 위한 방법에는 여러가지가 있지만 우리가 익히 알고 있는 일반적인 삼각형을 그리는 일은 어렵지 않다. 
구글 검색을 해도 쉽게 나올 것이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">React</span> <span class="n">from</span> <span class="err">'</span><span class="n">react</span><span class="err">'</span><span class="o">;</span>
<span class="kn">import</span> <span class="err">{</span> <span class="nn">View</span><span class="o">,</span> <span class="nc">StyleSheet</span> <span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="n">react</span><span class="o">-</span><span class="kd">native</span><span class="err">'</span><span class="o">;</span>

<span class="kd">const</span> <span class="nc">App</span> <span class="o">=</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span> <span class="n">style</span><span class="o">={</span><span class="n">styles</span><span class="o">.</span><span class="na">container</span><span class="o">}&gt;</span>
      <span class="o">&lt;</span><span class="nc">View</span> <span class="n">style</span><span class="o">={</span><span class="n">styles</span><span class="o">.</span><span class="na">triangle</span><span class="o">}</span> <span class="o">/&gt;</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">};</span>

<span class="kd">const</span> <span class="n">styles</span> <span class="o">=</span> <span class="nc">StyleSheet</span><span class="o">.</span><span class="na">create</span><span class="o">({</span>
  <span class="nl">container:</span> <span class="o">{</span>
    <span class="nl">flex:</span> <span class="mi">1</span><span class="o">,</span>
    <span class="nl">justifyContent:</span> <span class="err">'</span><span class="n">center</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">alignItems:</span> <span class="err">'</span><span class="n">center</span><span class="err">'</span><span class="o">,</span>
  <span class="o">},</span>
  <span class="nl">triangle:</span> <span class="o">{</span>
    <span class="nl">width:</span> <span class="mi">0</span><span class="o">,</span>
    <span class="nl">height:</span> <span class="mi">0</span><span class="o">,</span>
    <span class="nl">backgroundColor:</span> <span class="err">'</span><span class="n">transparent</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">borderStyle:</span> <span class="err">'</span><span class="n">solid</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">borderLeftWidth:</span> <span class="mi">50</span><span class="o">,</span>
    <span class="nl">borderRightWidth:</span> <span class="mi">50</span><span class="o">,</span>
    <span class="nl">borderBottomWidth:</span> <span class="mi">100</span><span class="o">,</span>
    <span class="nl">borderLeftColor:</span> <span class="err">'</span><span class="n">transparent</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">borderRightColor:</span> <span class="err">'</span><span class="n">transparent</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">borderBottomColor:</span> <span class="err">'</span><span class="n">lime</span><span class="err">'</span><span class="o">,</span>
  <span class="o">},</span>
<span class="o">});</span>

<span class="n">export</span> <span class="k">default</span> <span class="nc">App</span><span class="o">;</span>
</code></pre></div></div>

<p>위와 같은 코드로도 충분히 삼각형을 그릴 수 있다. 하지만 우리가 필요한 건 모서리가 “둥근” 삼각형이다.
그렇다면 다른 접근 방식이 필요하다. 아래 그림을 보자.</p>
<p align="center"><img src="https://github.com/froggydisk/froggydisk.github.io/blob/master/assets/img/30th.png?raw=true" /></p>

<p>필자는 세 개의 평행사변형(마름모)의 모서리를 borderRadius로 둥글게 만든 뒤 이를 합치는 방법을 사용했다. 굳이 이 방법을 사용하지 않더라도 <code class="language-plaintext highlighter-rouge">react-native-svg</code> 라이브러리를 이용하면 훨씬 좋은 방법이 있을 수 있으니 원치 않는 방법이라면 다른 방법을 찾아보기를 강력히 권한다.</p>

<p>어쨌거나, 평행사변형 세 개를 잘 조작해야하는 것은 분명한데 그를 위해서는 transform을 잘 이용해야한다.
transform으로도 할 수 있는 것은 여러가지 있지만 여기서는 rotate(돌리고), skewX(비틀고), scaleY(늘리기)를 사용할 것이다. 
아래를 살펴보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nc">Triangle</span> <span class="o">=</span> <span class="o">({</span><span class="n">color</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">children</span><span class="o">})</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span>
      <span class="n">style</span><span class="o">={</span> <span class="o">{</span>
        <span class="nl">alignSelf:</span> <span class="err">'</span><span class="n">center</span><span class="err">'</span><span class="o">,</span>
        <span class="nl">width:</span> <span class="n">size</span><span class="o">,</span>
        <span class="nl">height:</span> <span class="n">size</span><span class="o">,</span>
      <span class="o">}</span> <span class="o">}&gt;</span>
      <span class="o">{</span><span class="cm">/* Upper Triangle */</span><span class="o">}</span>
      <span class="o">&lt;</span><span class="nc">View</span>
        <span class="n">style</span><span class="o">={</span> <span class="o">{</span>
          <span class="nl">position:</span> <span class="err">'</span><span class="n">absolute</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">width:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">height:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">borderTopRightRadius:</span> <span class="mi">30</span><span class="o">,</span>
          <span class="nl">backgroundColor:</span> <span class="n">color</span><span class="o">,</span>
          <span class="nl">transform:</span> <span class="o">[{</span><span class="nl">rotate:</span> <span class="err">'</span><span class="o">-</span><span class="mi">60</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span> <span class="o">{</span><span class="nl">skewX:</span> <span class="err">'</span><span class="o">-</span><span class="mi">30</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span> <span class="o">{</span><span class="nl">scaleY:</span> <span class="mf">0.866</span><span class="o">}],</span>
        <span class="o">}</span> <span class="o">}</span>
      <span class="o">/&gt;</span>
      <span class="o">{</span><span class="cm">/* Lower Triangle */</span><span class="o">}</span>
      <span class="o">&lt;</span><span class="nc">View</span>
        <span class="n">style</span><span class="o">={</span> <span class="o">{</span>
          <span class="nl">position:</span> <span class="err">'</span><span class="n">absolute</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">width:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">height:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">borderTopRightRadius:</span> <span class="mi">30</span><span class="o">,</span>
          <span class="nl">backgroundColor:</span> <span class="n">color</span><span class="o">,</span>
          <span class="nl">transform:</span> <span class="o">[</span>
            <span class="o">{</span><span class="nl">rotate:</span> <span class="err">'</span><span class="o">-</span><span class="mi">180</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">skewX:</span> <span class="err">'</span><span class="o">-</span><span class="mi">30</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">scaleY:</span> <span class="mf">0.866</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">translateY:</span> <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">size</span><span class="o">},</span>
          <span class="o">],</span>
        <span class="o">}</span> <span class="o">}</span>
      <span class="o">/&gt;</span>
      <span class="o">{</span><span class="cm">/* Bottom Right Triangle */</span><span class="o">}</span>
      <span class="o">&lt;</span><span class="nc">View</span>
        <span class="n">style</span><span class="o">={</span> <span class="o">{</span>
          <span class="nl">position:</span> <span class="err">'</span><span class="n">absolute</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">width:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">height:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">borderTopLeftRadius:</span> <span class="mi">30</span><span class="o">,</span>
          <span class="nl">backgroundColor:</span> <span class="n">color</span><span class="o">,</span>
          <span class="nl">transform:</span> <span class="o">[</span>
            <span class="o">{</span><span class="nl">rotate:</span> <span class="err">'</span><span class="mi">180</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">skewX:</span> <span class="err">'</span><span class="mi">30</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">scaleY:</span> <span class="mf">0.866</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">translateY:</span> <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">size</span><span class="o">},</span>
          <span class="o">],</span>
        <span class="o">}</span> <span class="o">}</span>
      <span class="o">/&gt;</span>
      <span class="o">{</span><span class="n">children</span><span class="o">}</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">};</span>
</code></pre></div></div>

<p>모든 사이즈에 맞추어 삼각형을 만들 수 있게 끔 transform의 변수 조정을 해주었다. 코드만 보아도 쉽게 이해할 수 있을 것이다.</p>

<p>보통 도형 그리기는 노하우나 경험이 많이 필요하기에 잘 모르겠다면 우선 css로 되어있는 코드를 찾아보기를 권한다. 그 후 React Native 코드로 변환하는 과정을 거칠텐데 css 코드를 보아도 잘 이해가 안된다면 chatGPT에게 바꾸어 달라고 하자.</p>

<p>복사 붙여넣기가 코딩 실력 상승에는 도움이 안 될 수 있으나 처음에 방향성을 잡을 때는 훌륭한 방법이다. 막막할 때 아까운 시간을 흘려보내기 보다는 무엇이라도 빠르게 방법을 찾아서 시도해 보는 것이 더 중요하다고 생각한다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[앱을 만들다가 도형을 그려야할 때가 오면 나도 모르게 한숨을 내쉬고 있다. 디테일적인 부분까지 챙기려면 은근히 손이 많이 가는 작업이기 때문이다.]]></summary></entry><entry><title type="html">[React Native] &amp;amp;&amp;amp; 구문 사용 시 Text 에러</title><link href="http://localhost:4000/29th-post/" rel="alternate" type="text/html" title="[React Native] &amp;amp;&amp;amp; 구문 사용 시 Text 에러" /><published>2023-08-10T00:00:00+07:00</published><updated>2023-08-10T00:00:00+07:00</updated><id>http://localhost:4000/29th-post</id><content type="html" xml:base="http://localhost:4000/29th-post/"><![CDATA[<p>개발 중에 예상치 못한 에러를 만나 기록해둔다.     <br />
뜬금없이 <code class="language-plaintext highlighter-rouge">Error: Text strings must be rendered within a &lt;Text&gt; component.</code>에러를 만나게 되었는데 이는 주로 <Text>태그가 아니라 <View>안에 문자열을 사용하여 나타나는 에러다. 
React로 개발을 하다가 React Native로 넘어오게 되거나 멀티로 개발을 할 때 흔히 하는 실수이다.</View></Text></p>

<p>하지만 이번에는 눈을 씻고 찾아봐도 원인을 찾기 힘들었다.
예를 들어 아래와 같은 코드가 존재한다고 해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="o">[</span><span class="n">sample</span><span class="o">,</span> <span class="n">setSample</span><span class="o">]</span> <span class="o">=</span> <span class="n">useState</span><span class="o">(</span><span class="n">undefined</span><span class="o">)</span>
<span class="n">useEffect</span><span class="o">(()=&gt;</span> <span class="o">{</span>
    <span class="n">setSample</span><span class="o">(</span><span class="mi">0</span><span class="o">~</span><span class="mi">100</span> <span class="n">사이</span> <span class="n">랜덤한</span> <span class="n">정수</span><span class="o">)</span>
<span class="o">},</span> <span class="o">[])</span>
<span class="k">return</span><span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span><span class="o">&gt;</span>
        <span class="o">{</span><span class="n">sample</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nc">Text</span><span class="o">&gt;</span><span class="n">test</span><span class="o">&lt;/</span><span class="nc">Text</span><span class="o">&gt;}</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
<span class="o">)</span>
</code></pre></div></div>

<p>예상컨대 맨 처음에는 sample값이 <code class="language-plaintext highlighter-rouge">undefined</code>이기에 화면에 test는 나타나지 않는다.    <br />
전체 layout이 그려진 뒤 useEffect가 실행되면서 setSample()에 의해 sample값이 <code class="language-plaintext highlighter-rouge">0~100 사이 정수</code>로 바뀌게 되고, 이후 <code class="language-plaintext highlighter-rouge">test</code>라는 문자열이 화면에 나타날 것으로 예상된다.</p>

<p>아, 여기서 놓치면 안되는 것이 자바스크립트에서 <code class="language-plaintext highlighter-rouge">0</code>은 <code class="language-plaintext highlighter-rouge">false</code>로 취급되기 때문에 특별히 <code class="language-plaintext highlighter-rouge">0</code>의 경우에는 <code class="language-plaintext highlighter-rouge">undefined</code>와 같이 <code class="language-plaintext highlighter-rouge">test</code>는 나타나지 않을 것이다. 
덧붙이자면, <strong><code class="language-plaintext highlighter-rouge">false, undefined, null, 0, -0, Nan, ""</code></strong> 다음과 같은 여섯 가지의 경우는 모두 <code class="language-plaintext highlighter-rouge">false</code>로 취급되므로 주의하자.</p>

<p>그렇다면 위의 여섯 가지의 경우는 React Native에서 모두 <code class="language-plaintext highlighter-rouge">false</code>로 처리될까? (RN 0.71.6 버전 기준)       <br />
아쉽게도 React Native 상의 <code class="language-plaintext highlighter-rouge">&amp;&amp; 구문</code>에서는 제대로 처리되지 않는 모습을 보인다.</p>

<p>실험해본 결과 sample값이 <code class="language-plaintext highlighter-rouge">0</code>과 <code class="language-plaintext highlighter-rouge">-0</code>의 경우에는 모두 <code class="language-plaintext highlighter-rouge">Error: Text strings must be rendered within a &lt;Text&gt; component.</code>에러를 나타냈다.</p>

<p>따라서 위와 같은 에러를 만난 경우 <code class="language-plaintext highlighter-rouge">&amp;&amp; 구문</code>을 잘 확인해보자.
참고로, 삼항연산자의 경우에는 해당 에러가 발생하지 않았다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[개발 중에 예상치 못한 에러를 만나 기록해둔다. 뜬금없이 Error: Text strings must be rendered within a &lt;Text&gt; component.에러를 만나게 되었는데 이는 주로 태그가 아니라 안에 문자열을 사용하여 나타나는 에러다. React로 개발을 하다가 React Native로 넘어오게 되거나 멀티로 개발을 할 때 흔히 하는 실수이다.]]></summary></entry><entry><title type="html">[React Native] 처음 앱 진입시 로그인 상태에 따른 네비게이션 분기</title><link href="http://localhost:4000/28th-post/" rel="alternate" type="text/html" title="[React Native] 처음 앱 진입시 로그인 상태에 따른 네비게이션 분기" /><published>2023-07-24T00:00:00+07:00</published><updated>2023-07-24T00:00:00+07:00</updated><id>http://localhost:4000/28th-post</id><content type="html" xml:base="http://localhost:4000/28th-post/"><![CDATA[<p>보통 앱을 만들게 되면 현재 로그인한 상태에 따라 시작하는 <code class="language-plaintext highlighter-rouge">Screen</code>을 다르게 설정함으로써 UX를 개선한다.    <br />
<code class="language-plaintext highlighter-rouge">NavigatorAuth, NavigatorMain</code>과 같이 로그인의 상태에 따라 진입하는 Navigator가 다른 경우에는 간단하다.       <br />
아래의 코드처럼 로그인 상태값에 따라 삼항연산자를 활용하여 진입점을 바꾸어주면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">function</span> <span class="nf">App</span><span class="o">()</span> <span class="o">{</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">isLogin</span><span class="o">,</span> <span class="n">setIsLogin</span><span class="o">]</span> <span class="o">=</span> <span class="n">useState</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
  <span class="o">...</span> <span class="o">(</span><span class="n">setIsLogin에</span> <span class="n">상태값을</span> <span class="n">넣어주는</span> <span class="n">로직</span><span class="o">)</span>

  <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">NavigationContainer</span><span class="o">&gt;</span>      
      <span class="o">{</span><span class="n">isLogin</span> <span class="o">?</span> <span class="o">(</span>
        <span class="o">&lt;</span><span class="nc">NavigatorMain</span> <span class="o">/&gt;</span> <span class="c1">// 로그인 되어있는 경우 홈 진입</span>
      <span class="o">)</span> <span class="o">:</span> <span class="o">(</span>
        <span class="o">&lt;</span><span class="nc">NavigatorAuth</span> <span class="o">/&gt;</span> <span class="c1">// 로그인이 안 되어있는 경우 로그인 페이지 진입</span>
      <span class="o">)}</span>
    <span class="o">&lt;/</span><span class="nc">NavigationContainer</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>하지만 굳이 두 개의 Navigator를 쓰지 않고 하나의 Navigator 안에서 진입점을 다르게 해주고 싶은 경우도 있을 것이다.                <br />
그러한 경우에는 <strong>useNavigationContainerRef()를 활용해주면 된다.</strong> 아래 코드를 살펴보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.js 파일</span>
<span class="n">function</span> <span class="nf">App</span><span class="o">()</span> <span class="o">{</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">isLogin</span><span class="o">,</span> <span class="n">setIsLogin</span><span class="o">]</span> <span class="o">=</span> <span class="n">useState</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
  <span class="o">...</span> <span class="o">(</span><span class="n">setIsLogin에</span> <span class="n">상태값을</span> <span class="n">넣어주는</span> <span class="n">로직</span><span class="o">)</span>

  <span class="c1">// 로그인이 안 되어있는 경우 로그인 페이지 진입</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">route</span><span class="o">,</span> <span class="n">setRoute</span><span class="o">]</span> <span class="o">=</span> <span class="n">useState</span><span class="o">(</span><span class="err">'</span><span class="nc">LoginScreen</span><span class="err">'</span><span class="o">);</span> 
  <span class="n">useEffect</span><span class="o">(()</span> <span class="o">=&gt;</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isLogin</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">setRoute</span><span class="o">(</span><span class="err">'</span><span class="nc">MainScreen</span><span class="err">'</span><span class="o">);</span> <span class="c1">// 로그인이 되어있는 경우 홈 진입</span>
    <span class="o">}</span>
  <span class="o">},</span> <span class="o">[</span><span class="n">isLogin</span><span class="o">]);</span>

  <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">NavigationContainer</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nc">NavigatorMain</span> <span class="n">initialRouteName</span><span class="o">={</span><span class="n">route</span><span class="o">}</span> <span class="o">/&gt;</span>
    <span class="o">&lt;/</span><span class="nc">NavigationContainer</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>우선 app.js에서 로그인 상태에 따른 분기를 처리해주고 이후 NavigatorMain에서 분기할 지점(initialRouteName)으로 화면을 전환하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// NavigatorMain.js 파일</span>
<span class="kn">import</span> <span class="nn">React</span><span class="o">,</span> <span class="o">{</span><span class="n">useEffect</span><span class="o">,</span> <span class="n">useRef</span><span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="n">react</span><span class="err">'</span><span class="o">;</span>
<span class="kn">import</span> <span class="err">{</span>
  <span class="nn">NavigationContainer</span><span class="o">,</span>
  <span class="n">useNavigationContainerRef</span><span class="o">,</span>
<span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="nd">@react</span><span class="o">-</span><span class="n">navigation</span><span class="o">/</span><span class="kd">native</span><span class="err">'</span><span class="o">;</span>

<span class="kd">const</span> <span class="nc">NavigatorMain</span> <span class="o">=</span> <span class="o">({</span><span class="n">initialRouteName</span><span class="o">})</span> <span class="o">=&gt;</span> <span class="o">{</span>  
  <span class="kd">const</span> <span class="n">navigationRef</span> <span class="o">=</span> <span class="n">useNavigationContainerRef</span><span class="o">();</span>
  <span class="n">useEffect</span><span class="o">(()</span> <span class="o">=&gt;</span> <span class="o">{</span>
    <span class="c1">// navigate 기능을 이용해 app.js에서 바뀐 진입점으로 화면을 전환</span>
    <span class="n">navigationRef</span><span class="o">.</span><span class="na">navigate</span><span class="o">(</span><span class="n">initialRouteName</span><span class="o">);</span> 
  <span class="o">},</span> <span class="o">[</span><span class="n">initialRouteName</span><span class="o">]);</span>
  <span class="k">return</span> <span class="o">(</span>    
    <span class="o">&lt;</span><span class="nc">NavigationContainer</span> <span class="n">ref</span><span class="o">={</span><span class="n">navigationRef</span><span class="o">}&gt;</span>
      <span class="o">...</span>
    <span class="o">&lt;/</span><span class="nc">NavigationContainer</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">};</span>
</code></pre></div></div>

<p>생각보다 간단하다. 이를 활용하면 두 곳으로의 분기 뿐만아니라 조건에 따라 여러 스크린으로의 분기도 가능하다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[보통 앱을 만들게 되면 현재 로그인한 상태에 따라 시작하는 Screen을 다르게 설정함으로써 UX를 개선한다. NavigatorAuth, NavigatorMain과 같이 로그인의 상태에 따라 진입하는 Navigator가 다른 경우에는 간단하다. 아래의 코드처럼 로그인 상태값에 따라 삼항연산자를 활용하여 진입점을 바꾸어주면 된다.]]></summary></entry><entry><title type="html">[React Native] 안드로이드 다크모드에서 텍스트 색이 모두 흰색으로 나오는 이슈</title><link href="http://localhost:4000/27th-post/" rel="alternate" type="text/html" title="[React Native] 안드로이드 다크모드에서 텍스트 색이 모두 흰색으로 나오는 이슈" /><published>2023-07-23T00:00:00+07:00</published><updated>2023-07-23T00:00:00+07:00</updated><id>http://localhost:4000/27th-post</id><content type="html" xml:base="http://localhost:4000/27th-post/"><![CDATA[<p>개발을 하다보면 다크모드를 고려하지 않고 개발을 하게 되는 경우가 있다. <br />
React Native에서는 <strong>텍스트의 기본 색상이 #000, 폰트크기는 14, fontWeight은 400</strong>이므로 <Text>태그에서 아무런 style 적용을 해주지 않더라도 기본 설정이 적용이 된다. 
그렇기에 기본 설정을 사용하는 경우에는 아무런 신경을 써주지 않아도 된다.</Text></p>

<p><strong>단, 문제는 안드로이드의 다크모드는 예외라는 것이다.</strong></p>

<p>이슈가 처음 보고되었을 때 적잖이 당황했던 적이 있다. 안드로이드 스튜디오에서도 따로 설정을 해주지 않는 이상 다크모드가 적용되어 있는 경우가 적으므로 따로 테스트해 볼 생각을 전혀 못했던 것이다.</p>

<p>다행히 구글링 해보니 같은 이슈를 겪는 사람들이 있어서 해결 방법을 정리해보았다.   <br />
먼저 수정할 파일은 <strong>[프로젝트폴더]/android/app/src/main/res/values/styles.xml</strong>이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">style</span> <span class="n">name</span><span class="o">=</span><span class="s">"AppTheme"</span> <span class="n">parent</span><span class="o">=</span><span class="s">"Theme.AppCompat.DayNight.NoActionBar"</span><span class="o">&gt;</span>
    <span class="o">&lt;!--</span> <span class="nc">Customize</span> <span class="n">your</span> <span class="n">theme</span> <span class="n">here</span><span class="o">.</span> <span class="o">--&gt;</span>
    <span class="o">&lt;</span><span class="n">item</span> <span class="n">name</span><span class="o">=</span><span class="s">"android:editTextBackground"</span><span class="o">&gt;</span><span class="nd">@drawable</span><span class="o">/</span><span class="n">rn_edit_text_material</span><span class="o">&lt;/</span><span class="n">item</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">item</span> <span class="n">name</span><span class="o">=</span><span class="s">"android:textColor"</span><span class="o">&gt;</span><span class="err">#</span><span class="mo">000</span><span class="o">&lt;/</span><span class="n">item</span><span class="o">&gt;</span> <span class="c1">// Text 태그의 폰트 색상</span>
    <span class="o">&lt;</span><span class="n">item</span> <span class="n">name</span><span class="o">=</span><span class="s">"android:textColorHint"</span><span class="o">&gt;</span><span class="err">#</span><span class="mi">999</span><span class="o">&lt;/</span><span class="n">item</span><span class="o">&gt;</span> <span class="c1">// TextInput 태그의 힌트 폰트 색상</span>
    <span class="o">&lt;</span><span class="n">item</span> <span class="n">name</span><span class="o">=</span><span class="s">"android:editTextColor"</span><span class="o">&gt;</span><span class="err">#</span><span class="mo">000</span><span class="o">&lt;/</span><span class="n">item</span><span class="o">&gt;</span> <span class="c1">// TextInput 태그의 폰트 색상</span>
<span class="o">&lt;/</span><span class="n">style</span><span class="o">&gt;</span>
</code></pre></div></div>
<p>이렇게 하면 폰트 문제가 깔끔하게 해결된다.</p>

<p>하지만 추가 테스트를 하다보니 이번에는 <strong>Alert.alert</strong>의 모달 배경에 회색 필터가 씌워지는 현상이 일어난다. (<a href="https://github.com/facebook/react-native/issues/31345">참고</a>) <br />
해결을 위해 수정할 파일은 <strong>[프로젝트폴더]/android/app/src/main/java/com/[앱이름]/MainApplication.java</strong>이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">androidx.appcompat.app.AppCompatDelegate</span><span class="o">;</span> <span class="c1">// 추가</span>

<span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
<span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
<span class="nc">SoLoader</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="cm">/* native exopackage */</span> <span class="kc">false</span><span class="o">);</span>
<span class="nc">ReactNativeFlipper</span><span class="o">.</span><span class="na">initializeFlipper</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">getReactNativeHost</span><span class="o">().</span><span class="na">getReactInstanceManager</span><span class="o">());</span>
<span class="nc">AppCompatDelegate</span><span class="o">.</span><span class="na">setDefaultNightMode</span><span class="o">(</span><span class="nc">AppCompatDelegate</span><span class="o">.</span><span class="na">MODE_NIGHT_NO</span><span class="o">);</span> <span class="c1">// 추가</span>
<span class="o">}</span>
</code></pre></div></div>
<p>위 코드는 안드로이드에서 앱의 다크모드를 강제로 막아준다.</p>

<p>애초부터 다크모드를 막아줄 것이면 위의 폰트 색상은 왜 적용해주었는가 싶지만 처음 설정은 전역 폰트의 색상 설정이 가능한만큼 검정색이 아닌 다른 색으로의 설정도 가능하다는 점에서 의의가 있다.<br />
보통 디자인에 따라 다르지만 순수 블랙을 사용하지 않고 <strong>#333</strong>등의 색상 코드를 사용하는 경우가 있기에 어찌되었든 알아두면 유용한 설정이다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[개발을 하다보면 다크모드를 고려하지 않고 개발을 하게 되는 경우가 있다. React Native에서는 텍스트의 기본 색상이 #000, 폰트크기는 14, fontWeight은 400이므로 태그에서 아무런 style 적용을 해주지 않더라도 기본 설정이 적용이 된다. 그렇기에 기본 설정을 사용하는 경우에는 아무런 신경을 써주지 않아도 된다.]]></summary></entry><entry><title type="html">[React Native] TextInput으로 받은 String을 Number 타입으로 바꿔주기</title><link href="http://localhost:4000/26th-post/" rel="alternate" type="text/html" title="[React Native] TextInput으로 받은 String을 Number 타입으로 바꿔주기" /><published>2023-07-20T00:00:00+07:00</published><updated>2023-07-20T00:00:00+07:00</updated><id>http://localhost:4000/26th-post</id><content type="html" xml:base="http://localhost:4000/26th-post/"><![CDATA[<p>TextInput 안에서 받은 <code class="language-plaintext highlighter-rouge">String</code> 타입 숫자값를 알아서 <code class="language-plaintext highlighter-rouge">Number</code> 타입으로 변경되게 하고 싶었는데 이렇게 해주니 에러가 났다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nc">TextInput</span>
    <span class="n">value</span><span class="o">={</span><span class="n">data</span><span class="o">.</span><span class="na">year</span><span class="o">}</span>
    <span class="n">onChangeText</span><span class="o">={</span><span class="n">text</span> <span class="o">=&gt;</span> <span class="n">setData</span><span class="o">({...</span><span class="na">data</span><span class="o">,</span> <span class="nl">year:</span> <span class="nc">Number</span><span class="o">(</span><span class="n">text</span><span class="o">)})}</span>
<span class="o">/&gt;</span>
</code></pre></div></div>

<h3 id="에러-️">에러 ⚠️</h3>
<p><strong>Warning: Failed prop type: Invalid prop value of type number supplied to ForwardRef(TextInput), expected string.</strong> <br />
입력값이 <code class="language-plaintext highlighter-rouge">Number</code>로 바껴서 저장이 되므로 value값에 들어가는 데이터가 <code class="language-plaintext highlighter-rouge">Number</code> 타입이 되는데 value값은 <code class="language-plaintext highlighter-rouge">String</code> 값이어야 하기 때문에 에러가 발생한다.</p>

<p>이를 해결하기 위해 아래를 시도해본다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nc">TextInput</span>
    <span class="n">value</span><span class="o">={</span><span class="n">data</span><span class="o">.</span><span class="na">year</span><span class="o">.</span><span class="na">toString</span><span class="o">()}</span>
    <span class="n">onChangeText</span><span class="o">={</span><span class="n">text</span> <span class="o">=&gt;</span> <span class="n">setData</span><span class="o">({...</span><span class="na">data</span><span class="o">,</span> <span class="nl">year:</span> <span class="nc">Number</span><span class="o">(</span><span class="n">text</span><span class="o">)})}</span>
<span class="o">/&gt;</span>
</code></pre></div></div>
<p>간단하고 좋다. 
하지만 키보드를 <code class="language-plaintext highlighter-rouge">numeric</code>으로 해주지 않으면 키보드 입력에서 <code class="language-plaintext highlighter-rouge">String</code> 값을 잘못 넣는 순간 바로 <code class="language-plaintext highlighter-rouge">NaN</code>이 떠서 지워지지 않는 현상이 일어난다.<br />
잘 되기는 하지만 무언가 찝찝하기는 하다.<br />
좀 더 고민을 해보면, 입력을 끝낼 때 <code class="language-plaintext highlighter-rouge">Number</code>로 타입변환을 해주는 방법도 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">TextInput</span>
    <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">.</span><span class="nx">year</span><span class="p">.</span><span class="nx">toString</span><span class="p">()}</span>    
    <span class="nx">onChangeText</span><span class="o">=</span><span class="p">{</span><span class="nx">text</span> <span class="o">=&gt;</span> <span class="nx">setData</span><span class="p">({...</span><span class="nx">data</span><span class="p">,</span> <span class="na">year</span><span class="p">:</span> <span class="nx">text</span><span class="p">})}</span>
    <span class="nx">onEndEditing</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span>
      <span class="nx">setData</span><span class="p">({...</span><span class="nx">data</span><span class="p">,</span> <span class="na">year</span><span class="p">:</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">year</span><span class="p">)})</span>
    <span class="p">}</span>    
    <span class="p">...</span>
<span class="o">/&gt;</span>
</code></pre></div></div>

<p>이 방법에서는 <code class="language-plaintext highlighter-rouge">String</code> 값을 입력하더라도 <code class="language-plaintext highlighter-rouge">NaN</code>이 나타나지 않는다. 하지만 <code class="language-plaintext highlighter-rouge">Number</code>로 형변환을 해야하는 경우는 보통 타입이 강제되는 경우가 많기 때문에 (API request 등) NaN이 안 나타난다고 해서 안심할 만한 상황은 아니다. 오히려 키보드를 <code class="language-plaintext highlighter-rouge">numeric</code>으로 하고 이중으로 타입 검사를 해주는 편이 안전하다.</p>

<p>이러한 경우는 엣지 케이스가 많기 때문에 항상 이것저것 테스트 시나리오를 고려해야한다. 
예를 들면 <code class="language-plaintext highlighter-rouge">numeric</code> 키보드에서 숫자만 받는다고 타입 검사를 안하다가 복사 붙여넣기를 하는 유저를 만나 오류를 직면할 수도 있는 것이다.</p>

<p>이렇게 정형화되어 있는 패턴에서는 TDD가 필요한 이유를 절실히 느낀다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[TextInput 안에서 받은 String 타입 숫자값를 알아서 Number 타입으로 변경되게 하고 싶었는데 이렇게 해주니 에러가 났다.]]></summary></entry><entry><title type="html">[k8s] 새로운 워커노드를 추가하여 서버 증설하기</title><link href="http://localhost:4000/25th-post/" rel="alternate" type="text/html" title="[k8s] 새로운 워커노드를 추가하여 서버 증설하기" /><published>2023-07-04T00:00:00+07:00</published><updated>2023-07-04T00:00:00+07:00</updated><id>http://localhost:4000/25th-post</id><content type="html" xml:base="http://localhost:4000/25th-post/"><![CDATA[<p>마스터 노드의 설정이 이미 되어 있고 추가할 워커노드의 OS가 우분투 20.04 버전인 경우를 기준으로 설명하겠다.</p>

<hr />
<hr />
<h1 id="-요약">📖 요약</h1>
<p>● docker<br />
● kubelet<br />
● kubeadm<br />
● kubectl<br />
새로운 워커노드에 위 4가지를 설치해준다.<br />
그리고 마스터 노드에서 토큰을 발급하여 새로 연결할 워커노드에 입력해주면 끝이다.</p>

<hr />
<hr />

<h1 id="-진행">🎬 진행</h1>
<p>생각보다 몹시 간단하다. 이제 하나하나 차근차근 진행해보자.</p>

<h3 id="docker-설치">docker 설치</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class="nb">sudo </span>gpg <span class="nt">--dearmor</span> <span class="nt">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg
<span class="nb">echo</span> <span class="se">\</span>
  <span class="s2">"deb [arch=</span><span class="si">$(</span>dpkg <span class="nt">--print-architecture</span><span class="si">)</span><span class="s2"> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu </span><span class="se">\</span><span class="s2">
  </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2"> stable"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/docker.list <span class="o">&gt;</span> /dev/null
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>docker-ce docker-ce-cli containerd.io
<span class="nb">sudo </span>docker version
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>docker
<span class="nb">sudo </span>systemctl start docker
</code></pre></div></div>

<h3 id="kubelet-kubeadm-kubectl-설치">kubelet, kubeadm, kubectl 설치</h3>
<p>한 줄씩 잘 입력해준다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> apt-transport-https ca-certificates curl
curl <span class="nt">-s</span> https://packages.cloud.google.com/apt/doc/apt-key.gpg | <span class="nb">sudo </span>apt-key add -
<span class="nb">echo</span> <span class="s2">"deb http://apt.kubernetes.io/ kubernetes-xenial main"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/kubernetes.list
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> kubelet kubeadm kubectl
<span class="nb">sudo </span>apt-mark hold kubelet kubeadm kubectl
<span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl restart kubelet
</code></pre></div></div>

<h3 id="토큰-발급-및-등록">토큰 발급 및 등록</h3>
<p>우선, 마스터 노드에서 토큰을 발급한다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>kubeadm token create <span class="nt">--print-join-command</span>
</code></pre></div></div>
<p>이렇게 하면 <code class="language-plaintext highlighter-rouge">kubeadm join &lt;Kubernetes API Server:PORT&gt; --token &lt;Token 값&gt; --discovery-token-ca-cert-hash sha256:&lt;Hash 값&gt;</code> 이러한 형태의 결과값이 나오는데 그대로 복사해서 새로운 워커노드 터미널에 붙여넣기 해주면 된다.</p>

<p>각각의 값은 다음과 같이 확인할 수 있다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># kubectl이 바라보는 API 서버 주소</span>
kubectl cluster-info
<span class="c"># token 값 확인</span>
kubeadm token list
<span class="c"># hash 값 확인</span>
openssl x509 <span class="nt">-pubkey</span> <span class="nt">-in</span> /etc/kubernetes/pki/ca.crt | openssl rsa <span class="nt">-pubin</span> <span class="nt">-outform</span> der 2&gt;/dev/null | openssl dgst <span class="nt">-sha256</span> <span class="nt">-hex</span> | <span class="nb">sed</span> <span class="s1">'s/^.* //'</span>
</code></pre></div></div>

<h3 id="-에러">🔒 에러</h3>
<p>위의 과정에서 아마도 다음과 같은 에러가 발생할 것이다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error execution phase preflight: <span class="o">[</span>preflight] Some fatal errors occurred:
<span class="o">[</span>ERROR CRI]: container runtime is not running: output: <span class="nb">time</span><span class="o">=</span><span class="s2">"2020-11-25T12:58:32Z"</span> <span class="nv">level</span><span class="o">=</span>fatal <span class="nv">msg</span><span class="o">=</span><span class="s2">"getting status of runtime failed: rpc error: code = Unimplemented desc = unknown service runtime.v1alpha2.RuntimeService"</span>
, error: <span class="nb">exit </span>status 1
</code></pre></div></div>

<h3 id="-해결">🔑 해결</h3>
<p>아래와 같이 해결하면 된다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo rm</span> /etc/containerd/config.toml
<span class="nb">sudo </span>systemctl restart containerd
</code></pre></div></div>

<p>항상 느끼지만 대부분의 쿠버네티스 오류는 kubelet, docker, containerd, calico 이 네가지에서 자주 발생하는 것 같다.<br />
마지막으로 마스터노드에 들어가서 <code class="language-plaintext highlighter-rouge">kubectl get node</code>를 해보자. 잘 인식이 된다면 성공이다.</p>

<h1 id="참고">참고</h1>
<p><a href="https://confluence.curvc.com/pages/releaseview.action?pageId=98048155">Ubuntu에서 쿠버네티스(k8s) 설치 가이드</a></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Kubernetes, On-premise" /><summary type="html"><![CDATA[마스터 노드의 설정이 이미 되어 있고 추가할 워커노드의 OS가 우분투 20.04 버전인 경우를 기준으로 설명하겠다.]]></summary></entry><entry><title type="html">[React Native] 안드로이드 스튜디오 Add configuration에서 No module만 선택 가능한 현상</title><link href="http://localhost:4000/24th-post/" rel="alternate" type="text/html" title="[React Native] 안드로이드 스튜디오 Add configuration에서 No module만 선택 가능한 현상" /><published>2023-07-03T00:00:00+07:00</published><updated>2023-07-03T00:00:00+07:00</updated><id>http://localhost:4000/24th-post</id><content type="html" xml:base="http://localhost:4000/24th-post/"><![CDATA[<h3 id="-에러">🔒 에러</h3>

<p>React Native로 앱을 만들다보면 iOS 시뮬레이터가 너무 편해서 안드로이드를 소홀히 하게 되는 때가 있다.<br />
안드로이드 apk 파일을 건네줄 필요가 있어서 오랜만에 안드로이드 스튜디오를 켰는데 이상하게 Run 아이콘이 있어야 할 자리에 <code class="language-plaintext highlighter-rouge">add configuration</code> 밖에 보이지 않았다.
인터넷을 찾아보니 module을 추가해주면 된다는데 아무리 모듈을 추가하려고 해도 선택지에 <code class="language-plaintext highlighter-rouge">No module</code> 이외에 아무것도 뜨지 않는다.</p>

<h3 id="-해결">🔑 해결</h3>

<p>그렇다. 사람은 가끔 바보가 된다. VScode 켜듯이 아무 생각 없이 React Native 프로젝트 폴더를 열어버렸던 것이다.<br />
<strong>안드로이드 스튜디오에서는 프로젝터 폴더 안의 android 폴더를 열어주어야한다.</strong><br />
마치 Xcode에서 ios 폴더를 열어주는 것과 같다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, Android Studio" /><summary type="html"><![CDATA[🔒 에러]]></summary></entry><entry><title type="html">PyQt5가 다운로드 되지 않는 M1 맥북 이슈</title><link href="http://localhost:4000/23th-post/" rel="alternate" type="text/html" title="PyQt5가 다운로드 되지 않는 M1 맥북 이슈" /><published>2023-05-09T00:00:00+07:00</published><updated>2023-05-09T00:00:00+07:00</updated><id>http://localhost:4000/23th-post</id><content type="html" xml:base="http://localhost:4000/23th-post/"><![CDATA[<h3 id="-에러">🔒 에러</h3>

<p><strong>pip install PyQt5를 해도 Preparing metadata(pyproject.toml)에서 넘어가지 않는 M1 맥북 이슈</strong>를 만났다. <em>(metadata-generation-failed, subprocess-exited-with-error)</em><br />
문제 해결에 앞서 라이브러리 선택의 여유가 있는 사람들은 Pyside6나 PyQt6도 고려해보길 권한다.</p>

<p>여러가지로 테스트 해본 결과는 다음과 같다.</p>

<p>📄 테스트 리스트</p>
<ul>
  <li>pip install pyqt5 (실패)</li>
  <li>pip3 install pyqt5 (실패)</li>
  <li>python -m pip install pyqt5 (실패)</li>
  <li>python3 -m pip install pyqt5 (실패)</li>
</ul>

<h3 id="-해결">🔑 해결</h3>
<p>결국 해결방안은 Homebrew를 이용하는 것이었다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">arch</span> <span class="nt">-arm64</span> brew <span class="nb">install </span>pyqt5
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">pip list</code>, <code class="language-plaintext highlighter-rouge">brew list</code>로 잘 설치가 되었는지 확인한다. 설치가 안되었다면 brew reinstall로 재설치를 진행한다.<br />
만약 (conda)가상환경을 사용한다면 <code class="language-plaintext highlighter-rouge">python -m pip list</code> 와 <code class="language-plaintext highlighter-rouge">python3 -m pip list</code>를 둘 다 확인하여 어느곳에 설치되었는지 보고 상황에 맞게 python 또는 python3 명령어를 사용해야한다. 가상 환경이 아닌 로컬에서는 보통 <code class="language-plaintext highlighter-rouge">python -m pip list</code>와  <code class="language-plaintext highlighter-rouge">python3 -m pip list</code>의 결과가 같으므로 python과 python3 어느쪽을 사용하든 결과는 같다(따로 설정이 필요할 수 있다). 이후로 다른 라이브러리를 설치할 때도 명령어 버전에 맞게 설치해 주면 된다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> pip <span class="nb">install</span> <span class="o">[</span>라이브러리] 
혹은
python3 <span class="nt">-m</span> pip <span class="nb">install</span> <span class="o">[</span>라이브러리]
</code></pre></div></div>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Python, pip" /><summary type="html"><![CDATA[🔒 에러]]></summary></entry><entry><title type="html">[React Native] 리액트 네이티브에서 달력 구현하기</title><link href="http://localhost:4000/22th-post/" rel="alternate" type="text/html" title="[React Native] 리액트 네이티브에서 달력 구현하기" /><published>2023-04-24T00:00:00+07:00</published><updated>2023-04-24T00:00:00+07:00</updated><id>http://localhost:4000/22th-post</id><content type="html" xml:base="http://localhost:4000/22th-post/"><![CDATA[<h1 id="라이브러리">라이브러리</h1>
<hr />
<p>리액트 네이티브로 앱을 만들 때는 달력을 구현해야할 일이 생각보다 자주 생긴다. 어떤 앱이든 시간의 흐름에 따라 과거 정보를 조회하는 경우가 많기 때문인데, 그렇기에 직접 구현해두면 두고두고 쓸 일이 많을 것이다. 물론 훌륭한 라이브러리가 많기 때문에 시간이 충분하지 않은 사람은 다른 사람의 힘을 빌리는 것도 때론 중요하다. 필자 또한 다른 사람이 짜놓은 코드를 빌려다가 내부만 조금 고쳐쓰는 경우가 많다.<br />
그런 의미에서 오늘은 유명한 라이브러리 중 하나인 <a href="https://github.com/wix/react-native-calendars"><code class="language-plaintext highlighter-rouge">react-native-calendars</code></a>를 소개한다.</p>

<h1 id="설치">설치</h1>
<hr />
<p>npm을 통해 설치해준다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i react-native-calendars
</code></pre></div></div>
<p>기본적인 사용법은 매우 간단하고 홈페이지에 자세한 설명이 나와있으니 참고하면 된다.</p>

<h1 id="기능-구현">기능 구현</h1>
<hr />
<p>문제가 있다면 날짜를 클릭하였을 때 onPress 이벤트 설정을 직접해주어야 한다는 것이었고 기본 모듈에서는 달력 위의 숫자들을 눌러도 아무런 일도 일어나지 않는다. Agenda 기능도 지원하고 있으나 원하는 형태가 아니어서 어쩔 수 없이 구글링을 통해 직접 구현하였다. (<a href="https://devbksheen.tistory.com/entry/React-Native-%EB%8B%AC%EB%A0%A5-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0">참고</a>) 예시 코드는 다음과 같다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span><span class="nx">useState</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">View</span><span class="p">,</span> <span class="nx">Text</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">SafeAreaView</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native-safe-area-context</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">CalendarList</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native-calendars</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CalendarView</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">posts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">제목입니다.</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">contents</span><span class="p">:</span> <span class="dl">'</span><span class="s1">내용입니다.</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">date</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2022-10-08</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">제목입니다.</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">contents</span><span class="p">:</span> <span class="dl">'</span><span class="s1">내용입니다.</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">date</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2022-10-09</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">];</span>

<span class="c1">// 클릭한 날짜를 담는 변수</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">date</span><span class="p">,</span> <span class="nx">setDate</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">();</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">selectedDate</span><span class="p">,</span> <span class="nx">setSelectedDate</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">();</span>

<span class="c1">// posts 안에 들어있는 모든 일정을 달력에 표시하기 위한 변수</span>
  <span class="kd">const</span> <span class="nx">markedDates</span> <span class="o">=</span> <span class="nx">posts</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">current</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">acc</span><span class="p">[</span><span class="nx">current</span><span class="p">.</span><span class="nx">date</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="na">marked</span><span class="p">:</span> <span class="kc">true</span><span class="p">};</span>
    <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
  <span class="p">},</span> <span class="p">{});</span>

<span class="c1">// 날짜가 선택되었을 때 해당 날짜에 배경색을 입히기 위한 변수</span>
  <span class="kd">const</span> <span class="nx">markedSelectedDates</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">...</span><span class="nx">markedDates</span><span class="p">,</span>
    <span class="p">[</span><span class="nx">selectedDate</span><span class="p">]:</span> <span class="p">{</span>
      <span class="na">selected</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">marked</span><span class="p">:</span> <span class="nx">markedDates</span><span class="p">[</span><span class="nx">selectedDate</span><span class="p">]?.</span><span class="nx">marked</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">SafeAreaView</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="na">height</span><span class="p">:</span> <span class="dl">'</span><span class="s1">100%</span><span class="dl">'</span><span class="p">}}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">CalendarList</span>
        <span class="nx">horizontal</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span>
        <span class="nx">pagingEnabled</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span>
        <span class="nx">markedDates</span><span class="o">=</span><span class="p">{</span><span class="nx">markedSelectedDates</span><span class="p">}</span>
        <span class="nx">onDayPress</span><span class="o">=</span><span class="p">{</span><span class="nx">day</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">setDate</span><span class="p">(</span><span class="nx">day</span><span class="p">);</span>
          <span class="nx">setSelectedDate</span><span class="p">(</span><span class="nx">day</span><span class="p">.</span><span class="nx">dateString</span><span class="p">);</span>
        <span class="p">}}</span>
        <span class="nx">theme</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span>
          <span class="na">selectedDayBackgroundColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#959CA7</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">monthTextColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#959CA7</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">textDayFontWeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">500</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">textMonthFontWeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">600</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">textDayHeaderFontWeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">300</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">textMonthFontSize</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
        <span class="p">}}</span>
      <span class="sr">/</span><span class="err">&gt;
</span>      <span class="p">{</span><span class="nx">date</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="na">marginLeft</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span> <span class="na">marginTop</span><span class="p">:</span> <span class="mi">10</span><span class="p">}}</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="na">fontSize</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span> <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#959CA7</span><span class="dl">'</span><span class="p">,</span> <span class="na">textAlign</span><span class="p">:</span> <span class="dl">'</span><span class="s1">right</span><span class="dl">'</span><span class="p">}}</span><span class="o">&gt;</span>
            <span class="na">Test</span><span class="p">:</span> <span class="nx">현재</span> <span class="nx">선택하신</span> <span class="nx">날짜는</span> <span class="p">{</span><span class="nx">date</span><span class="p">.</span><span class="nx">day</span><span class="p">}</span><span class="nx">일</span> <span class="nx">입니다</span><span class="p">.</span>
          <span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/View</span><span class="err">&gt;
</span>      <span class="p">)}</span>
    <span class="o">&lt;</span><span class="sr">/SafeAreaView</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CalendarView</span><span class="p">;</span>
</code></pre></div></div>

<h1 id="버그">버그</h1>
<hr />

<p>커스터마이징을 적용할 때는 공식 문서 말고도 내부 코드를 뜯어보는 것을 추천한다.</p>

<h3 id="-에러-1">🔒 에러 1</h3>

<p>WeekCalendar에서 헤더를 한국어로 바꾸면 컨테이너와 영역이 겹치는 일이 발생한다. <a href="https://wix.github.io/react-native-calendars/docs/Components/Calendar">공식 문서</a>에서는 스타일 수정 방법에 대해 아래와 같이 설명하고 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">theme</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span>
  <span class="na">arrowColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">white</span><span class="dl">'</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">stylesheet.calendar.header</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">week</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">marginTop</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
      <span class="na">flexDirection</span><span class="p">:</span> <span class="dl">'</span><span class="s1">row</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">justifyContent</span><span class="p">:</span> <span class="dl">'</span><span class="s1">space-between</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span> <span class="p">}</span>
</code></pre></div></div>
<p>하지만 이는 WeekCalaendar에서는 적용이 되지 않는다. 해당 기능이 위치한 style.js 소스코드를 살펴보니 아래와 같이 export 방식이 달랐다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...(</span><span class="nx">theme</span><span class="p">?.</span><span class="nx">stylesheet</span><span class="p">?.</span><span class="nx">expandable</span><span class="p">?.</span><span class="nx">main</span> <span class="o">||</span> <span class="p">{})</span>
</code></pre></div></div>

<h3 id="-해결">🔑 해결</h3>
<p>node_modules 폴더 안을 고치는 것은 관리 이슈가 커지기 때문에 아래와 같이 내 코드에서 직접 설정해주는 방식을 택하였다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">CalendarProvider</span>
  <span class="nx">date</span><span class="o">=</span><span class="p">{</span><span class="nx">date</span><span class="p">}</span>
  <span class="nx">onDateChanged</span><span class="o">=</span><span class="p">{</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="nx">setDate</span><span class="p">(</span><span class="nx">d</span><span class="p">)}</span>
  <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="na">flex</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span> <span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">WeekCalendar</span>
    <span class="nx">displayLoadingIndicator</span>
    <span class="nx">allowShadow</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span>
    <span class="nx">theme</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span>
      <span class="na">textDayFontSize</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span>
      <span class="na">textDayHeaderFontSize</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span>
      <span class="na">stylesheet</span><span class="p">:</span> <span class="p">{</span><span class="na">expandable</span><span class="p">:</span> <span class="p">{</span><span class="na">main</span><span class="p">:</span> <span class="p">{</span><span class="na">container</span><span class="p">:</span> <span class="p">{</span><span class="na">marginTop</span><span class="p">:</span> <span class="mi">5</span><span class="p">}}}},</span> <span class="c1">// &lt;- 여기</span>
    <span class="p">}</span> <span class="p">}</span>
  <span class="sr">/</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/CalendarProvider</span><span class="err">&gt;
</span></code></pre></div></div>

<p>theme 안에서 <code class="language-plaintext highlighter-rouge">stylesheet: {expandable: {main: {container: {marginTop: 5}}}}</code>와 같이 설정해주면 된다.</p>

<h3 id="-에러-2">🔒 에러 2</h3>

<p>WeekCalendar을 사용할 때 로딩이 너무 오래 걸리는 이슈가 존재한다. 📌 <a href="https://github.com/wix/react-native-calendars/issues/2214">깃허브 이슈</a></p>

<h3 id="-해결-1">🔑 해결</h3>
<p>이는 RecyclerListView에서 너무 많은 페이지가 미리 렌더링되고 있기 때문이다. RecyclerListView에 대한 정보는 <a href="https://github.com/Flipkart/recyclerlistview">다음</a>을 확인하자. 해당 페이지에서는 renderAheadOffset의 값을 가능한 낮게 설정하는 것을 권하고 있다. 높게 설정할수록 계산 비용이 많아지므로 로딩이 오래 걸리게 된다.<br />
따라서 <code class="language-plaintext highlighter-rouge">node_modules/react-native-calendars/src/infinite-list/index.js</code>로 이동하여 RecyclerListView의 prop을 아래와 같이 바꾸어주면 된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">RecyclerListView</span> 
<span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">listRef</span><span class="p">}</span> 
<span class="nx">isHorizontal</span><span class="o">=</span><span class="p">{</span><span class="nx">isHorizontal</span><span class="p">}</span> 
<span class="p">...</span> 
<span class="nx">renderAheadOffset</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span> <span class="o">*</span> <span class="nx">pageWidth</span><span class="p">}</span>   <span class="c1">// &lt;- 숫자를 0으로 수정한다.</span>
<span class="p">...</span><span class="o">/&gt;</span>
</code></pre></div></div>

<p>누군가에게는 도움이 되었길 바란다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, react-native-calendars" /><summary type="html"><![CDATA[라이브러리 리액트 네이티브로 앱을 만들 때는 달력을 구현해야할 일이 생각보다 자주 생긴다. 어떤 앱이든 시간의 흐름에 따라 과거 정보를 조회하는 경우가 많기 때문인데, 그렇기에 직접 구현해두면 두고두고 쓸 일이 많을 것이다. 물론 훌륭한 라이브러리가 많기 때문에 시간이 충분하지 않은 사람은 다른 사람의 힘을 빌리는 것도 때론 중요하다. 필자 또한 다른 사람이 짜놓은 코드를 빌려다가 내부만 조금 고쳐쓰는 경우가 많다. 그런 의미에서 오늘은 유명한 라이브러리 중 하나인 react-native-calendars를 소개한다.]]></summary></entry><entry><title type="html">[Jenkins] 젠킨스에서 도커 이미지를 빌드할 때 발생하는 이슈들</title><link href="http://localhost:4000/21th-post/" rel="alternate" type="text/html" title="[Jenkins] 젠킨스에서 도커 이미지를 빌드할 때 발생하는 이슈들" /><published>2023-04-02T00:00:00+07:00</published><updated>2023-04-02T00:00:00+07:00</updated><id>http://localhost:4000/21th-post</id><content type="html" xml:base="http://localhost:4000/21th-post/"><![CDATA[<h1 id="작업-환경">작업 환경</h1>
<hr />
<p>젠킨스를 통해 깃허브에서 도커 이미지를 빌드하여 이미지 저장소로 올리는 과정에서 발생하는 이슈들을 다룹니다.<br />
이 글은 CI 파이프라인 구축을 설명하고 있지 않습니다. 환경 구축은 아래 출처를 참고해주세요.</p>

<p>● <a href="https://smoh.tistory.com/420">Jenkins로 Docker 이미지 빌드하기</a><br />
● <a href="https://zunoxi.tistory.com/131">젠킨스 연동 및 push 하기</a></p>

<h1 id="설정-파일">설정 파일</h1>
<hr />

<p>젠킨스가 깃허브에서 코드를 받아와서 도커 이미지를 빌드할 때 필요로 하는 파일이 두 가지 존재한다. 하나는 Jenkinsfile이고 나머지는 Dockerfile이다. 두 파일은 코드의 루트 경로에 위치하고 있어야 한다.<br />
처음 작성할 때 막막했던 기억이 있어 누군가는 필요할 것 같아 첨부해 둔다.</p>

<h3 id="-jenkinsfile">📌 Jenkinsfile</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">app</span>
<span class="n">node</span> <span class="p">{</span>        
    <span class="n">stage</span><span class="p">(</span><span class="s">'Checkout'</span><span class="p">){</span>            
        <span class="n">checkout</span> <span class="n">scm</span>            
    <span class="p">}</span>
    
    <span class="n">stage</span><span class="p">(</span><span class="s">'Build image'</span><span class="p">){</span>                       
        <span class="n">app</span> <span class="o">=</span> <span class="n">docker</span><span class="p">.</span><span class="n">build</span><span class="p">(</span><span class="s">"[저장소도메인]/[프로젝트명]/[이미지명]"</span><span class="p">)</span>
        <span class="c1"># 예를 들면 "harbor.test.io/example-project/test-image"
</span>        <span class="c1"># 하버의 경우 프로젝트는 사전에 생성해 놓아야하지만 이미지는 자동 생성된다.
</span>    <span class="p">}</span>
	
    <span class="c1"># withRegistry 안에는 저장소 도메인과 젠킨스에 미리 등록해 놓은 Credential의 ID를 적어준다.
</span>    <span class="c1"># 예를 들면 docker.withRegistry('https://harbor.test.io', 'Harbor')
</span>    <span class="n">stage</span><span class="p">(</span><span class="s">'Push image'</span><span class="p">){</span> 
        <span class="n">docker</span><span class="p">.</span><span class="n">withRegistry</span><span class="p">(</span><span class="s">'https://[저장소도메인]'</span><span class="p">,</span> <span class="s">'[CredID]'</span><span class="p">){</span>
            <span class="n">app</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="s">"${env.BUILD_NUMBER}"</span><span class="p">)</span>
            <span class="n">app</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="s">"latest"</span><span class="p">)</span>
        <span class="p">}</span>                
    <span class="p">}</span>		
<span class="p">}</span>
</code></pre></div></div>

<p>모든 이미지에는 젠킨스 프로세스 번호가 붙고 가장 최근에 올라간 도커 이미지에만 latest 태그가 붙는다.</p>

<h3 id="-dockerfile">📌 Dockerfile</h3>
<p>Dockerfile은 구축하고자 하는 환경에 따라 이미지 파일이 다를 수 있다. 본인의 환경에 맞는 이미지를 가져오자.<br />
아래는 python이 깔려있는 nodeJS 이미지를 이용하여 서버를 실행하는 예시이다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FROM</span> <span class="n">nikolaik</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">nodejs</span><span class="p">:</span><span class="n">python3</span><span class="p">.</span><span class="mi">8</span><span class="o">-</span><span class="n">nodejs16</span> 

<span class="n">WORKDIR</span> <span class="o">/</span><span class="n">app</span>

<span class="n">COPY</span> <span class="p">.</span> <span class="o">/</span><span class="n">app</span>

<span class="n">RUN</span> <span class="n">npm</span> <span class="n">install</span> <span class="o">&amp;&amp;</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">r</span> <span class="n">requirements</span><span class="p">.</span><span class="n">txt</span>

<span class="n">EXPOSE</span> <span class="mi">8080</span>

<span class="n">CMD</span> <span class="p">[</span> <span class="s">"node"</span><span class="p">,</span> <span class="s">"app.js"</span> <span class="p">]</span>
</code></pre></div></div>
<p>COPY를 할 때에는 COPY [복사해 올 곳] [복사해 갈 곳] 순으로 적는데 복사해 올 곳은 상대경로로, 복사해 갈 곳은 절대경로로 적는 것이 원칙이다. 꼭 지키지 않아도 동작에는 이상이 없긴 하다.</p>

<h1 id="에러">에러</h1>
<hr />

<p>다음은 위의 구축 과정에서 발생하기 쉬운 에러와 그 해결 방안을 설명한다.</p>

<h3 id="-에러-1">🔒 에러 1</h3>

<p><strong><code class="language-plaintext highlighter-rouge">groovy.lang.missingpropertyexception: No such property: docker for class: groovy.lang.Binding</code></strong></p>

<p>🔑 해결: Jenkins에서 Docker Pipeline 플러그인 설치 (<a href="https://may9noy.tistory.com/990">참고</a>)</p>

<h3 id="-에러-2">🔒 에러 2</h3>

<p><strong><code class="language-plaintext highlighter-rouge">/var/run/docker.sock: connect: permission denied</code></strong></p>

<p>🔑 해결: 모든 노드에서 sudo chmod 666 /var/run/docker.sock로 접근 권한 허용(<a href="https://may9noy.tistory.com/990">참고</a>)</p>

<h3 id="-에러-3">🔒 에러 3</h3>

<p><strong><code class="language-plaintext highlighter-rouge">script.sh 1 docker not found</code></strong></p>

<p>🔑 해결: jenkins deployment 파일에서 volume mount를 추가 (<a href="https://anfrhrl5555.tistory.com/137">참고</a>)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">apiVersion</span><span class="p">:</span> <span class="n">apps</span><span class="o">/</span><span class="n">v1</span>
<span class="n">kind</span><span class="p">:</span> <span class="n">Deployment</span>
<span class="n">metadata</span><span class="p">:</span>
  <span class="n">name</span><span class="p">:</span> <span class="n">jenkins</span>
  <span class="n">namespace</span><span class="p">:</span> <span class="n">jenkins</span>
<span class="n">spec</span><span class="p">:</span>
  <span class="n">replicas</span><span class="p">:</span> <span class="mi">1</span>
  <span class="n">selector</span><span class="p">:</span>
    <span class="n">matchLabels</span><span class="p">:</span>
      <span class="n">app</span><span class="p">:</span> <span class="n">jenkins</span>
  <span class="n">template</span><span class="p">:</span>
    <span class="n">metadata</span><span class="p">:</span>
      <span class="n">labels</span><span class="p">:</span>
        <span class="n">app</span><span class="p">:</span> <span class="n">jenkins</span>
    <span class="n">spec</span><span class="p">:</span>
      <span class="n">containers</span><span class="p">:</span>
      <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">jenkins</span>
        <span class="n">image</span><span class="p">:</span> <span class="n">jenkins</span><span class="o">/</span><span class="n">jenkins</span><span class="p">:</span><span class="n">lts</span>
        <span class="n">ports</span><span class="p">:</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">httpe</span><span class="o">-</span><span class="n">port</span>
            <span class="n">containerPort</span><span class="p">:</span> <span class="mi">8080</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">jnlp</span><span class="o">-</span><span class="n">port</span>
            <span class="n">containerPort</span><span class="p">:</span> <span class="mi">50000</span>
        <span class="n">volumeMounts</span><span class="p">:</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">jenkins</span><span class="o">-</span><span class="n">data</span>
            <span class="n">mountPath</span><span class="p">:</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">jenkins_home</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">-</span><span class="n">socket</span>
            <span class="n">mountPath</span><span class="p">:</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">docker</span><span class="p">.</span><span class="n">sock</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">-</span><span class="nb">bin</span>
            <span class="n">mountPath</span><span class="p">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">docker</span> 
      <span class="n">volumes</span><span class="p">:</span>
        <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">jenkins</span><span class="o">-</span><span class="n">data</span>
          <span class="n">persistentVolumeClaim</span><span class="p">:</span>
            <span class="n">claimName</span><span class="p">:</span> <span class="n">jenkins</span><span class="o">-</span><span class="n">pvc</span>
        <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">-</span><span class="n">socket</span>
          <span class="n">hostPath</span><span class="p">:</span>
            <span class="n">path</span><span class="p">:</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">docker</span><span class="p">.</span><span class="n">sock</span>
            <span class="nb">type</span><span class="p">:</span> <span class="n">Socket</span>
        <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">-</span><span class="nb">bin</span>
          <span class="n">hostPath</span><span class="p">:</span>
            <span class="n">path</span><span class="p">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">docker</span>
            <span class="nb">type</span><span class="p">:</span> <span class="n">File</span>
</code></pre></div></div>

<h3 id="-에러-4">🔒 에러 4</h3>

<p><strong><code class="language-plaintext highlighter-rouge">stat /var/lib/docker/tmp: no such file or directory</code></strong></p>

<p>🔑 해결: Jenkins 파드가 돌고 있는 노드에 도커가 제대로 실행되고 있지 않는 상태일 가능성이 높다. 해당 노드에서 sudo service docker restart를 한 뒤 /var/lib/docker 파일 안에 파일이 제대로 생성되어 있는지 확인한다. docker파일은 sudo chmod 755 docker로 접근 권한을 주어야 확인이 가능하다.</p>

<h1 id="결과">결과</h1>

<p>33번만에 성공했다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Jenkins, Docker, Harbor" /><summary type="html"><![CDATA[작업 환경 젠킨스를 통해 깃허브에서 도커 이미지를 빌드하여 이미지 저장소로 올리는 과정에서 발생하는 이슈들을 다룹니다. 이 글은 CI 파이프라인 구축을 설명하고 있지 않습니다. 환경 구축은 아래 출처를 참고해주세요.]]></summary></entry></feed>