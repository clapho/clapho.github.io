<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2024-02-21T21:43:31+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">froggydisk</title><subtitle>This is for frogs in the world.</subtitle><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><entry><title type="html">[React Native] 컴포넌트 속성을 통해 전달하는 문자열의 줄바꿈 방법</title><link href="http://localhost:4000/transmit-component/" rel="alternate" type="text/html" title="[React Native] 컴포넌트 속성을 통해 전달하는 문자열의 줄바꿈 방법" /><published>2024-02-21T00:00:00+07:00</published><updated>2024-02-21T00:00:00+07:00</updated><id>http://localhost:4000/transmit-component</id><content type="html" xml:base="http://localhost:4000/transmit-component/"><![CDATA[<p>특정 컴포넌트를 구현할 때 속성을 통해 문자열을 보내줄 때가 있다. 보통 config로 따로 저장해놓은 고정 문구를 넣어주는 경우에 많이 쓰인다.</p>

<p>이 경우에 디자인 상의 이유로 줄바꿈을 자주 사용하게 되는데, 따옴표 안에 개행문자<code class="language-plaintext highlighter-rouge">\n</code>를 넣어도 아무 일도 일어나지 않아 종종 당황하곤 한다. 이는 개행 문자가 그대로 문자열로 인식되기 때문이다.</p>

<p>줄바꿈이 제대로 이루어지게 하기 위해서는 <strong>중괄호</strong>를 사용해 주어야 한다. 이런식으로 말이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nc">OnBoardingPage</span>
  <span class="n">subtitle</span><span class="o">={</span>
    <span class="err">'</span><span class="n">집에서</span> <span class="n">얼마나</span> <span class="n">걷고</span><span class="o">,</span> <span class="n">뛰고</span><span class="o">,</span> <span class="n">쉬었는지</span> <span class="n">등의</span><span class="err">\</span><span class="n">n정보를</span> <span class="n">실시간으로</span> <span class="n">분석해드려요</span><span class="o">.</span><span class="err">'</span>
  <span class="o">}</span>
<span class="o">/&gt;</span>
</code></pre></div></div>

<blockquote>
  <p>chatGPT는 그 이유에 대해 이렇게 말한다.<br />
<strong>“중괄호를 사용하면 JavaScript 표현식을 평가하고 결과를 문자열로 변환하여 JSX에 삽입할 수 있습니다.”</strong></p>
</blockquote>

<p>비슷한 느낌으로 <code class="language-plaintext highlighter-rouge">React</code>나 <code class="language-plaintext highlighter-rouge">Next</code>에서는 아예 컴포넌트 형식으로 전달하는 것을 추천한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nc">CheckUpCard</span>
  <span class="n">content</span><span class="o">={</span>
    <span class="o">&lt;&gt;</span>
      <span class="n">질환</span> <span class="n">등의</span> <span class="n">감별을</span> <span class="n">위한</span>
      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
      <span class="n">정밀검사</span>
    <span class="o">&lt;/&gt;</span>
  <span class="o">}</span>
<span class="o">/&gt;</span>
</code></pre></div></div>

<p>컴포넌트 형식으로 전달하는 방식은 <strong>반응형으로 페이지를 구현할 필요가 있을 때</strong> 사용하면 유용하다. 이 때 개행문자<code class="language-plaintext highlighter-rouge">\n</code> 대신 <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>태그를 사용하게 되는데 이렇게 되면 PC 버전이냐 모바일 버전이냐에 따라 줄바꿈을 다르게 적용할 수 있기 때문이다.</p>

<p>빈 태그가 아닌 &lt;div&gt;태그 등을 사용하면 스타일도 부여할 수 있으니 자유도가 한층 높아지는 것은 말할 것도 없다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, React, Next" /><summary type="html"><![CDATA[특정 컴포넌트를 구현할 때 속성을 통해 문자열을 보내줄 때가 있다. 보통 config로 따로 저장해놓은 고정 문구를 넣어주는 경우에 많이 쓰인다.]]></summary></entry><entry><title type="html">[React Native] onPress에서 화살표 표현식의 생략</title><link href="http://localhost:4000/arrow-in-onpress/" rel="alternate" type="text/html" title="[React Native] onPress에서 화살표 표현식의 생략" /><published>2024-02-20T00:00:00+07:00</published><updated>2024-02-20T00:00:00+07:00</updated><id>http://localhost:4000/arrow-in-onpress</id><content type="html" xml:base="http://localhost:4000/arrow-in-onpress/"><![CDATA[<p>React Native에서 onPress를 사용할 때 무의식적으로 화살표 표현식 <code class="language-plaintext highlighter-rouge">()=&gt;</code>을 사용하고 있었는데 어느날 특정 경우에 생략이 가능하다는
것을 알게 되었다.</p>

<p>코드를 한 글자라도 줄일 수 있다는 생각에 과연 어떠한 조건에서 가능한지 궁금해서 찾아보았다. 다음의 두 가지 경우를 살펴보자.</p>
<h3 id="1">1</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">onPress</span><span class="o">={()=&gt;</span><span class="n">handlePressFirst</span><span class="o">(</span><span class="n">value</span><span class="o">)}</span>
</code></pre></div></div>
<h3 id="2">2</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>onPress={handlePressSecond}
</code></pre></div></div>

<p>둘 다 정상적으로 실행되는 예시이다. 차이를 알겠는가?</p>

<p><code class="language-plaintext highlighter-rouge">handlePressFirst</code> 함수는 value라는 인자를 받고 있고 <code class="language-plaintext highlighter-rouge">handlePressSecond</code>는 아무런 인자 없이 실행되는 함수임을 알 수 있다.</p>

<p>만약 이렇게 하면 어떻게 될까?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>onPress={handlePressFirst(value)}
</code></pre></div></div>

<p>이렇게 되면 해당 페이지가 렌더링 될 때 클릭 이벤트가 없어도 handlePressFirst 함수가 자동으로 실행될 것이다. 이는 예상치 못한 버그를 발생시킬 수 있으므로 좋지 않다. 주의하자.</p>

<p>다만 전달할 인자가 아무것도 없는데 화살표 표현식을 사용하는 것은 아무런 문제가 없다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">onPress</span><span class="o">={()=&gt;</span><span class="n">handlePressSecond</span><span class="o">()}</span>
</code></pre></div></div>

<p>가독성을 올리고 싶다면 onPress 안에 들어가는 함수가 아무런 인자를 받지 않는 함수일 때 화살표 표현식과 함수 뒤의 빈 괄호를 생략하면 된다.</p>

<p>잘 써먹을 만한 팁이지만 괜히 헷갈린다면 무조건 onPress 안에 <code class="language-plaintext highlighter-rouge">()=&gt;</code>를 넣자.</p>

<p>참고로 이는 React의 onClick에서도 동일하다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[React Native에서 onPress를 사용할 때 무의식적으로 화살표 표현식 ()=&gt;을 사용하고 있었는데 어느날 특정 경우에 생략이 가능하다는 것을 알게 되었다.]]></summary></entry><entry><title type="html">[React/RN] map 함수 안에서의 return문 사용법</title><link href="http://localhost:4000/return-in-map/" rel="alternate" type="text/html" title="[React/RN] map 함수 안에서의 return문 사용법" /><published>2024-02-05T00:00:00+07:00</published><updated>2024-02-05T00:00:00+07:00</updated><id>http://localhost:4000/return-in-map</id><content type="html" xml:base="http://localhost:4000/return-in-map/"><![CDATA[<p>개발을 처음 배울 시절, 궁금했던 것들을 하나하나 메모하면서 나중에 블로그 글로 하나씩 적어야겠다고 생각했는데 벌써 어언 1년이 지나서 이제서야 글로 옮긴다.</p>

<p>JS 문법에도 익숙지 않아서 map 함수를 보면 지레 겁을 먹었던 적도 있었는데 이제는 이런 함수의 존재가 너무나도 고맙다.</p>

<p>항상 사용할 때마다 return문을 꼭 써야하는 것인지 궁금했었는데 오늘 그 이야기를 하고자한다.</p>

<p>답을 먼저 말하면 <strong><code class="language-plaintext highlighter-rouge">그렇지 않다</code></strong>이다.</p>

<p>map 함수 안에서 return 문의 유무를 결정하는 기준은 화살표(=&gt;) 뒤에 <strong>중괄호를 쓰냐 소괄호를 쓰냐에 따라</strong> 갈리게 되는데 일반적으로 소괄호를 쓰는 형태는 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="o">.</span><span class="na">map</span><span class="o">((</span><span class="n">value</span><span class="o">,</span> <span class="n">key</span><span class="o">)=&gt;(&lt;</span><span class="nc">View</span> <span class="n">key</span><span class="o">={</span><span class="n">key</span><span class="o">}&gt;[</span><span class="n">컴포넌트</span><span class="o">]&lt;/</span><span class="nc">View</span><span class="o">&gt;))</span>
</code></pre></div></div>

<p>더 나아가 소괄호가 생략되는 경우도 많고 이는 코드가 훨씬 깔끔해 보이는 장점을 가진다.</p>

<p>반대로 중괄호를 쓰게 되면 아래와 같이 꼭 return문을 넣어주어야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="o">.</span><span class="na">map</span><span class="o">((</span><span class="n">value</span><span class="o">,</span> <span class="n">key</span><span class="o">)=&gt;{</span>
  <span class="kd">const</span> <span class="n">newValue</span> <span class="o">=</span> <span class="o">...</span> <span class="c1">// 새 변수 정의</span>
  <span class="k">return</span><span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span> <span class="n">key</span><span class="o">={</span><span class="n">key</span><span class="o">}&gt;</span>
      <span class="o">&lt;</span><span class="nc">Text</span><span class="o">&gt;</span>
        <span class="o">{</span><span class="n">newValue</span><span class="o">}</span>
      <span class="o">&lt;/</span><span class="nc">Text</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">})</span>
</code></pre></div></div>

<p>return을 쓰면 필연적으로 코드가 길어지게 되므로 항상 소괄호를 쓰는게 나아보일 수 있는데, 단 중괄호를 썼을 때 생기는 중요한 이점이 하나 존재한다.</p>

<p>바로 map 함수 내부에서 새로운 변수를 정의할 수 있다는 것이다. 이는 코드의 중복을 막아 가독성을 좋게 하는데 매우 중요할 수 있다.</p>

<p>하지만 그 뿐이므로 <strong>새로운 변수를 정의하는 경우를 제외한다면 return문은 과감히 생략해주자.</strong></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React, React Native, Javascript" /><summary type="html"><![CDATA[개발을 처음 배울 시절, 궁금했던 것들을 하나하나 메모하면서 나중에 블로그 글로 하나씩 적어야겠다고 생각했는데 벌써 어언 1년이 지나서 이제서야 글로 옮긴다.]]></summary></entry><entry><title type="html">[Next/React] 모바일↔︎PC에 따른 줄바꿈 태그의 선택 적용</title><link href="http://localhost:4000/next-br/" rel="alternate" type="text/html" title="[Next/React] 모바일↔︎PC에 따른 줄바꿈 태그의 선택 적용" /><published>2024-01-03T00:00:00+07:00</published><updated>2024-01-03T00:00:00+07:00</updated><id>http://localhost:4000/next-br</id><content type="html" xml:base="http://localhost:4000/next-br/"><![CDATA[<p>웹페이지를 만들다보면 줄바꿈 태그(<code class="language-plaintext highlighter-rouge">br</code>)를 디바이스가 모바일이냐 PC냐에 따라 다르게 적용하고 싶을 때가 있다.</p>

<p>예를 들면 모바일에서는 줄바꿈을 했으면 좋겠고 PC에서는 그대로 길게 냅두고 싶은 경우다.</p>

<p>전통적인 방법으로는 css를 활용하는 방법이 있겠다.</p>

<p>빠르게 인터넷을 검색해보니 다음과 같은 코드가 나왔다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 767px 기준 */</span>
<span class="k">@media</span> <span class="n">only</span> <span class="n">screen</span> <span class="n">and</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">767px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nt">br</span><span class="nc">.ignore</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">inline-block</span><span class="p">;</span>
    <span class="nl">content</span><span class="p">:</span> <span class="s1">" "</span><span class="p">;</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span> <span class="m">2px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>global.css 파일 안에 이렇게 정의해준 뒤에 <strong><code class="language-plaintext highlighter-rouge">&lt;br className="ignore" /&gt;</code></strong>와 같이 사용해주면 모바일 버전에서만 br 태그를 무시할 수 있다.</p>

<p>처음에는 아하 그렇구나 싶었다.</p>

<p>하지만 사용하다보니 무조건 p 태그 안에 위치해야 한다거나, 반대로 PC에서만 br 태그를 무시하고 싶을 때 스타일을 새로 적용해 주어야 하는 등 딱 봐도 여러 한계점이 존재했다.</p>

<p>결국 이러한 불편함에서 벗어나기 위해서 여러 방법들을 찾아보기 시작했다.</p>

<h2 id="usemediaquery">useMediaQuery</h2>

<p>그 중 하나는 <code class="language-plaintext highlighter-rouge">useMediaQuery</code>를 활용하여 <code class="language-plaintext highlighter-rouge">isMobile</code> 변수를 만들어서 컴포넌트에 조건을 걸어 사용하는 것이다.</p>

<p>나름 깔끔하게 코드를 정리할 수 있고 <code class="language-plaintext highlighter-rouge">isMobile</code> 변수를 필두로 삼항연산자를 사용하여 모바일용 컴포넌트, PC용 컴포넌트를 나누어 렌더링하는 것이 가능했다. 코드 가독성도 나름 올라갔다.</p>

<p>하지만 이러한 방법은 매번 페이지마다 <code class="language-plaintext highlighter-rouge">isMobile</code> 변수를 정의해 주어야 한다는 귀찮음이 있었다. 그 외에도 새로고침을 할 때마다 PC화면일지언정 모바일용 컴포넌트가 먼저 렌더링된 후에 PC용으로 전환되는 등의 깜빡임 현상이 존재했다. 이거는 내게 꽤나 큰 스트레스로 다가왔다.</p>

<h2 id="tailwind">tailwind</h2>

<p>결국 돌고 돌아서 tailwind로 돌아왔다.</p>

<p>다행히도 근본 원인이었던 디바이스에 따른 br 태그의 선택 적용 문제도 tailwind를 사용하면서 깔끔하게 해결되었다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">sm:block hidden</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div&gt; /</span><span class="o">/</span> <span class="nx">pc</span>
<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">sm:hidden</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div&gt; /</span><span class="o">/</span> <span class="nx">mobile</span>
</code></pre></div></div>

<p>div 태그를 예시로 들었지만 br 태그도 똑같이 적용하면 된다.</p>

<p>코드도 한결 간단해졌고 PC용 컴포넌트, 모바일용 컴포넌트에 따라 가장 바깥을 위의 div 예시처럼 감싸주면 해결된다.</p>

<p>코드 간결성, 가독성을 모두 잡을 수 있어서 좋았다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Next, React" /><summary type="html"><![CDATA[웹페이지를 만들다보면 줄바꿈 태그(br)를 디바이스가 모바일이냐 PC냐에 따라 다르게 적용하고 싶을 때가 있다.]]></summary></entry><entry><title type="html">[Next/React] z-index가 작동하지 않는 경우</title><link href="http://localhost:4000/z-index/" rel="alternate" type="text/html" title="[Next/React] z-index가 작동하지 않는 경우" /><published>2023-12-28T00:00:00+07:00</published><updated>2023-12-28T00:00:00+07:00</updated><id>http://localhost:4000/z-index</id><content type="html" xml:base="http://localhost:4000/z-index/"><![CDATA[<p>생각보다 많이 헤맸던 경우기도 한데 Next 혹은 React에서 z-index가 원하는대로 작동하지 않을 때가 있다.</p>

<p>처음에는 그저 position이 absolute일 경우에만 z-index가 적용되는 줄 알고 absolute를 남발했던 때도 있었다.</p>

<p>하지만 항상 absolute position만으로 컴포넌트들을 배치할 수는 없지 않은가.</p>

<p>React Native로 앱 작업을 자주 하다보니 맨날 헷갈리는데 React Native에서는 default position이 <code class="language-plaintext highlighter-rouge">relative</code>인 반면
React나 Next에서는 <code class="language-plaintext highlighter-rouge">static</code>이 초기값이다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center"><a href="https://cssreference.io/property/position/">React/Next</a></th>
      <th style="text-align: center"><a href="https://reactnative.dev/docs/layout-props">React Native</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">position(default)</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">static</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">relative</code></td>
    </tr>
  </tbody>
</table>

<p><strong>그러므로 React/Next로 작업을 할 때, position: ‘static’ (default)인 경우에는 z-index가 적용되지 않기에 이를 사용하고 싶은 경우에는 position을 relative나 absolute로 설정해주어야 한다.</strong></p>

<p>하지만 재밌는 것은 React Native에서도 z-index를 적용해주고 싶으면 default가 relative여도 굳이 따로 선언해주어야 한다는 사실.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">position</span><span class="p">:</span> <span class="dl">'</span><span class="s1">relative</span><span class="dl">'</span><span class="p">,</span>
<span class="nx">zIndex</span><span class="p">:</span> <span class="mi">10</span>
</code></pre></div></div>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Next, React" /><summary type="html"><![CDATA[생각보다 많이 헤맸던 경우기도 한데 Next 혹은 React에서 z-index가 원하는대로 작동하지 않을 때가 있다.]]></summary></entry><entry><title type="html">[React Native] 스크롤에 상관없이 고정된 컴포넌트 만들기</title><link href="http://localhost:4000/fixed-position/" rel="alternate" type="text/html" title="[React Native] 스크롤에 상관없이 고정된 컴포넌트 만들기" /><published>2023-12-26T00:00:00+07:00</published><updated>2023-12-26T00:00:00+07:00</updated><id>http://localhost:4000/fixed-position</id><content type="html" xml:base="http://localhost:4000/fixed-position/"><![CDATA[<p>React와 React Native는 비슷하면서도 은근히 다른 부분이 많은 것 같다.</p>

<p>두 프레임워크를 번갈아가며 사용하다보면 문법적인 부분에 대해서 헷갈릴 때가 자주 있다.</p>

<p>앱에서 새로운 기능을 만들다보니 컴포넌트 하나를 스크롤에 영향받지 않으면서 화면에 고정시킬 필요가 있었는데 React에서
자주 사용했던 문법을 썼더니 바로 에러가 났다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">position</span><span class="p">:</span> <span class="dl">'</span><span class="s1">fixed</span><span class="dl">'</span>
</code></pre></div></div>

<p>예를 들면 쇼핑 사이트에서 장바구니나 문의하기 버튼이 화면 측면에 계속해서 따라다니는 기능이다.</p>

<p>순간적으로 이거를 어떻게 해야하나 생각이 나질 않아 당황했는데 사실 곰곰히 생각해보면 간단한 질문이었다.</p>

<p>position이 <code class="language-plaintext highlighter-rouge">relative</code>일 리는 없을거고, <code class="language-plaintext highlighter-rouge">absolute</code>인 상태에서 스크롤을 무시할 수 있는 기능?</p>

<p>아무 생각 없이 화면 위에 absolute 포지션 레이어를 하나 더 씌워버려서 스크롤이 되지 않는 상황까지 갔다가 문득 깨달았다.</p>

<p><b>그냥 ScrollView나 FlatList의 내부가 아니라 같은 레벨(위치)에 삽입해주면 되는 것이었다.</b></p>

<p>스크롤을 해야할 정도로 구성 컴포넌트들이 많다면 화면 높이는 <code class="language-plaintext highlighter-rouge">Dimensions</code>로 계산해서 top으로 내려주어야 한다.</p>

<p>이 과정에서 아이폰의 경우 다이나믹 아일랜드에 대해 기존에 사용하던 유명 라이브러리들이 제대로 작동하지 않는 현상을 만났다.</p>

<p>그래서 현재는 그냥 맘편히 <a href="https://github.com/th3rdwave/react-native-safe-area-context"><code class="language-plaintext highlighter-rouge">react-native-safe-area-context</code></a>를 사용하고 있다.</p>

<p>다만 <code class="language-plaintext highlighter-rouge">SafeAreaView</code> 컴포넌트에 대해서는 다음과 같은 애니메이션 이슈가 존재하므로 주의하자.</p>

<blockquote>
  <p>While React Native exports a SafeAreaView component, this component only supports iOS 10+ with no support for older iOS versions or Android. In addition, it also has some issues, i.e. if a screen containing safe area is animating, it causes jumpy behavior. So we recommend to use the useSafeAreaInsets hook from the react-native-safe-area-context library to handle safe areas in a more reliable way. <a href="https://reactnavigation.org/docs/handling-safe-area/">출처 React Navigation</a></p>
</blockquote>

<p>이는 화면 전환을 할 때에도 가끔씩 발견되는 깜빡임 문제이다. 예민하지 않은 사람은 상관없을 수 있다.</p>

<p>따라서 Safe Area 관련 기능은 전부 <code class="language-plaintext highlighter-rouge">useSafeAreaInsets</code>를 사용하여 해결하기로 하고 다른 라이브러리는 삭제해주었다. 예를 들면 
<code class="language-plaintext highlighter-rouge">react-native-iphone-x-helper</code>와 같은 라이브러리다. 이게 제대로 작동하지 않는다는 것을 깨달을 때까지 시간이 꽤나 걸려서 묘한 배신감이 든다. 그리고 UI를 만들다보면 오히려 SafeAreaView를 사용하는 것이 더 귀찮음을 유발할 때가 많다. 특히 맨 처음 컴포넌트의 배경색을 지정할 때 그러하다.</p>

<p>아무튼, 높이 관련 라이브러리를 하나로 통일해서 깔끔하다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">import</span> <span class="p">{</span> <span class="n">useSafeAreaInsets</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'react-native-safe-area-context'</span><span class="p">;</span>

<span class="k">const</span> <span class="no">Demo</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">const</span> <span class="no">insets</span> <span class="o">=</span> <span class="nf">useSafeAreaInsets</span><span class="p">();</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nc">View</span> <span class="n">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span> <span class="n">flex</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nc">ScrollView</span><span class="o">&gt;</span>
        <span class="mf">...</span>
      <span class="o">&lt;/</span><span class="nc">ScrollView</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nc">View</span> <span class="n">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span>
        <span class="n">position</span><span class="o">:</span> <span class="s1">'absolute'</span><span class="p">,</span>
        <span class="n">top</span><span class="o">:</span> <span class="nc">Dimensions</span><span class="mf">.</span><span class="nf">get</span><span class="p">(</span><span class="s1">'window'</span><span class="p">)</span><span class="mf">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">insets</span><span class="mf">.</span><span class="n">bottom</span> <span class="o">-</span> <span class="p">[</span><span class="n">컴포넌트</span> <span class="n">높이</span><span class="p">]</span>
      <span class="p">}</span> <span class="p">}</span><span class="o">/&gt;</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, SafeAreaView" /><summary type="html"><![CDATA[React와 React Native는 비슷하면서도 은근히 다른 부분이 많은 것 같다.]]></summary></entry><entry><title type="html">[React Native] 모서리가 둥근 삼각형 만들기</title><link href="http://localhost:4000/30th-post/" rel="alternate" type="text/html" title="[React Native] 모서리가 둥근 삼각형 만들기" /><published>2023-08-17T00:00:00+07:00</published><updated>2023-08-17T00:00:00+07:00</updated><id>http://localhost:4000/30th-post</id><content type="html" xml:base="http://localhost:4000/30th-post/"><![CDATA[<p>앱을 만들다가 도형을 그려야할 때가 오면 나도 모르게 한숨을 내쉬고 있다.        <br />
디테일적인 부분까지 챙기려면 은근히 손이 많이 가는 작업이기 때문이다.</p>

<p>오늘은 오전 내내 모서리가 둥근 삼각형을 그려야했기에 나중을 위해서 기록해둔다.</p>

<h1 id="설계도">설계도</h1>
<p>삼각형을 그리기 위한 방법에는 여러가지가 있지만 우리가 익히 알고 있는 일반적인 삼각형을 그리는 일은 어렵지 않다. 
구글 검색을 해도 쉽게 나올 것이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">React</span> <span class="n">from</span> <span class="err">'</span><span class="n">react</span><span class="err">'</span><span class="o">;</span>
<span class="kn">import</span> <span class="err">{</span> <span class="nn">View</span><span class="o">,</span> <span class="nc">StyleSheet</span> <span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="n">react</span><span class="o">-</span><span class="kd">native</span><span class="err">'</span><span class="o">;</span>

<span class="kd">const</span> <span class="nc">App</span> <span class="o">=</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span> <span class="n">style</span><span class="o">={</span><span class="n">styles</span><span class="o">.</span><span class="na">container</span><span class="o">}&gt;</span>
      <span class="o">&lt;</span><span class="nc">View</span> <span class="n">style</span><span class="o">={</span><span class="n">styles</span><span class="o">.</span><span class="na">triangle</span><span class="o">}</span> <span class="o">/&gt;</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">};</span>

<span class="kd">const</span> <span class="n">styles</span> <span class="o">=</span> <span class="nc">StyleSheet</span><span class="o">.</span><span class="na">create</span><span class="o">({</span>
  <span class="nl">container:</span> <span class="o">{</span>
    <span class="nl">flex:</span> <span class="mi">1</span><span class="o">,</span>
    <span class="nl">justifyContent:</span> <span class="err">'</span><span class="n">center</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">alignItems:</span> <span class="err">'</span><span class="n">center</span><span class="err">'</span><span class="o">,</span>
  <span class="o">},</span>
  <span class="nl">triangle:</span> <span class="o">{</span>
    <span class="nl">width:</span> <span class="mi">0</span><span class="o">,</span>
    <span class="nl">height:</span> <span class="mi">0</span><span class="o">,</span>
    <span class="nl">backgroundColor:</span> <span class="err">'</span><span class="n">transparent</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">borderStyle:</span> <span class="err">'</span><span class="n">solid</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">borderLeftWidth:</span> <span class="mi">50</span><span class="o">,</span>
    <span class="nl">borderRightWidth:</span> <span class="mi">50</span><span class="o">,</span>
    <span class="nl">borderBottomWidth:</span> <span class="mi">100</span><span class="o">,</span>
    <span class="nl">borderLeftColor:</span> <span class="err">'</span><span class="n">transparent</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">borderRightColor:</span> <span class="err">'</span><span class="n">transparent</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">borderBottomColor:</span> <span class="err">'</span><span class="n">lime</span><span class="err">'</span><span class="o">,</span>
  <span class="o">},</span>
<span class="o">});</span>

<span class="n">export</span> <span class="k">default</span> <span class="nc">App</span><span class="o">;</span>
</code></pre></div></div>

<p>위와 같은 코드로도 충분히 삼각형을 그릴 수 있다. 하지만 우리가 필요한 건 모서리가 “둥근” 삼각형이다.
그렇다면 다른 접근 방식이 필요하다. 아래 그림을 보자.</p>
<p align="center"><img src="https://github.com/froggydisk/froggydisk.github.io/blob/master/assets/img/30th.png?raw=true" /></p>

<p>필자는 세 개의 평행사변형(마름모)의 모서리를 borderRadius로 둥글게 만든 뒤 이를 합치는 방법을 사용했다. 굳이 이 방법을 사용하지 않더라도 <code class="language-plaintext highlighter-rouge">react-native-svg</code> 라이브러리를 이용하면 훨씬 좋은 방법이 있을 수 있으니 원치 않는 방법이라면 다른 방법을 찾아보기를 강력히 권한다.</p>

<p>어쨌거나, 평행사변형 세 개를 잘 조작해야하는 것은 분명한데 그를 위해서는 transform을 잘 이용해야한다.
transform으로도 할 수 있는 것은 여러가지 있지만 여기서는 rotate(돌리고), skewX(비틀고), scaleY(늘리기)를 사용할 것이다. 
아래를 살펴보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nc">Triangle</span> <span class="o">=</span> <span class="o">({</span><span class="n">color</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">children</span><span class="o">})</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span>
      <span class="n">style</span><span class="o">={</span> <span class="o">{</span>
        <span class="nl">alignSelf:</span> <span class="err">'</span><span class="n">center</span><span class="err">'</span><span class="o">,</span>
        <span class="nl">width:</span> <span class="n">size</span><span class="o">,</span>
        <span class="nl">height:</span> <span class="n">size</span><span class="o">,</span>
      <span class="o">}</span> <span class="o">}&gt;</span>
      <span class="o">{</span><span class="cm">/* Upper Triangle */</span><span class="o">}</span>
      <span class="o">&lt;</span><span class="nc">View</span>
        <span class="n">style</span><span class="o">={</span> <span class="o">{</span>
          <span class="nl">position:</span> <span class="err">'</span><span class="n">absolute</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">width:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">height:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">borderTopRightRadius:</span> <span class="mi">30</span><span class="o">,</span>
          <span class="nl">backgroundColor:</span> <span class="n">color</span><span class="o">,</span>
          <span class="nl">transform:</span> <span class="o">[{</span><span class="nl">rotate:</span> <span class="err">'</span><span class="o">-</span><span class="mi">60</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span> <span class="o">{</span><span class="nl">skewX:</span> <span class="err">'</span><span class="o">-</span><span class="mi">30</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span> <span class="o">{</span><span class="nl">scaleY:</span> <span class="mf">0.866</span><span class="o">}],</span>
        <span class="o">}</span> <span class="o">}</span>
      <span class="o">/&gt;</span>
      <span class="o">{</span><span class="cm">/* Lower Triangle */</span><span class="o">}</span>
      <span class="o">&lt;</span><span class="nc">View</span>
        <span class="n">style</span><span class="o">={</span> <span class="o">{</span>
          <span class="nl">position:</span> <span class="err">'</span><span class="n">absolute</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">width:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">height:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">borderTopRightRadius:</span> <span class="mi">30</span><span class="o">,</span>
          <span class="nl">backgroundColor:</span> <span class="n">color</span><span class="o">,</span>
          <span class="nl">transform:</span> <span class="o">[</span>
            <span class="o">{</span><span class="nl">rotate:</span> <span class="err">'</span><span class="o">-</span><span class="mi">180</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">skewX:</span> <span class="err">'</span><span class="o">-</span><span class="mi">30</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">scaleY:</span> <span class="mf">0.866</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">translateY:</span> <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">size</span><span class="o">},</span>
          <span class="o">],</span>
        <span class="o">}</span> <span class="o">}</span>
      <span class="o">/&gt;</span>
      <span class="o">{</span><span class="cm">/* Bottom Right Triangle */</span><span class="o">}</span>
      <span class="o">&lt;</span><span class="nc">View</span>
        <span class="n">style</span><span class="o">={</span> <span class="o">{</span>
          <span class="nl">position:</span> <span class="err">'</span><span class="n">absolute</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">width:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">height:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">borderTopLeftRadius:</span> <span class="mi">30</span><span class="o">,</span>
          <span class="nl">backgroundColor:</span> <span class="n">color</span><span class="o">,</span>
          <span class="nl">transform:</span> <span class="o">[</span>
            <span class="o">{</span><span class="nl">rotate:</span> <span class="err">'</span><span class="mi">180</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">skewX:</span> <span class="err">'</span><span class="mi">30</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">scaleY:</span> <span class="mf">0.866</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">translateY:</span> <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">size</span><span class="o">},</span>
          <span class="o">],</span>
        <span class="o">}</span> <span class="o">}</span>
      <span class="o">/&gt;</span>
      <span class="o">{</span><span class="n">children</span><span class="o">}</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">};</span>
</code></pre></div></div>

<p>모든 사이즈에 맞추어 삼각형을 만들 수 있게 끔 transform의 변수 조정을 해주었다. 코드만 보아도 쉽게 이해할 수 있을 것이다.</p>

<p>보통 도형 그리기는 노하우나 경험이 많이 필요하기에 잘 모르겠다면 우선 css로 되어있는 코드를 찾아보기를 권한다. 그 후 React Native 코드로 변환하는 과정을 거칠텐데 css 코드를 보아도 잘 이해가 안된다면 chatGPT에게 바꾸어 달라고 하자.</p>

<p>복사 붙여넣기가 코딩 실력 상승에는 도움이 안 될 수 있으나 처음에 방향성을 잡을 때는 훌륭한 방법이다. 막막할 때 아까운 시간을 흘려보내기 보다는 무엇이라도 빠르게 방법을 찾아서 시도해 보는 것이 더 중요하다고 생각한다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[앱을 만들다가 도형을 그려야할 때가 오면 나도 모르게 한숨을 내쉬고 있다. 디테일적인 부분까지 챙기려면 은근히 손이 많이 가는 작업이기 때문이다.]]></summary></entry><entry><title type="html">[React Native] &amp;amp;&amp;amp; 구문 사용 시 Text 에러</title><link href="http://localhost:4000/29th-post/" rel="alternate" type="text/html" title="[React Native] &amp;amp;&amp;amp; 구문 사용 시 Text 에러" /><published>2023-08-10T00:00:00+07:00</published><updated>2023-08-10T00:00:00+07:00</updated><id>http://localhost:4000/29th-post</id><content type="html" xml:base="http://localhost:4000/29th-post/"><![CDATA[<p>개발 중에 예상치 못한 에러를 만나 기록해둔다.     <br />
뜬금없이 <code class="language-plaintext highlighter-rouge">Error: Text strings must be rendered within a &lt;Text&gt; component.</code>에러를 만나게 되었는데 이는 주로 <Text>태그가 아니라 <View>안에 문자열을 사용하여 나타나는 에러다. 
React로 개발을 하다가 React Native로 넘어오게 되거나 멀티로 개발을 할 때 흔히 하는 실수이다.</View></Text></p>

<p>하지만 이번에는 눈을 씻고 찾아봐도 원인을 찾기 힘들었다.
예를 들어 아래와 같은 코드가 존재한다고 해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="o">[</span><span class="n">sample</span><span class="o">,</span> <span class="n">setSample</span><span class="o">]</span> <span class="o">=</span> <span class="n">useState</span><span class="o">(</span><span class="n">undefined</span><span class="o">)</span>
<span class="n">useEffect</span><span class="o">(()=&gt;</span> <span class="o">{</span>
    <span class="n">setSample</span><span class="o">(</span><span class="mi">0</span><span class="o">~</span><span class="mi">100</span> <span class="n">사이</span> <span class="n">랜덤한</span> <span class="n">정수</span><span class="o">)</span>
<span class="o">},</span> <span class="o">[])</span>
<span class="k">return</span><span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span><span class="o">&gt;</span>
        <span class="o">{</span><span class="n">sample</span> <span class="o">&amp;&amp;</span> <span class="o">&lt;</span><span class="nc">Text</span><span class="o">&gt;</span><span class="n">test</span><span class="o">&lt;/</span><span class="nc">Text</span><span class="o">&gt;}</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
<span class="o">)</span>
</code></pre></div></div>

<p>예상컨대 맨 처음에는 sample값이 <code class="language-plaintext highlighter-rouge">undefined</code>이기에 화면에 test는 나타나지 않는다.    <br />
전체 layout이 그려진 뒤 useEffect가 실행되면서 setSample()에 의해 sample값이 <code class="language-plaintext highlighter-rouge">0~100 사이 정수</code>로 바뀌게 되고, 이후 <code class="language-plaintext highlighter-rouge">test</code>라는 문자열이 화면에 나타날 것으로 예상된다.</p>

<p>아, 여기서 놓치면 안되는 것이 자바스크립트에서 <code class="language-plaintext highlighter-rouge">0</code>은 <code class="language-plaintext highlighter-rouge">false</code>로 취급되기 때문에 특별히 <code class="language-plaintext highlighter-rouge">0</code>의 경우에는 <code class="language-plaintext highlighter-rouge">undefined</code>와 같이 <code class="language-plaintext highlighter-rouge">test</code>는 나타나지 않을 것이다. 
덧붙이자면, <strong><code class="language-plaintext highlighter-rouge">false, undefined, null, 0, -0, Nan, ""</code></strong> 다음과 같은 여섯 가지의 경우는 모두 <code class="language-plaintext highlighter-rouge">false</code>로 취급되므로 주의하자.</p>

<p>그렇다면 위의 여섯 가지의 경우는 React Native에서 모두 <code class="language-plaintext highlighter-rouge">false</code>로 처리될까? (RN 0.71.6 버전 기준)       <br />
아쉽게도 React Native 상의 <code class="language-plaintext highlighter-rouge">&amp;&amp; 구문</code>에서는 제대로 처리되지 않는 모습을 보인다.</p>

<p>실험해본 결과 sample값이 <code class="language-plaintext highlighter-rouge">0</code>과 <code class="language-plaintext highlighter-rouge">-0</code>의 경우에는 모두 <code class="language-plaintext highlighter-rouge">Error: Text strings must be rendered within a &lt;Text&gt; component.</code>에러를 나타냈다.</p>

<p>따라서 위와 같은 에러를 만난 경우 <code class="language-plaintext highlighter-rouge">&amp;&amp; 구문</code>을 잘 확인해보자.
참고로, 삼항연산자의 경우에는 해당 에러가 발생하지 않았다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[개발 중에 예상치 못한 에러를 만나 기록해둔다. 뜬금없이 Error: Text strings must be rendered within a &lt;Text&gt; component.에러를 만나게 되었는데 이는 주로 태그가 아니라 안에 문자열을 사용하여 나타나는 에러다. React로 개발을 하다가 React Native로 넘어오게 되거나 멀티로 개발을 할 때 흔히 하는 실수이다.]]></summary></entry><entry><title type="html">[React Native] 처음 앱 진입시 로그인 상태에 따른 네비게이션 분기</title><link href="http://localhost:4000/28th-post/" rel="alternate" type="text/html" title="[React Native] 처음 앱 진입시 로그인 상태에 따른 네비게이션 분기" /><published>2023-07-24T00:00:00+07:00</published><updated>2023-07-24T00:00:00+07:00</updated><id>http://localhost:4000/28th-post</id><content type="html" xml:base="http://localhost:4000/28th-post/"><![CDATA[<p>보통 앱을 만들게 되면 현재 로그인한 상태에 따라 시작하는 <code class="language-plaintext highlighter-rouge">Screen</code>을 다르게 설정함으로써 UX를 개선한다.    <br />
<code class="language-plaintext highlighter-rouge">NavigatorAuth, NavigatorMain</code>과 같이 로그인의 상태에 따라 진입하는 Navigator가 다른 경우에는 간단하다.       <br />
아래의 코드처럼 로그인 상태값에 따라 삼항연산자를 활용하여 진입점을 바꾸어주면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">function</span> <span class="nf">App</span><span class="o">()</span> <span class="o">{</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">isLogin</span><span class="o">,</span> <span class="n">setIsLogin</span><span class="o">]</span> <span class="o">=</span> <span class="n">useState</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
  <span class="o">...</span> <span class="o">(</span><span class="n">setIsLogin에</span> <span class="n">상태값을</span> <span class="n">넣어주는</span> <span class="n">로직</span><span class="o">)</span>

  <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">NavigationContainer</span><span class="o">&gt;</span>      
      <span class="o">{</span><span class="n">isLogin</span> <span class="o">?</span> <span class="o">(</span>
        <span class="o">&lt;</span><span class="nc">NavigatorMain</span> <span class="o">/&gt;</span> <span class="c1">// 로그인 되어있는 경우 홈 진입</span>
      <span class="o">)</span> <span class="o">:</span> <span class="o">(</span>
        <span class="o">&lt;</span><span class="nc">NavigatorAuth</span> <span class="o">/&gt;</span> <span class="c1">// 로그인이 안 되어있는 경우 로그인 페이지 진입</span>
      <span class="o">)}</span>
    <span class="o">&lt;/</span><span class="nc">NavigationContainer</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>하지만 굳이 두 개의 Navigator를 쓰지 않고 하나의 Navigator 안에서 진입점을 다르게 해주고 싶은 경우도 있을 것이다.                <br />
그러한 경우에는 <strong>useNavigationContainerRef()를 활용해주면 된다.</strong> 아래 코드를 살펴보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// app.js 파일</span>
<span class="n">function</span> <span class="nf">App</span><span class="o">()</span> <span class="o">{</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">isLogin</span><span class="o">,</span> <span class="n">setIsLogin</span><span class="o">]</span> <span class="o">=</span> <span class="n">useState</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
  <span class="o">...</span> <span class="o">(</span><span class="n">setIsLogin에</span> <span class="n">상태값을</span> <span class="n">넣어주는</span> <span class="n">로직</span><span class="o">)</span>

  <span class="c1">// 로그인이 안 되어있는 경우 로그인 페이지 진입</span>
  <span class="kd">const</span> <span class="o">[</span><span class="n">route</span><span class="o">,</span> <span class="n">setRoute</span><span class="o">]</span> <span class="o">=</span> <span class="n">useState</span><span class="o">(</span><span class="err">'</span><span class="nc">LoginScreen</span><span class="err">'</span><span class="o">);</span> 
  <span class="n">useEffect</span><span class="o">(()</span> <span class="o">=&gt;</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">isLogin</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">setRoute</span><span class="o">(</span><span class="err">'</span><span class="nc">MainScreen</span><span class="err">'</span><span class="o">);</span> <span class="c1">// 로그인이 되어있는 경우 홈 진입</span>
    <span class="o">}</span>
  <span class="o">},</span> <span class="o">[</span><span class="n">isLogin</span><span class="o">]);</span>

  <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">NavigationContainer</span><span class="o">&gt;</span>
        <span class="o">&lt;</span><span class="nc">NavigatorMain</span> <span class="n">initialRouteName</span><span class="o">={</span><span class="n">route</span><span class="o">}</span> <span class="o">/&gt;</span>
    <span class="o">&lt;/</span><span class="nc">NavigationContainer</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>우선 app.js에서 로그인 상태에 따른 분기를 처리해주고 이후 NavigatorMain에서 분기할 지점(initialRouteName)으로 화면을 전환하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// NavigatorMain.js 파일</span>
<span class="kn">import</span> <span class="nn">React</span><span class="o">,</span> <span class="o">{</span><span class="n">useEffect</span><span class="o">,</span> <span class="n">useRef</span><span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="n">react</span><span class="err">'</span><span class="o">;</span>
<span class="kn">import</span> <span class="err">{</span>
  <span class="nn">NavigationContainer</span><span class="o">,</span>
  <span class="n">useNavigationContainerRef</span><span class="o">,</span>
<span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="nd">@react</span><span class="o">-</span><span class="n">navigation</span><span class="o">/</span><span class="kd">native</span><span class="err">'</span><span class="o">;</span>

<span class="kd">const</span> <span class="nc">NavigatorMain</span> <span class="o">=</span> <span class="o">({</span><span class="n">initialRouteName</span><span class="o">})</span> <span class="o">=&gt;</span> <span class="o">{</span>  
  <span class="kd">const</span> <span class="n">navigationRef</span> <span class="o">=</span> <span class="n">useNavigationContainerRef</span><span class="o">();</span>
  <span class="n">useEffect</span><span class="o">(()</span> <span class="o">=&gt;</span> <span class="o">{</span>
    <span class="c1">// navigate 기능을 이용해 app.js에서 바뀐 진입점으로 화면을 전환</span>
    <span class="n">navigationRef</span><span class="o">.</span><span class="na">navigate</span><span class="o">(</span><span class="n">initialRouteName</span><span class="o">);</span> 
  <span class="o">},</span> <span class="o">[</span><span class="n">initialRouteName</span><span class="o">]);</span>
  <span class="k">return</span> <span class="o">(</span>    
    <span class="o">&lt;</span><span class="nc">NavigationContainer</span> <span class="n">ref</span><span class="o">={</span><span class="n">navigationRef</span><span class="o">}&gt;</span>
      <span class="o">...</span>
    <span class="o">&lt;/</span><span class="nc">NavigationContainer</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">};</span>
</code></pre></div></div>

<p>생각보다 간단하다. 이를 활용하면 두 곳으로의 분기 뿐만아니라 조건에 따라 여러 스크린으로의 분기도 가능하다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[보통 앱을 만들게 되면 현재 로그인한 상태에 따라 시작하는 Screen을 다르게 설정함으로써 UX를 개선한다. NavigatorAuth, NavigatorMain과 같이 로그인의 상태에 따라 진입하는 Navigator가 다른 경우에는 간단하다. 아래의 코드처럼 로그인 상태값에 따라 삼항연산자를 활용하여 진입점을 바꾸어주면 된다.]]></summary></entry><entry><title type="html">[React Native] 안드로이드 다크모드에서 텍스트 색이 모두 흰색으로 나오는 이슈</title><link href="http://localhost:4000/27th-post/" rel="alternate" type="text/html" title="[React Native] 안드로이드 다크모드에서 텍스트 색이 모두 흰색으로 나오는 이슈" /><published>2023-07-23T00:00:00+07:00</published><updated>2023-07-23T00:00:00+07:00</updated><id>http://localhost:4000/27th-post</id><content type="html" xml:base="http://localhost:4000/27th-post/"><![CDATA[<p>개발을 하다보면 다크모드를 고려하지 않고 개발을 하게 되는 경우가 있다. <br />
React Native에서는 <strong>텍스트의 기본 색상이 #000, 폰트크기는 14, fontWeight은 400</strong>이므로 <Text>태그에서 아무런 style 적용을 해주지 않더라도 기본 설정이 적용이 된다. 
그렇기에 기본 설정을 사용하는 경우에는 아무런 신경을 써주지 않아도 된다.</Text></p>

<p><strong>단, 문제는 안드로이드의 다크모드는 예외라는 것이다.</strong></p>

<p>이슈가 처음 보고되었을 때 적잖이 당황했던 적이 있다. 안드로이드 스튜디오에서도 따로 설정을 해주지 않는 이상 다크모드가 적용되어 있는 경우가 적으므로 따로 테스트해 볼 생각을 전혀 못했던 것이다.</p>

<p>다행히 구글링 해보니 같은 이슈를 겪는 사람들이 있어서 해결 방법을 정리해보았다.   <br />
먼저 수정할 파일은 <strong>[프로젝트폴더]/android/app/src/main/res/values/styles.xml</strong>이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">style</span> <span class="n">name</span><span class="o">=</span><span class="s">"AppTheme"</span> <span class="n">parent</span><span class="o">=</span><span class="s">"Theme.AppCompat.DayNight.NoActionBar"</span><span class="o">&gt;</span>
    <span class="o">&lt;!--</span> <span class="nc">Customize</span> <span class="n">your</span> <span class="n">theme</span> <span class="n">here</span><span class="o">.</span> <span class="o">--&gt;</span>
    <span class="o">&lt;</span><span class="n">item</span> <span class="n">name</span><span class="o">=</span><span class="s">"android:editTextBackground"</span><span class="o">&gt;</span><span class="nd">@drawable</span><span class="o">/</span><span class="n">rn_edit_text_material</span><span class="o">&lt;/</span><span class="n">item</span><span class="o">&gt;</span>
    <span class="o">&lt;</span><span class="n">item</span> <span class="n">name</span><span class="o">=</span><span class="s">"android:textColor"</span><span class="o">&gt;</span><span class="err">#</span><span class="mo">000</span><span class="o">&lt;/</span><span class="n">item</span><span class="o">&gt;</span> <span class="c1">// Text 태그의 폰트 색상</span>
    <span class="o">&lt;</span><span class="n">item</span> <span class="n">name</span><span class="o">=</span><span class="s">"android:textColorHint"</span><span class="o">&gt;</span><span class="err">#</span><span class="mi">999</span><span class="o">&lt;/</span><span class="n">item</span><span class="o">&gt;</span> <span class="c1">// TextInput 태그의 힌트 폰트 색상</span>
    <span class="o">&lt;</span><span class="n">item</span> <span class="n">name</span><span class="o">=</span><span class="s">"android:editTextColor"</span><span class="o">&gt;</span><span class="err">#</span><span class="mo">000</span><span class="o">&lt;/</span><span class="n">item</span><span class="o">&gt;</span> <span class="c1">// TextInput 태그의 폰트 색상</span>
<span class="o">&lt;/</span><span class="n">style</span><span class="o">&gt;</span>
</code></pre></div></div>
<p>이렇게 하면 폰트 문제가 깔끔하게 해결된다.</p>

<p>하지만 추가 테스트를 하다보니 이번에는 <strong>Alert.alert</strong>의 모달 배경에 회색 필터가 씌워지는 현상이 일어난다. (<a href="https://github.com/facebook/react-native/issues/31345">참고</a>) <br />
해결을 위해 수정할 파일은 <strong>[프로젝트폴더]/android/app/src/main/java/com/[앱이름]/MainApplication.java</strong>이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">androidx.appcompat.app.AppCompatDelegate</span><span class="o">;</span> <span class="c1">// 추가</span>

<span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">onCreate</span><span class="o">()</span> <span class="o">{</span>
<span class="kd">super</span><span class="o">.</span><span class="na">onCreate</span><span class="o">();</span>
<span class="nc">SoLoader</span><span class="o">.</span><span class="na">init</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="cm">/* native exopackage */</span> <span class="kc">false</span><span class="o">);</span>
<span class="nc">ReactNativeFlipper</span><span class="o">.</span><span class="na">initializeFlipper</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">getReactNativeHost</span><span class="o">().</span><span class="na">getReactInstanceManager</span><span class="o">());</span>
<span class="nc">AppCompatDelegate</span><span class="o">.</span><span class="na">setDefaultNightMode</span><span class="o">(</span><span class="nc">AppCompatDelegate</span><span class="o">.</span><span class="na">MODE_NIGHT_NO</span><span class="o">);</span> <span class="c1">// 추가</span>
<span class="o">}</span>
</code></pre></div></div>
<p>위 코드는 안드로이드에서 앱의 다크모드를 강제로 막아준다.</p>

<p>애초부터 다크모드를 막아줄 것이면 위의 폰트 색상은 왜 적용해주었는가 싶지만 처음 설정은 전역 폰트의 색상 설정이 가능한만큼 검정색이 아닌 다른 색으로의 설정도 가능하다는 점에서 의의가 있다.<br />
보통 디자인에 따라 다르지만 순수 블랙을 사용하지 않고 <strong>#333</strong>등의 색상 코드를 사용하는 경우가 있기에 어찌되었든 알아두면 유용한 설정이다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[개발을 하다보면 다크모드를 고려하지 않고 개발을 하게 되는 경우가 있다. React Native에서는 텍스트의 기본 색상이 #000, 폰트크기는 14, fontWeight은 400이므로 태그에서 아무런 style 적용을 해주지 않더라도 기본 설정이 적용이 된다. 그렇기에 기본 설정을 사용하는 경우에는 아무런 신경을 써주지 않아도 된다.]]></summary></entry></feed>