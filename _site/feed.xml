<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2023-07-20T22:27:42+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">froggydisk</title><subtitle>This is for frogs in the world.</subtitle><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><entry><title type="html">[React Native] TextInput으로 받은 String을 Number 타입으로 바꿔주기</title><link href="http://localhost:4000/26th-post/" rel="alternate" type="text/html" title="[React Native] TextInput으로 받은 String을 Number 타입으로 바꿔주기" /><published>2023-07-20T00:00:00+07:00</published><updated>2023-07-20T00:00:00+07:00</updated><id>http://localhost:4000/26th-post</id><content type="html" xml:base="http://localhost:4000/26th-post/"><![CDATA[<p>TextInput 안에서 받은 <code class="language-plaintext highlighter-rouge">String</code> 타입 숫자값를 알아서 <code class="language-plaintext highlighter-rouge">Number</code> 타입으로 변경되게 하고 싶었는데 이렇게 해주니 에러가 났다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nc">TextInput</span>
    <span class="n">value</span><span class="o">={</span><span class="n">data</span><span class="o">.</span><span class="na">year</span><span class="o">}</span>
    <span class="n">onChangeText</span><span class="o">={</span><span class="n">text</span> <span class="o">=&gt;</span> <span class="n">setData</span><span class="o">({...</span><span class="na">data</span><span class="o">,</span> <span class="nl">year:</span> <span class="nc">Number</span><span class="o">(</span><span class="n">text</span><span class="o">)})}</span>
<span class="o">/&gt;</span>
</code></pre></div></div>

<h3 id="에러-️">에러 ⚠️</h3>
<p><strong>Warning: Failed prop type: Invalid prop value of type number supplied to ForwardRef(TextInput), expected string.</strong> <br />
입력값이 <code class="language-plaintext highlighter-rouge">Number</code>로 바껴서 저장이 되므로 value값에 들어가는 데이터가 <code class="language-plaintext highlighter-rouge">Number</code> 타입이 되는데 value값은 <code class="language-plaintext highlighter-rouge">String</code> 값이어야 하기 때문에 에러가 발생한다.</p>

<p>이를 해결하기 위해 아래를 시도해본다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nc">TextInput</span>
    <span class="n">value</span><span class="o">={</span><span class="n">data</span><span class="o">.</span><span class="na">year</span><span class="o">.</span><span class="na">toString</span><span class="o">()}</span>
    <span class="n">onChangeText</span><span class="o">={</span><span class="n">text</span> <span class="o">=&gt;</span> <span class="n">setData</span><span class="o">({...</span><span class="na">data</span><span class="o">,</span> <span class="nl">year:</span> <span class="nc">Number</span><span class="o">(</span><span class="n">text</span><span class="o">)})}</span>
<span class="o">/&gt;</span>
</code></pre></div></div>
<p>간단하고 좋다. 
하지만 키보드를 <code class="language-plaintext highlighter-rouge">numeric</code>으로 해주지 않으면 키보드 입력에서 <code class="language-plaintext highlighter-rouge">String</code> 값을 잘못 넣는 순간 바로 <code class="language-plaintext highlighter-rouge">NaN</code>이 떠서 지워지지 않는 현상이 일어난다.<br />
잘 되기는 하지만 무언가 찝찝하기는 하다.<br />
좀 더 고민을 해보면, 입력을 끝낼 때 <code class="language-plaintext highlighter-rouge">Number</code>로 타입변환을 해주는 방법도 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">TextInput</span>
    <span class="nx">value</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="p">.</span><span class="nx">year</span><span class="p">.</span><span class="nx">toString</span><span class="p">()}</span>    
    <span class="nx">onChangeText</span><span class="o">=</span><span class="p">{</span><span class="nx">text</span> <span class="o">=&gt;</span> <span class="nx">setData</span><span class="p">({...</span><span class="nx">data</span><span class="p">,</span> <span class="na">year</span><span class="p">:</span> <span class="nx">text</span><span class="p">})}</span>
    <span class="nx">onEndEditing</span><span class="o">=</span><span class="p">{()</span> <span class="o">=&gt;</span>
      <span class="nx">setData</span><span class="p">({...</span><span class="nx">data</span><span class="p">,</span> <span class="na">year</span><span class="p">:</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">year</span><span class="p">)})</span>
    <span class="p">}</span>    
    <span class="p">...</span>
<span class="o">/&gt;</span>
</code></pre></div></div>

<p>이 방법에서는 <code class="language-plaintext highlighter-rouge">String</code> 값을 입력하더라도 <code class="language-plaintext highlighter-rouge">NaN</code>이 나타나지 않는다. 하지만 <code class="language-plaintext highlighter-rouge">Number</code>로 형변환을 해야하는 경우는 보통 타입이 강제되는 경우가 많기 때문에 (API request 등) NaN이 안 나타난다고 해서 안심할 만한 상황은 아니다. 오히려 키보드를 <code class="language-plaintext highlighter-rouge">numeric</code>으로 하고 이중으로 타입 검사를 해주는 편이 안전하다.</p>

<p>이러한 경우는 엣지 케이스가 많기 때문에 항상 이것저것 테스트 시나리오를 고려해야한다. 
예를 들면 <code class="language-plaintext highlighter-rouge">numeric</code> 키보드에서 숫자만 받는다고 타입 검사를 안하다가 복사 붙여넣기를 하는 유저를 만나 오류를 직면할 수도 있는 것이다.</p>

<p>이렇게 정형화되어 있는 패턴에서는 TDD가 필요한 이유를 절실히 느낀다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[TextInput 안에서 받은 String 타입 숫자값를 알아서 Number 타입으로 변경되게 하고 싶었는데 이렇게 해주니 에러가 났다.]]></summary></entry><entry><title type="html">[k8s] 새로운 워커노드를 추가하여 서버 증설하기</title><link href="http://localhost:4000/25th-post/" rel="alternate" type="text/html" title="[k8s] 새로운 워커노드를 추가하여 서버 증설하기" /><published>2023-07-04T00:00:00+07:00</published><updated>2023-07-04T00:00:00+07:00</updated><id>http://localhost:4000/25th-post</id><content type="html" xml:base="http://localhost:4000/25th-post/"><![CDATA[<p>마스터 노드의 설정이 이미 되어 있고 추가할 워커노드의 OS가 우분투 20.04 버전인 경우를 기준으로 설명하겠다.</p>

<hr />
<hr />
<h1 id="-요약">📖 요약</h1>
<p>● docker<br />
● kubelet<br />
● kubeadm<br />
● kubectl<br />
새로운 워커노드에 위 4가지를 설치해준다.<br />
그리고 마스터 노드에서 토큰을 발급하여 새로 연결할 워커노드에 입력해주면 끝이다.</p>

<hr />
<hr />

<h1 id="-진행">🎬 진행</h1>
<p>생각보다 몹시 간단하다. 이제 하나하나 차근차근 진행해보자.</p>

<h3 id="docker-설치">docker 설치</h3>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg | <span class="nb">sudo </span>gpg <span class="nt">--dearmor</span> <span class="nt">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg
<span class="nb">echo</span> <span class="se">\</span>
  <span class="s2">"deb [arch=</span><span class="si">$(</span>dpkg <span class="nt">--print-architecture</span><span class="si">)</span><span class="s2"> signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu </span><span class="se">\</span><span class="s2">
  </span><span class="si">$(</span>lsb_release <span class="nt">-cs</span><span class="si">)</span><span class="s2"> stable"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/docker.list <span class="o">&gt;</span> /dev/null
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>docker-ce docker-ce-cli containerd.io
<span class="nb">sudo </span>docker version
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>docker
<span class="nb">sudo </span>systemctl start docker
</code></pre></div></div>

<h3 id="kubelet-kubeadm-kubectl-설치">kubelet, kubeadm, kubectl 설치</h3>
<p>한 줄씩 잘 입력해준다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> apt-transport-https ca-certificates curl
curl <span class="nt">-s</span> https://packages.cloud.google.com/apt/doc/apt-key.gpg | <span class="nb">sudo </span>apt-key add -
<span class="nb">echo</span> <span class="s2">"deb http://apt.kubernetes.io/ kubernetes-xenial main"</span> | <span class="nb">sudo tee</span> /etc/apt/sources.list.d/kubernetes.list
<span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> kubelet kubeadm kubectl
<span class="nb">sudo </span>apt-mark hold kubelet kubeadm kubectl
<span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl restart kubelet
</code></pre></div></div>

<h3 id="토큰-발급-및-등록">토큰 발급 및 등록</h3>
<p>우선, 마스터 노드에서 토큰을 발급한다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>kubeadm token create <span class="nt">--print-join-command</span>
</code></pre></div></div>
<p>이렇게 하면 <code class="language-plaintext highlighter-rouge">kubeadm join &lt;Kubernetes API Server:PORT&gt; --token &lt;Token 값&gt; --discovery-token-ca-cert-hash sha256:&lt;Hash 값&gt;</code> 이러한 형태의 결과값이 나오는데 그대로 복사해서 새로운 워커노드 터미널에 붙여넣기 해주면 된다.</p>

<p>각각의 값은 다음과 같이 확인할 수 있다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># kubectl이 바라보는 API 서버 주소</span>
kubectl cluster-info
<span class="c"># token 값 확인</span>
kubeadm token list
<span class="c"># hash 값 확인</span>
openssl x509 <span class="nt">-pubkey</span> <span class="nt">-in</span> /etc/kubernetes/pki/ca.crt | openssl rsa <span class="nt">-pubin</span> <span class="nt">-outform</span> der 2&gt;/dev/null | openssl dgst <span class="nt">-sha256</span> <span class="nt">-hex</span> | <span class="nb">sed</span> <span class="s1">'s/^.* //'</span>
</code></pre></div></div>

<h3 id="-에러">🔒 에러</h3>
<p>위의 과정에서 아마도 다음과 같은 에러가 발생할 것이다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>error execution phase preflight: <span class="o">[</span>preflight] Some fatal errors occurred:
<span class="o">[</span>ERROR CRI]: container runtime is not running: output: <span class="nb">time</span><span class="o">=</span><span class="s2">"2020-11-25T12:58:32Z"</span> <span class="nv">level</span><span class="o">=</span>fatal <span class="nv">msg</span><span class="o">=</span><span class="s2">"getting status of runtime failed: rpc error: code = Unimplemented desc = unknown service runtime.v1alpha2.RuntimeService"</span>
, error: <span class="nb">exit </span>status 1
</code></pre></div></div>

<h3 id="-해결">🔑 해결</h3>
<p>아래와 같이 해결하면 된다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo rm</span> /etc/containerd/config.toml
<span class="nb">sudo </span>systemctl restart containerd
</code></pre></div></div>

<p>항상 느끼지만 대부분의 쿠버네티스 오류는 kubelet, docker, containerd, calico 이 네가지에서 자주 발생하는 것 같다.<br />
마지막으로 마스터노드에 들어가서 <code class="language-plaintext highlighter-rouge">kubectl get node</code>를 해보자. 잘 인식이 된다면 성공이다.</p>

<h1 id="참고">참고</h1>
<p><a href="https://confluence.curvc.com/pages/releaseview.action?pageId=98048155">Ubuntu에서 쿠버네티스(k8s) 설치 가이드</a></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Kubernetes, On-premise" /><summary type="html"><![CDATA[마스터 노드의 설정이 이미 되어 있고 추가할 워커노드의 OS가 우분투 20.04 버전인 경우를 기준으로 설명하겠다.]]></summary></entry><entry><title type="html">[React Native] 안드로이드 스튜디오 Add configuration에서 No module만 선택 가능한 현상</title><link href="http://localhost:4000/24th-post/" rel="alternate" type="text/html" title="[React Native] 안드로이드 스튜디오 Add configuration에서 No module만 선택 가능한 현상" /><published>2023-07-03T00:00:00+07:00</published><updated>2023-07-03T00:00:00+07:00</updated><id>http://localhost:4000/24th-post</id><content type="html" xml:base="http://localhost:4000/24th-post/"><![CDATA[<h3 id="-에러">🔒 에러</h3>

<p>React Native로 앱을 만들다보면 iOS 시뮬레이터가 너무 편해서 안드로이드를 소홀히 하게 되는 때가 있다.<br />
안드로이드 apk 파일을 건네줄 필요가 있어서 오랜만에 안드로이드 스튜디오를 켰는데 이상하게 Run 아이콘이 있어야 할 자리에 <code class="language-plaintext highlighter-rouge">add configuration</code> 밖에 보이지 않았다.
인터넷을 찾아보니 module을 추가해주면 된다는데 아무리 모듈을 추가하려고 해도 선택지에 <code class="language-plaintext highlighter-rouge">No module</code> 이외에 아무것도 뜨지 않는다.</p>

<h3 id="-해결">🔑 해결</h3>

<p>그렇다. 사람은 가끔 바보가 된다. VScode 켜듯이 아무 생각 없이 React Native 프로젝트 폴더를 열어버렸던 것이다.<br />
<strong>안드로이드 스튜디오에서는 프로젝터 폴더 안의 android 폴더를 열어주어야한다.</strong><br />
마치 Xcode에서 ios 폴더를 열어주는 것과 같다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, Android Studio" /><summary type="html"><![CDATA[🔒 에러]]></summary></entry><entry><title type="html">PyQt5가 다운로드 되지 않는 M1 맥북 이슈</title><link href="http://localhost:4000/23th-post/" rel="alternate" type="text/html" title="PyQt5가 다운로드 되지 않는 M1 맥북 이슈" /><published>2023-05-09T00:00:00+07:00</published><updated>2023-05-09T00:00:00+07:00</updated><id>http://localhost:4000/23th-post</id><content type="html" xml:base="http://localhost:4000/23th-post/"><![CDATA[<h3 id="-에러">🔒 에러</h3>

<p><strong>pip install PyQt5를 해도 Preparing metadata(pyproject.toml)에서 넘어가지 않는 M1 맥북 이슈</strong>를 만났다. <em>(metadata-generation-failed, subprocess-exited-with-error)</em><br />
문제 해결에 앞서 라이브러리 선택의 여유가 있는 사람들은 Pyside6나 PyQt6도 고려해보길 권한다.</p>

<p>여러가지로 테스트 해본 결과는 다음과 같다.</p>

<p>📄 테스트 리스트</p>
<ul>
  <li>pip install pyqt5 (실패)</li>
  <li>pip3 install pyqt5 (실패)</li>
  <li>python -m pip install pyqt5 (실패)</li>
  <li>python3 -m pip install pyqt5 (실패)</li>
</ul>

<h3 id="-해결">🔑 해결</h3>
<p>결국 해결방안은 Homebrew를 이용하는 것이었다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">arch</span> <span class="nt">-arm64</span> brew <span class="nb">install </span>pyqt5
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">pip list</code>, <code class="language-plaintext highlighter-rouge">brew list</code>로 잘 설치가 되었는지 확인한다. 설치가 안되었다면 brew reinstall로 재설치를 진행한다.<br />
만약 (conda)가상환경을 사용한다면 <code class="language-plaintext highlighter-rouge">python -m pip list</code> 와 <code class="language-plaintext highlighter-rouge">python3 -m pip list</code>를 둘 다 확인하여 어느곳에 설치되었는지 보고 상황에 맞게 python 또는 python3 명령어를 사용해야한다. 가상 환경이 아닌 로컬에서는 보통 <code class="language-plaintext highlighter-rouge">python -m pip list</code>와  <code class="language-plaintext highlighter-rouge">python3 -m pip list</code>의 결과가 같으므로 python과 python3 어느쪽을 사용하든 결과는 같다(따로 설정이 필요할 수 있다). 이후로 다른 라이브러리를 설치할 때도 명령어 버전에 맞게 설치해 주면 된다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> pip <span class="nb">install</span> <span class="o">[</span>라이브러리] 
혹은
python3 <span class="nt">-m</span> pip <span class="nb">install</span> <span class="o">[</span>라이브러리]
</code></pre></div></div>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Python, pip" /><summary type="html"><![CDATA[🔒 에러]]></summary></entry><entry><title type="html">[React Native] 리액트 네이티브에서 달력 구현하기</title><link href="http://localhost:4000/22th-post/" rel="alternate" type="text/html" title="[React Native] 리액트 네이티브에서 달력 구현하기" /><published>2023-04-24T00:00:00+07:00</published><updated>2023-04-24T00:00:00+07:00</updated><id>http://localhost:4000/22th-post</id><content type="html" xml:base="http://localhost:4000/22th-post/"><![CDATA[<h1 id="라이브러리">라이브러리</h1>
<hr />
<p>리액트 네이티브로 앱을 만들 때는 달력을 구현해야할 일이 생각보다 자주 생긴다. 어떤 앱이든 시간의 흐름에 따라 과거 정보를 조회하는 경우가 많기 때문인데, 그렇기에 직접 구현해두면 두고두고 쓸 일이 많을 것이다. 물론 훌륭한 라이브러리가 많기 때문에 시간이 충분하지 않은 사람은 다른 사람의 힘을 빌리는 것도 때론 중요하다. 필자 또한 다른 사람이 짜놓은 코드를 빌려다가 내부만 조금 고쳐쓰는 경우가 많다.<br />
그런 의미에서 오늘은 유명한 라이브러리 중 하나인 <a href="https://github.com/wix/react-native-calendars"><code class="language-plaintext highlighter-rouge">react-native-calendars</code></a>를 소개한다.</p>

<h1 id="설치">설치</h1>
<hr />
<p>npm을 통해 설치해준다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm i react-native-calendars
</code></pre></div></div>
<p>기본적인 사용법은 매우 간단하고 홈페이지에 자세한 설명이 나와있으니 참고하면 된다.</p>

<h1 id="기능-구현">기능 구현</h1>
<hr />
<p>문제가 있다면 날짜를 클릭하였을 때 onPress 이벤트 설정을 직접해주어야 한다는 것이었고 기본 모듈에서는 달력 위의 숫자들을 눌러도 아무런 일도 일어나지 않는다. Agenda 기능도 지원하고 있으나 원하는 형태가 아니어서 어쩔 수 없이 구글링을 통해 직접 구현하였다. (<a href="https://devbksheen.tistory.com/entry/React-Native-%EB%8B%AC%EB%A0%A5-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0">참고</a>) 예시 코드는 다음과 같다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="nx">React</span><span class="p">,</span> <span class="p">{</span><span class="nx">useState</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">View</span><span class="p">,</span> <span class="nx">Text</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">SafeAreaView</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native-safe-area-context</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span><span class="nx">CalendarList</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">react-native-calendars</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">CalendarView</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">posts</span> <span class="o">=</span> <span class="p">[</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
      <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">제목입니다.</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">contents</span><span class="p">:</span> <span class="dl">'</span><span class="s1">내용입니다.</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">date</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2022-10-08</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
      <span class="na">id</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
      <span class="na">title</span><span class="p">:</span> <span class="dl">'</span><span class="s1">제목입니다.</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">contents</span><span class="p">:</span> <span class="dl">'</span><span class="s1">내용입니다.</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">date</span><span class="p">:</span> <span class="dl">'</span><span class="s1">2022-10-09</span><span class="dl">'</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">];</span>

<span class="c1">// 클릭한 날짜를 담는 변수</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">date</span><span class="p">,</span> <span class="nx">setDate</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">();</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">selectedDate</span><span class="p">,</span> <span class="nx">setSelectedDate</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">();</span>

<span class="c1">// posts 안에 들어있는 모든 일정을 달력에 표시하기 위한 변수</span>
  <span class="kd">const</span> <span class="nx">markedDates</span> <span class="o">=</span> <span class="nx">posts</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">acc</span><span class="p">,</span> <span class="nx">current</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">acc</span><span class="p">[</span><span class="nx">current</span><span class="p">.</span><span class="nx">date</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="na">marked</span><span class="p">:</span> <span class="kc">true</span><span class="p">};</span>
    <span class="k">return</span> <span class="nx">acc</span><span class="p">;</span>
  <span class="p">},</span> <span class="p">{});</span>

<span class="c1">// 날짜가 선택되었을 때 해당 날짜에 배경색을 입히기 위한 변수</span>
  <span class="kd">const</span> <span class="nx">markedSelectedDates</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">...</span><span class="nx">markedDates</span><span class="p">,</span>
    <span class="p">[</span><span class="nx">selectedDate</span><span class="p">]:</span> <span class="p">{</span>
      <span class="na">selected</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
      <span class="na">marked</span><span class="p">:</span> <span class="nx">markedDates</span><span class="p">[</span><span class="nx">selectedDate</span><span class="p">]?.</span><span class="nx">marked</span><span class="p">,</span>
    <span class="p">},</span>
  <span class="p">};</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">SafeAreaView</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="na">height</span><span class="p">:</span> <span class="dl">'</span><span class="s1">100%</span><span class="dl">'</span><span class="p">}}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">CalendarList</span>
        <span class="nx">horizontal</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span>
        <span class="nx">pagingEnabled</span><span class="o">=</span><span class="p">{</span><span class="kc">true</span><span class="p">}</span>
        <span class="nx">markedDates</span><span class="o">=</span><span class="p">{</span><span class="nx">markedSelectedDates</span><span class="p">}</span>
        <span class="nx">onDayPress</span><span class="o">=</span><span class="p">{</span><span class="nx">day</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="nx">setDate</span><span class="p">(</span><span class="nx">day</span><span class="p">);</span>
          <span class="nx">setSelectedDate</span><span class="p">(</span><span class="nx">day</span><span class="p">.</span><span class="nx">dateString</span><span class="p">);</span>
        <span class="p">}}</span>
        <span class="nx">theme</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span>
          <span class="na">selectedDayBackgroundColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#959CA7</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">monthTextColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#959CA7</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">textDayFontWeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">500</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">textMonthFontWeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">600</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">textDayHeaderFontWeight</span><span class="p">:</span> <span class="dl">'</span><span class="s1">300</span><span class="dl">'</span><span class="p">,</span>
          <span class="na">textMonthFontSize</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span>
        <span class="p">}}</span>
      <span class="sr">/</span><span class="err">&gt;
</span>      <span class="p">{</span><span class="nx">date</span> <span class="o">&amp;&amp;</span> <span class="p">(</span>
        <span class="o">&lt;</span><span class="nx">View</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="na">marginLeft</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span> <span class="na">marginTop</span><span class="p">:</span> <span class="mi">10</span><span class="p">}}</span><span class="o">&gt;</span>
          <span class="o">&lt;</span><span class="nx">Text</span> <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="na">fontSize</span><span class="p">:</span> <span class="mi">11</span><span class="p">,</span> <span class="na">color</span><span class="p">:</span> <span class="dl">'</span><span class="s1">#959CA7</span><span class="dl">'</span><span class="p">,</span> <span class="na">textAlign</span><span class="p">:</span> <span class="dl">'</span><span class="s1">right</span><span class="dl">'</span><span class="p">}}</span><span class="o">&gt;</span>
            <span class="na">Test</span><span class="p">:</span> <span class="nx">현재</span> <span class="nx">선택하신</span> <span class="nx">날짜는</span> <span class="p">{</span><span class="nx">date</span><span class="p">.</span><span class="nx">day</span><span class="p">}</span><span class="nx">일</span> <span class="nx">입니다</span><span class="p">.</span>
          <span class="o">&lt;</span><span class="sr">/Text</span><span class="err">&gt;
</span>        <span class="o">&lt;</span><span class="sr">/View</span><span class="err">&gt;
</span>      <span class="p">)}</span>
    <span class="o">&lt;</span><span class="sr">/SafeAreaView</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">CalendarView</span><span class="p">;</span>
</code></pre></div></div>

<h1 id="버그">버그</h1>
<hr />

<p>커스터마이징을 적용할 때는 공식 문서 말고도 내부 코드를 뜯어보는 것을 추천한다.</p>

<h3 id="-에러-1">🔒 에러 1</h3>

<p>WeekCalendar에서 헤더를 한국어로 바꾸면 컨테이너와 영역이 겹치는 일이 발생한다. <a href="https://wix.github.io/react-native-calendars/docs/Components/Calendar">공식 문서</a>에서는 스타일 수정 방법에 대해 아래와 같이 설명하고 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">theme</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span>
  <span class="na">arrowColor</span><span class="p">:</span> <span class="dl">'</span><span class="s1">white</span><span class="dl">'</span><span class="p">,</span>
  <span class="dl">'</span><span class="s1">stylesheet.calendar.header</span><span class="dl">'</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">week</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">marginTop</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span>
      <span class="na">flexDirection</span><span class="p">:</span> <span class="dl">'</span><span class="s1">row</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">justifyContent</span><span class="p">:</span> <span class="dl">'</span><span class="s1">space-between</span><span class="dl">'</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span> <span class="p">}</span>
</code></pre></div></div>
<p>하지만 이는 WeekCalaendar에서는 적용이 되지 않는다. 해당 기능이 위치한 style.js 소스코드를 살펴보니 아래와 같이 export 방식이 달랐다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...(</span><span class="nx">theme</span><span class="p">?.</span><span class="nx">stylesheet</span><span class="p">?.</span><span class="nx">expandable</span><span class="p">?.</span><span class="nx">main</span> <span class="o">||</span> <span class="p">{})</span>
</code></pre></div></div>

<h3 id="-해결">🔑 해결</h3>
<p>node_modules 폴더 안을 고치는 것은 관리 이슈가 커지기 때문에 아래와 같이 내 코드에서 직접 설정해주는 방식을 택하였다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">CalendarProvider</span>
  <span class="nx">date</span><span class="o">=</span><span class="p">{</span><span class="nx">date</span><span class="p">}</span>
  <span class="nx">onDateChanged</span><span class="o">=</span><span class="p">{</span><span class="nx">d</span> <span class="o">=&gt;</span> <span class="nx">setDate</span><span class="p">(</span><span class="nx">d</span><span class="p">)}</span>
  <span class="nx">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span><span class="na">flex</span><span class="p">:</span> <span class="mi">0</span><span class="p">}</span> <span class="p">}</span><span class="o">&gt;</span>
  <span class="o">&lt;</span><span class="nx">WeekCalendar</span>
    <span class="nx">displayLoadingIndicator</span>
    <span class="nx">allowShadow</span><span class="o">=</span><span class="p">{</span><span class="kc">false</span><span class="p">}</span>
    <span class="nx">theme</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span>
      <span class="na">textDayFontSize</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span>
      <span class="na">textDayHeaderFontSize</span><span class="p">:</span> <span class="mi">14</span><span class="p">,</span>
      <span class="na">stylesheet</span><span class="p">:</span> <span class="p">{</span><span class="na">expandable</span><span class="p">:</span> <span class="p">{</span><span class="na">main</span><span class="p">:</span> <span class="p">{</span><span class="na">container</span><span class="p">:</span> <span class="p">{</span><span class="na">marginTop</span><span class="p">:</span> <span class="mi">5</span><span class="p">}}}},</span> <span class="c1">// &lt;- 여기</span>
    <span class="p">}</span> <span class="p">}</span>
  <span class="sr">/</span><span class="err">&gt;
</span><span class="o">&lt;</span><span class="sr">/CalendarProvider</span><span class="err">&gt;
</span></code></pre></div></div>

<p>theme 안에서 <code class="language-plaintext highlighter-rouge">stylesheet: {expandable: {main: {container: {marginTop: 5}}}}</code>와 같이 설정해주면 된다.</p>

<h3 id="-에러-2">🔒 에러 2</h3>

<p>WeekCalendar을 사용할 때 로딩이 너무 오래 걸리는 이슈가 존재한다. 📌 <a href="https://github.com/wix/react-native-calendars/issues/2214">깃허브 이슈</a></p>

<h3 id="-해결-1">🔑 해결</h3>
<p>이는 RecyclerListView에서 너무 많은 페이지가 미리 렌더링되고 있기 때문이다. RecyclerListView에 대한 정보는 <a href="https://github.com/Flipkart/recyclerlistview">다음</a>을 확인하자. 해당 페이지에서는 renderAheadOffset의 값을 가능한 낮게 설정하는 것을 권하고 있다. 높게 설정할수록 계산 비용이 많아지므로 로딩이 오래 걸리게 된다.<br />
따라서 <code class="language-plaintext highlighter-rouge">node_modules/react-native-calendars/src/infinite-list/index.js</code>로 이동하여 RecyclerListView의 prop을 아래와 같이 바꾸어주면 된다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">RecyclerListView</span> 
<span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">listRef</span><span class="p">}</span> 
<span class="nx">isHorizontal</span><span class="o">=</span><span class="p">{</span><span class="nx">isHorizontal</span><span class="p">}</span> 
<span class="p">...</span> 
<span class="nx">renderAheadOffset</span><span class="o">=</span><span class="p">{</span><span class="mi">0</span> <span class="o">*</span> <span class="nx">pageWidth</span><span class="p">}</span>   <span class="c1">// &lt;- 숫자를 0으로 수정한다.</span>
<span class="p">...</span><span class="o">/&gt;</span>
</code></pre></div></div>

<p>누군가에게는 도움이 되었길 바란다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, react-native-calendars" /><summary type="html"><![CDATA[라이브러리 리액트 네이티브로 앱을 만들 때는 달력을 구현해야할 일이 생각보다 자주 생긴다. 어떤 앱이든 시간의 흐름에 따라 과거 정보를 조회하는 경우가 많기 때문인데, 그렇기에 직접 구현해두면 두고두고 쓸 일이 많을 것이다. 물론 훌륭한 라이브러리가 많기 때문에 시간이 충분하지 않은 사람은 다른 사람의 힘을 빌리는 것도 때론 중요하다. 필자 또한 다른 사람이 짜놓은 코드를 빌려다가 내부만 조금 고쳐쓰는 경우가 많다. 그런 의미에서 오늘은 유명한 라이브러리 중 하나인 react-native-calendars를 소개한다.]]></summary></entry><entry><title type="html">[Jenkins] 젠킨스에서 도커 이미지를 빌드할 때 발생하는 이슈들</title><link href="http://localhost:4000/21th-post/" rel="alternate" type="text/html" title="[Jenkins] 젠킨스에서 도커 이미지를 빌드할 때 발생하는 이슈들" /><published>2023-04-02T00:00:00+07:00</published><updated>2023-04-02T00:00:00+07:00</updated><id>http://localhost:4000/21th-post</id><content type="html" xml:base="http://localhost:4000/21th-post/"><![CDATA[<h1 id="작업-환경">작업 환경</h1>
<hr />
<p>젠킨스를 통해 깃허브에서 도커 이미지를 빌드하여 이미지 저장소로 올리는 과정에서 발생하는 이슈들을 다룹니다.<br />
이 글은 CI 파이프라인 구축을 설명하고 있지 않습니다. 환경 구축은 아래 출처를 참고해주세요.</p>

<p>● <a href="https://smoh.tistory.com/420">Jenkins로 Docker 이미지 빌드하기</a><br />
● <a href="https://zunoxi.tistory.com/131">젠킨스 연동 및 push 하기</a></p>

<h1 id="설정-파일">설정 파일</h1>
<hr />

<p>젠킨스가 깃허브에서 코드를 받아와서 도커 이미지를 빌드할 때 필요로 하는 파일이 두 가지 존재한다. 하나는 Jenkinsfile이고 나머지는 Dockerfile이다. 두 파일은 코드의 루트 경로에 위치하고 있어야 한다.<br />
처음 작성할 때 막막했던 기억이 있어 누군가는 필요할 것 같아 첨부해 둔다.</p>

<h3 id="-jenkinsfile">📌 Jenkinsfile</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">app</span>
<span class="n">node</span> <span class="p">{</span>        
    <span class="n">stage</span><span class="p">(</span><span class="s">'Checkout'</span><span class="p">){</span>            
        <span class="n">checkout</span> <span class="n">scm</span>            
    <span class="p">}</span>
    
    <span class="n">stage</span><span class="p">(</span><span class="s">'Build image'</span><span class="p">){</span>                       
        <span class="n">app</span> <span class="o">=</span> <span class="n">docker</span><span class="p">.</span><span class="n">build</span><span class="p">(</span><span class="s">"[저장소도메인]/[프로젝트명]/[이미지명]"</span><span class="p">)</span>
        <span class="c1"># 예를 들면 "harbor.test.io/example-project/test-image"
</span>        <span class="c1"># 하버의 경우 프로젝트는 사전에 생성해 놓아야하지만 이미지는 자동 생성된다.
</span>    <span class="p">}</span>
	
    <span class="c1"># withRegistry 안에는 저장소 도메인과 젠킨스에 미리 등록해 놓은 Credential의 ID를 적어준다.
</span>    <span class="c1"># 예를 들면 docker.withRegistry('https://harbor.test.io', 'Harbor')
</span>    <span class="n">stage</span><span class="p">(</span><span class="s">'Push image'</span><span class="p">){</span> 
        <span class="n">docker</span><span class="p">.</span><span class="n">withRegistry</span><span class="p">(</span><span class="s">'https://[저장소도메인]'</span><span class="p">,</span> <span class="s">'[CredID]'</span><span class="p">){</span>
            <span class="n">app</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="s">"${env.BUILD_NUMBER}"</span><span class="p">)</span>
            <span class="n">app</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="s">"latest"</span><span class="p">)</span>
        <span class="p">}</span>                
    <span class="p">}</span>		
<span class="p">}</span>
</code></pre></div></div>

<p>모든 이미지에는 젠킨스 프로세스 번호가 붙고 가장 최근에 올라간 도커 이미지에만 latest 태그가 붙는다.</p>

<h3 id="-dockerfile">📌 Dockerfile</h3>
<p>Dockerfile은 구축하고자 하는 환경에 따라 이미지 파일이 다를 수 있다. 본인의 환경에 맞는 이미지를 가져오자.<br />
아래는 python이 깔려있는 nodeJS 이미지를 이용하여 서버를 실행하는 예시이다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FROM</span> <span class="n">nikolaik</span><span class="o">/</span><span class="n">python</span><span class="o">-</span><span class="n">nodejs</span><span class="p">:</span><span class="n">python3</span><span class="p">.</span><span class="mi">8</span><span class="o">-</span><span class="n">nodejs16</span> 

<span class="n">WORKDIR</span> <span class="o">/</span><span class="n">app</span>

<span class="n">COPY</span> <span class="p">.</span> <span class="o">/</span><span class="n">app</span>

<span class="n">RUN</span> <span class="n">npm</span> <span class="n">install</span> <span class="o">&amp;&amp;</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">r</span> <span class="n">requirements</span><span class="p">.</span><span class="n">txt</span>

<span class="n">EXPOSE</span> <span class="mi">8080</span>

<span class="n">CMD</span> <span class="p">[</span> <span class="s">"node"</span><span class="p">,</span> <span class="s">"app.js"</span> <span class="p">]</span>
</code></pre></div></div>
<p>COPY를 할 때에는 COPY [복사해 올 곳] [복사해 갈 곳] 순으로 적는데 복사해 올 곳은 상대경로로, 복사해 갈 곳은 절대경로로 적는 것이 원칙이다. 꼭 지키지 않아도 동작에는 이상이 없긴 하다.</p>

<h1 id="에러">에러</h1>
<hr />

<p>다음은 위의 구축 과정에서 발생하기 쉬운 에러와 그 해결 방안을 설명한다.</p>

<h3 id="-에러-1">🔒 에러 1</h3>

<p><strong><code class="language-plaintext highlighter-rouge">groovy.lang.missingpropertyexception: No such property: docker for class: groovy.lang.Binding</code></strong></p>

<p>🔑 해결: Jenkins에서 Docker Pipeline 플러그인 설치 (<a href="https://may9noy.tistory.com/990">참고</a>)</p>

<h3 id="-에러-2">🔒 에러 2</h3>

<p><strong><code class="language-plaintext highlighter-rouge">/var/run/docker.sock: connect: permission denied</code></strong></p>

<p>🔑 해결: 모든 노드에서 sudo chmod 666 /var/run/docker.sock로 접근 권한 허용(<a href="https://may9noy.tistory.com/990">참고</a>)</p>

<h3 id="-에러-3">🔒 에러 3</h3>

<p><strong><code class="language-plaintext highlighter-rouge">script.sh 1 docker not found</code></strong></p>

<p>🔑 해결: jenkins deployment 파일에서 volume mount를 추가 (<a href="https://anfrhrl5555.tistory.com/137">참고</a>)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">apiVersion</span><span class="p">:</span> <span class="n">apps</span><span class="o">/</span><span class="n">v1</span>
<span class="n">kind</span><span class="p">:</span> <span class="n">Deployment</span>
<span class="n">metadata</span><span class="p">:</span>
  <span class="n">name</span><span class="p">:</span> <span class="n">jenkins</span>
  <span class="n">namespace</span><span class="p">:</span> <span class="n">jenkins</span>
<span class="n">spec</span><span class="p">:</span>
  <span class="n">replicas</span><span class="p">:</span> <span class="mi">1</span>
  <span class="n">selector</span><span class="p">:</span>
    <span class="n">matchLabels</span><span class="p">:</span>
      <span class="n">app</span><span class="p">:</span> <span class="n">jenkins</span>
  <span class="n">template</span><span class="p">:</span>
    <span class="n">metadata</span><span class="p">:</span>
      <span class="n">labels</span><span class="p">:</span>
        <span class="n">app</span><span class="p">:</span> <span class="n">jenkins</span>
    <span class="n">spec</span><span class="p">:</span>
      <span class="n">containers</span><span class="p">:</span>
      <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">jenkins</span>
        <span class="n">image</span><span class="p">:</span> <span class="n">jenkins</span><span class="o">/</span><span class="n">jenkins</span><span class="p">:</span><span class="n">lts</span>
        <span class="n">ports</span><span class="p">:</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">httpe</span><span class="o">-</span><span class="n">port</span>
            <span class="n">containerPort</span><span class="p">:</span> <span class="mi">8080</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">jnlp</span><span class="o">-</span><span class="n">port</span>
            <span class="n">containerPort</span><span class="p">:</span> <span class="mi">50000</span>
        <span class="n">volumeMounts</span><span class="p">:</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">jenkins</span><span class="o">-</span><span class="n">data</span>
            <span class="n">mountPath</span><span class="p">:</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">jenkins_home</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">-</span><span class="n">socket</span>
            <span class="n">mountPath</span><span class="p">:</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">docker</span><span class="p">.</span><span class="n">sock</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">-</span><span class="nb">bin</span>
            <span class="n">mountPath</span><span class="p">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">docker</span> 
      <span class="n">volumes</span><span class="p">:</span>
        <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">jenkins</span><span class="o">-</span><span class="n">data</span>
          <span class="n">persistentVolumeClaim</span><span class="p">:</span>
            <span class="n">claimName</span><span class="p">:</span> <span class="n">jenkins</span><span class="o">-</span><span class="n">pvc</span>
        <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">-</span><span class="n">socket</span>
          <span class="n">hostPath</span><span class="p">:</span>
            <span class="n">path</span><span class="p">:</span> <span class="o">/</span><span class="n">var</span><span class="o">/</span><span class="n">run</span><span class="o">/</span><span class="n">docker</span><span class="p">.</span><span class="n">sock</span>
            <span class="nb">type</span><span class="p">:</span> <span class="n">Socket</span>
        <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">docker</span><span class="o">-</span><span class="nb">bin</span>
          <span class="n">hostPath</span><span class="p">:</span>
            <span class="n">path</span><span class="p">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">docker</span>
            <span class="nb">type</span><span class="p">:</span> <span class="n">File</span>
</code></pre></div></div>

<h3 id="-에러-4">🔒 에러 4</h3>

<p><strong><code class="language-plaintext highlighter-rouge">stat /var/lib/docker/tmp: no such file or directory</code></strong></p>

<p>🔑 해결: Jenkins 파드가 돌고 있는 노드에 도커가 제대로 실행되고 있지 않는 상태일 가능성이 높다. 해당 노드에서 sudo service docker restart를 한 뒤 /var/lib/docker 파일 안에 파일이 제대로 생성되어 있는지 확인한다. docker파일은 sudo chmod 755 docker로 접근 권한을 주어야 확인이 가능하다.</p>

<h1 id="결과">결과</h1>

<p>33번만에 성공했다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Jenkins, Docker, Harbor" /><summary type="html"><![CDATA[작업 환경 젠킨스를 통해 깃허브에서 도커 이미지를 빌드하여 이미지 저장소로 올리는 과정에서 발생하는 이슈들을 다룹니다. 이 글은 CI 파이프라인 구축을 설명하고 있지 않습니다. 환경 구축은 아래 출처를 참고해주세요.]]></summary></entry><entry><title type="html">[Ubuntu] Nvidia 드라이버 설치 후 ssh 접속 불가 문제</title><link href="http://localhost:4000/20th-post/" rel="alternate" type="text/html" title="[Ubuntu] Nvidia 드라이버 설치 후 ssh 접속 불가 문제" /><published>2023-03-23T00:00:00+07:00</published><updated>2023-03-23T00:00:00+07:00</updated><id>http://localhost:4000/20th-post</id><content type="html" xml:base="http://localhost:4000/20th-post/"><![CDATA[<h1 id="대상">대상</h1>
<p>이 글은 Nvidia GPU가 설치된 우분투 서버에 ssh 접속을 하기 위해 세팅을 하시는 분들을 대상으로 합니다.</p>

<h1 id="1-nvidia-드라이버-설치">1. Nvidia 드라이버 설치</h1>

<h3 id="장치-확인">장치 확인</h3>
<p>먼저 GPU 장치가 잘 인식되어 있는지 확인한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lshw</span> <span class="o">-</span><span class="n">C</span> <span class="n">display</span>
</code></pre></div></div>

<h3 id="설치">설치</h3>
<p>Nvidia 드라이버 설치를 위해서는 우선 <code class="language-plaintext highlighter-rouge">ubuntu-drivers</code>가 필요합니다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">apt</span> <span class="n">install</span> <span class="n">ubuntu</span><span class="o">-</span><span class="n">drivers</span><span class="o">-</span><span class="n">common</span>
</code></pre></div></div>
<p>이후 ubuntu-drivers를 이용하여 권장 설치를 진행한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">add</span><span class="o">-</span><span class="n">apt</span><span class="o">-</span><span class="n">repository</span> <span class="n">ppa</span><span class="p">:</span><span class="n">graphics</span><span class="o">-</span><span class="n">drivers</span><span class="o">/</span><span class="n">ppa</span>
<span class="n">sudo</span> <span class="n">apt</span> <span class="n">update</span>
<span class="n">sudo</span> <span class="n">ubuntu</span><span class="o">-</span><span class="n">drivers</span> <span class="n">autoinstall</span>
</code></pre></div></div>
<p>시간이 조금 걸리므로 조급해하지 말자. 설치가 완료되었다면 재부팅으로 마무리한다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">reboot</span>
</code></pre></div></div>
<p>이제 <code class="language-plaintext highlighter-rouge">nvidia-smi</code> 명령어로 GPU의 현재 상태를 볼 수 있다.</p>

<p>혹시라도 귀찮아서 재부팅을 안하는 분은 아래와 같은 에러를 만날 수 있으니 귀찮더라도 꼭 하자.</p>

<p>⚠️ <strong>NVIDIA-SMI has failed because it couldn’t communicate with the NVIDIA driver.</strong><br />
<strong>Make sure that the latest NVIDIA driver is installed and running.</strong></p>

<p>nvidia-smi보다 좀 더 간단하게 볼 수 있는 툴로는 <code class="language-plaintext highlighter-rouge">gpustat</code>을 추천한다. 설치도 간단하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span> <span class="n">install</span> <span class="n">gpustat</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">gpustat</code>을 입력하면 GPU 상태를 보여준다.</p>

<h3 id="참고">참고</h3>
<p><a href="https://pstudio411.tistory.com/entry/Ubuntu-2004-Nvidia%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0">Nvidia드라이버 설치하기</a></p>

<p><br /></p>

<h1 id="2-설치-이후-만나는-상황">2. 설치 이후 만나는 상황</h1>

<h3 id="-문제">🔒 문제</h3>

<p>📍 <strong><code class="language-plaintext highlighter-rouge">처음에는 ssh가 잘 되다가 어느 순간부터 접속이 되지 않는다</code></strong></p>

<p>Nvidia 드라이버의 호환성 문제로 인해 컴퓨터가 다운되는 것이라고 예상해서 여러번의 재설치를 거쳤으나 해결되지 않았다.</p>

<p>이는 모니터를 연결해 놓지 않는 서버 컴퓨터의 특성상 놓치기 쉬운 부분인데 알고 보니 단순히 절전 모드에 들어간 것이었다.</p>

<p>Nvidia 드라이버를 설치하면 재부팅시 디폴트 모드가 GUI 모드로 변경되고 절전 모드도 자동으로 세팅된다.</p>

<p>이를 해결하기 위해서는 컴퓨터의 절전 모드 진입을 막아야 하는데 가능한 방법은 총 두 가지이다.</p>

<h3 id="-해결">🔑 해결</h3>

<p>📍 <strong><code class="language-plaintext highlighter-rouge">명령어로 절전 모드를 끈다</code></strong> (<a href="https://heekangpark.github.io/linux/ubuntu-server-sleep">참고</a>)</p>

<p>한 줄이면 가능하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">systemctl</span> <span class="n">mask</span> <span class="n">sleep</span><span class="p">.</span><span class="n">target</span> <span class="n">suspend</span><span class="p">.</span><span class="n">target</span> <span class="n">hibernate</span><span class="p">.</span><span class="n">target</span> <span class="n">hybrid</span><span class="o">-</span><span class="n">sleep</span><span class="p">.</span><span class="n">target</span>
</code></pre></div></div>

<p>아래 명령어로 설정이 잘 되었는지 확인한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">systemctl</span> <span class="n">status</span> <span class="n">sleep</span><span class="p">.</span><span class="n">target</span> <span class="n">suspend</span><span class="p">.</span><span class="n">target</span> <span class="n">hibernate</span><span class="p">.</span><span class="n">target</span> <span class="n">hybrid</span><span class="o">-</span><span class="n">sleep</span><span class="p">.</span><span class="n">target</span>
</code></pre></div></div>
<p><br /></p>

<p>📍 <strong><code class="language-plaintext highlighter-rouge">기본 모드를 CLI 모드로 전환한다</code></strong> (<a href="https://booiljung.github.io/technical_articles/linux/switch_gui_and_cli.html">참고</a>)</p>

<p>관련 설정 파일은 아래의 위치에 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">vim</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">default</span><span class="o">/</span><span class="n">grub</span>
</code></pre></div></div>

<p>다음 3가지 사항에 대해 수정한다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">GRUB_CMDLINE_LINUX_DEFAULT=""</code>를 주석 처리</li>
  <li><code class="language-plaintext highlighter-rouge">GRUB_CMDLINE_LINUX="text"</code>로 변경</li>
  <li><code class="language-plaintext highlighter-rouge">GRUB_TERMINAL=console</code>의 주석 제거</li>
</ul>

<p>esc → :wq → enter 순으로 변경 사항을 저장한 뒤 아래 명령어로 적용한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">update</span><span class="o">-</span><span class="n">grub</span> <span class="c1"># 변경 사항 적용
</span><span class="n">sudo</span> <span class="n">systemctl</span> <span class="nb">set</span><span class="o">-</span><span class="n">default</span> <span class="n">multi</span><span class="o">-</span><span class="n">user</span><span class="p">.</span><span class="n">target</span>
<span class="n">sudo</span> <span class="n">reboot</span> <span class="c1"># 재부팅
</span></code></pre></div></div>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Linux, Ubuntu, Nvidia" /><summary type="html"><![CDATA[대상 이 글은 Nvidia GPU가 설치된 우분투 서버에 ssh 접속을 하기 위해 세팅을 하시는 분들을 대상으로 합니다.]]></summary></entry><entry><title type="html">[k8s] 사설 저장소에서 도커 이미지 받아오기 실패</title><link href="http://localhost:4000/nineteenth-post/" rel="alternate" type="text/html" title="[k8s] 사설 저장소에서 도커 이미지 받아오기 실패" /><published>2023-03-22T00:00:00+07:00</published><updated>2023-03-22T00:00:00+07:00</updated><id>http://localhost:4000/nineteenth-post</id><content type="html" xml:base="http://localhost:4000/nineteenth-post/"><![CDATA[<h1 id="-에러">🔒 에러</h1>
<p>쿠버네티스에서 yaml 파일을 작성할 때 도커 이미지를 사용하는 파드를 생성하려고 했으나 제대로 생성이 되지 않고 계속해서 <code class="language-plaintext highlighter-rouge">ImagePullBackOff</code> 상태가 되었다. Kubernetes Dashboard를 통해서 보니 다음과 같은 <strong>401 Unauthorized</strong> 에러 메시지가 떠있었다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Failed to pull image: rpc error: code = Unknown desc = failed to pull and unpack image: 
failed to resolve reference: pulling from host failed with status code [manifests latest]: 
401 Unauthorized
</code></pre></div></div>

<p>사설 저장소(Private Registry)에서 이미지를 받아올 때 Secret을 사용해서 인증을 하게 되는데 아무래도 인증에 계속 실패하고 있는 듯하다. 분명 Secret을 등록해 두었는데도 에러가 사라지지 않아서 오랜시간 삽질을 하였다. Nginx를 통해서 들어올 때도 https 프로토콜로 요청하고 있으니 아무런 문제가 없는데 이상했다.</p>

<h1 id="-해결">🔑 해결</h1>

<p>결국 구글링을 계속한 끝에 다음과 같은 글을 발견했다.<br />
<strong><code class="language-plaintext highlighter-rouge">Secrets의 경우 파드와 같은 네임스페이스에 존재해야합니다.</code></strong> (<a href="https://velog.io/@numerok/harbor-사용-시-unauthorized-unauthorized-to-access-repository">참고</a>)</p>

<p>정신이 번쩍 들었다. 개발에는 꼼꼼함이 필수라는 것을 다시금 느낀다. 빠르게 Secret을 다시 만들었다. <br />
아래는 Secret을 만드는 명령어이다. 필자는 저장소로 Harbor를 사용하고 있다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kubectl create secret docker-registry harbor --docker-server=[저장소주소] 
--docker-username=[저장소ID] --docker-password=[저장소비밀번호] -n [네임스페이스]
</code></pre></div></div>
<p>마지막에 <code class="language-plaintext highlighter-rouge">-n [네임스페이스]</code>가 가장 중요하다. 이는 파드를 생성하는 네임스페이스와 같아야한다!
<code class="language-plaintext highlighter-rouge">kubectl get secrets -n [네임스페이스]</code> 명령어로 Secret이 잘 생성되었는지 확인해본다.<br />
이해를 돕기 위해 아래에 yaml 파일 예시도 함께 첨부한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># deployment.yaml 예
</span><span class="p">...</span>
    <span class="n">template</span><span class="p">:</span>
      <span class="n">metadata</span><span class="p">:</span>
        <span class="n">labels</span><span class="p">:</span>
          <span class="n">app</span><span class="p">:</span> <span class="n">test</span>            
      <span class="n">spec</span><span class="p">:</span>
        <span class="n">imagePullSecrets</span><span class="p">:</span> 
        <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">harbor</span>
        <span class="n">containers</span><span class="p">:</span>
          <span class="o">-</span> <span class="n">name</span><span class="p">:</span> <span class="n">test</span>
            <span class="n">image</span><span class="p">:</span> <span class="n">harbor</span><span class="p">.</span><span class="n">io</span><span class="o">/</span><span class="n">testImage</span><span class="p">:</span><span class="n">latest</span>
<span class="p">...</span>                        
</code></pre></div></div>
<p>누군가는 시간을 아꼈기를 바란다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Kubernetes, Harbor" /><summary type="html"><![CDATA[🔒 에러 쿠버네티스에서 yaml 파일을 작성할 때 도커 이미지를 사용하는 파드를 생성하려고 했으나 제대로 생성이 되지 않고 계속해서 ImagePullBackOff 상태가 되었다. Kubernetes Dashboard를 통해서 보니 다음과 같은 401 Unauthorized 에러 메시지가 떠있었다. Failed to pull image: rpc error: code = Unknown desc = failed to pull and unpack image: failed to resolve reference: pulling from host failed with status code [manifests latest]: 401 Unauthorized]]></summary></entry><entry><title type="html">[k8s] Jenkins에서 Credential 등록 불가 에러</title><link href="http://localhost:4000/eighteenth-post/" rel="alternate" type="text/html" title="[k8s] Jenkins에서 Credential 등록 불가 에러" /><published>2023-03-11T00:00:00+07:00</published><updated>2023-03-11T00:00:00+07:00</updated><id>http://localhost:4000/eighteenth-post</id><content type="html" xml:base="http://localhost:4000/eighteenth-post/"><![CDATA[<p align="center"><img src="https://github.com/froggydisk/froggydisk.github.io/blob/master/assets/img/18th.png?raw=true" /></p>

<h1 id="-credential을-등록하려해도-등록이-안-될-때">📌 Credential을 등록하려해도 등록이 안 될 때</h1>

<p>Jenkins와 GitHub Server를 연동하기 위해 Credential을 등록하는데 Add 버튼을 눌러도 제대로 등록이 되지 않았다.</p>

<p>(단, Username 항목에 연동하려는 서버의 유저 ID를 적고 ID 항목에는 각 Credential을 구분하기 위한 임의의 이름을 적었는지 확인하자. 단어가 헷갈릴 만하다.)</p>

<p>아무런 반응이 없어서 에러 메세지를 보기 위해 크롬에서 F12를 눌러 브라우저 콘솔창을 켰다.</p>

<p>그랬더니 다음과 같은 메시지를 띄워주고 있었다.</p>

<h3 id="-에러">🔒 에러</h3>

<p><strong><code class="language-plaintext highlighter-rouge">Mixed Content: The page was loaded over HTTPS, but requested an insecure script.</code></strong>
<strong><code class="language-plaintext highlighter-rouge">This request has been blocked; the content must be served over HTTPS.</code></strong></p>

<h3 id="-해결">🔑 해결</h3>

<p>이는 Nginx의 프록시 설정이 제대로 되어 있지 않아서 발생하는 문제이다. nginx.conf 파일 상단에 아래의 설정을 추가해준다.</p>

<p>참고로 nginx.conf는 일반적으로 /etc/nginx 경로에 존재한다. 혹은 sites-enabled에 있는 .conf 파일에 넣어주어도 무방하다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># nginx.conf
</span><span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="n">Real</span><span class="o">-</span><span class="n">IP</span> <span class="err">$</span><span class="n">remote_addr</span><span class="p">;</span>
<span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="n">Forwarded</span><span class="o">-</span><span class="n">For</span> <span class="err">$</span><span class="n">proxy_add_x_forwarded_for</span><span class="p">;</span>
<span class="n">proxy_set_header</span> <span class="n">Host</span> <span class="err">$</span><span class="n">http_host</span><span class="p">;</span>
<span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="n">Forwarded</span><span class="o">-</span><span class="n">Proto</span> <span class="err">$</span><span class="n">scheme</span><span class="p">;</span> <span class="c1"># &lt;- 중요
</span></code></pre></div></div>

<p>원인은 암호화된 HTTPS 페이지에 HTTP 프로토콜로 요청을 보내고 있기 때문이다.</p>

<p>위 설정이 어떠한 의미를 담고 있는지 참고할 만한 글을 두 개 소개한다. 해당 글들은 이에 대한 설명을 담고 있다.</p>

<p>● <a href="https://velog.io/@csk917work/Nginx-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95">Nginx 서버 설정(프록시, 캐시, 보안)</a><br />
● <a href="https://mchch.tistory.com/234">Nginx reverse proxy 설정</a></p>

<p>이후 nginx를 reload하면 정상적으로 Credential 등록이 가능해진다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">service</span> <span class="n">nginx</span> <span class="nb">reload</span>
</code></pre></div></div>

<p><br /></p>

<h2 id="-참고할-만한-정보">📌 참고할 만한 정보</h2>

<p>플러그인을 설치하다가 Jenkins를 재시작해야할 일이 있었는데 이후에 모든 설정이 초기화되는 현상을 만났다.</p>

<h3 id="-에러-1">🔒 에러</h3>
<p>혹시라도 <code class="language-plaintext highlighter-rouge">https://[jenkins 도메인]/restart</code>를 이용해 Jenkins를 재시작할 때 설정이 초기화되는 현상이 있다면 pv 설정이 제대로 되어있나 살펴보자.</p>

<h3 id="-해결-1">🔑 해결</h3>
<p><code class="language-plaintext highlighter-rouge">kubectl get pv -A</code>로 pv 관련 reclaim policy 설정이 <strong><code class="language-plaintext highlighter-rouge">Retain</code></strong>으로 되어 있나 확인한다.</p>

<p>혹여나 Delete로 되어 있다면 patch 명령어를 통해 설정을 바꾸어준다. (<a href="https://kubernetes.io/ko/docs/tasks/administer-cluster/change-pv-reclaim-policy/">참고</a>)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">kubectl</span> <span class="n">patch</span> <span class="n">pv</span> <span class="o">&lt;</span><span class="n">your</span><span class="o">-</span><span class="n">pv</span><span class="o">-</span><span class="n">name</span><span class="o">&gt;</span> <span class="o">-</span><span class="n">p</span> <span class="s">'{"spec":{"persistentVolumeReclaimPolicy":"Retain"}}'</span>
</code></pre></div></div>

<p>이후 pv와 pvc는 삭제한 뒤 다시 만들어준다. 추가로 <code class="language-plaintext highlighter-rouge">kubectl logs</code> 명령어로 Jenkins 파드에서 에러 메시지를 보내고 있지 않나 확인한다.</p>

<p>Jenkins를 restart해도 설정이 남아있다면 성공이다.</p>

<p>이는 비단 Jenkins 뿐만 아니라 pv와 연계해서 k8s 위에서 돌아가고 있는 모든 서비스에도 적용되는 사안이므로 pv 설정은 항상 신중해야한다.</p>

<p>안 그러면 소중한 데이터를 날리는 일이 있을 수 있다. (나의 이야기다…)</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Kubernetes, Jenkins, Nginx" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">[k8s] 로컬에서 원격 하버 저장소로 도커 이미지 업로드</title><link href="http://localhost:4000/seventeenth-post/" rel="alternate" type="text/html" title="[k8s] 로컬에서 원격 하버 저장소로 도커 이미지 업로드" /><published>2023-03-09T00:00:00+07:00</published><updated>2023-03-09T00:00:00+07:00</updated><id>http://localhost:4000/seventeenth-post</id><content type="html" xml:base="http://localhost:4000/seventeenth-post/"><![CDATA[<h1 id="-도커-원격-로그인">📌 도커 원격 로그인</h1>

<p>쿠버네티스 상에 하버 서비스를 띄우는데 성공했다면 로컬에서 도커 이미지를 보낼 준비가 된 것이다.</p>

<p>로그인 방법은 간단하다. 단, 기본적으로 로컬에 도커가 돌고 있어야 한다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sudo</span> <span class="n">docker</span> <span class="n">login</span> <span class="p">[</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">하버도메인</span><span class="p">]</span>
</code></pre></div></div>

<p>만약 이 과정에서 로그인 에러가 발생했다면 해결 방법은 두 가지이다. (<a href="https://qkqhxla1.tistory.com/1123">참고</a>)</p>

<h3 id="-에러">🔒 에러</h3>
<p><strong><code class="language-plaintext highlighter-rouge">Error saving credentials: error storing credentials - err: exit status 1, out: ''</code></strong></p>

<h3 id="-해결">🔑 해결</h3>
<p>● <code class="language-plaintext highlighter-rouge">~/.docker/config.json</code> 파일에서 <code class="language-plaintext highlighter-rouge">"credsStore":</code>의 내용을 <code class="language-plaintext highlighter-rouge">""</code>로 수정한다.</p>

<p>● 혹은 <code class="language-plaintext highlighter-rouge">~/.docker/config.json</code> 파일을 삭제해준다.</p>

<p>이후 도커를 재시작하고 다시 로그인을 시도한다.</p>

<h1 id="-도커-이미지-업로드">📌 도커 이미지 업로드</h1>

<p>로그인에 성공하였다면 실제로 push를 해 볼 차례이다. push 순서는 다음과 같다.</p>
<ol>
  <li>원격 하버 저장소에 로그인</li>
  <li>원하는 도커 이미지의 태그 생성</li>
  <li>저장소에 push</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 로그인
</span><span class="n">sudo</span> <span class="n">docker</span> <span class="n">login</span> <span class="p">[</span><span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">하버도메인</span><span class="p">]</span>
<span class="c1"># push할 이미지를 찾는다. 없으면 허브에서 pull 해온다.
</span><span class="n">sudo</span> <span class="n">docker</span> <span class="n">images</span> 
<span class="c1"># 도커 이미지에 tag를 붙여준다.
</span><span class="n">sudo</span> <span class="n">docker</span> <span class="n">tag</span> <span class="p">[</span><span class="n">선택한</span> <span class="n">도커이미지</span><span class="p">]</span> <span class="p">[</span><span class="n">하버도메인</span><span class="p">]</span><span class="o">/</span><span class="p">[</span><span class="n">프로젝트명</span><span class="p">]</span><span class="o">/</span><span class="p">[</span><span class="n">도커이미지</span><span class="p">]:[</span><span class="n">버전명</span><span class="p">]</span>
<span class="c1"># 저장소에 push
</span><span class="n">sudo</span> <span class="n">docker</span> <span class="n">push</span> <span class="p">[</span><span class="n">하버도메인</span><span class="p">]</span><span class="o">/</span><span class="p">[</span><span class="n">프로젝트명</span><span class="p">]</span><span class="o">/</span><span class="p">[</span><span class="n">도커이미지</span><span class="p">]:[</span><span class="n">버전명</span><span class="p">]</span>
</code></pre></div></div>

<p>주의할 점은 하버 포탈에 해당 프로젝트가 이미 생성된 상태여야 한다는 것이다. 다만 버전명은 꼭 숫자가 아니어도 된다.</p>

<p>예를 들면 다음과 같다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo docker tag harbor.domain.io/my-project/busybox:0.1
</code></pre></div></div>

<h3 id="-에러-1">🔒 에러</h3>
<p>만약 push가 정상적으로 되지 않고 <strong><code class="language-plaintext highlighter-rouge">Retrying in 5 seconds</code></strong>와 같은 메시지가 반복된다면 아래와 같이 해결한다.</p>

<h3 id="-해결-1">🔑 해결</h3>
<p>헬름을 통해 다운받았다면 하버의 deployment yaml 파일이 존재할 것이다. 파일 내용의 한 부분만 수정해주면 된다. (<a href="https://www.claudiokuenzler.com/blog/958/running-harbor-registry-behind-reverse-proxy-solve-docker-push-errors">참고</a>)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">...</span>
<span class="n">registry</span><span class="p">:</span>
	<span class="p">...</span>
	<span class="n">relativeurls</span><span class="p">:</span> <span class="n">true</span> <span class="c1"># false에서 true로 변경
</span></code></pre></div></div>

<p>그 이후에는 변경 사항을 적용해 주면 된다.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">helm</span> <span class="n">upgrade</span> <span class="o">--</span><span class="n">install</span> <span class="n">harbor</span> <span class="n">harbor</span><span class="o">/</span><span class="n">harbor</span> <span class="o">-</span><span class="n">f</span> <span class="n">my</span><span class="o">-</span><span class="n">values</span><span class="p">.</span><span class="n">yaml</span> <span class="o">-</span><span class="n">n</span> <span class="n">harbor</span>
</code></pre></div></div>

<p>온프레미스 관련 에러는 항상 레퍼런스가 적어 해결이 어렵다. 누군가에게는 도움이 되었길 빈다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Kubernetes, Harbor, Helm, Docker" /><summary type="html"><![CDATA[📌 도커 원격 로그인]]></summary></entry></feed>