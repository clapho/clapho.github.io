<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-US"><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="en-US" /><updated>2024-04-10T14:26:31+07:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">froggydisk</title><subtitle>This is for frogs in the world.</subtitle><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><entry><title type="html">[터미널] Warp + Powerlevel10k + lsd</title><link href="http://localhost:4000/warp/" rel="alternate" type="text/html" title="[터미널] Warp + Powerlevel10k + lsd" /><published>2024-04-10T00:00:00+07:00</published><updated>2024-04-10T00:00:00+07:00</updated><id>http://localhost:4000/warp</id><content type="html" xml:base="http://localhost:4000/warp/"><![CDATA[<h1 id="소개">소개</h1>

<p>기존에는 개발 터미널로 <code class="language-plaintext highlighter-rouge">Iterm2</code>를 쓰고 있었는데 최근에 새로운 터미널을 알게되어 소개하고자 한다.</p>

<p><a href="https://www.warp.dev/a">Warp</a>라는 터미널인데 예전부터 눈여겨보고 있었던 녀석이기는 하다. 슬슬 이쪽으로 트렌드가 넘어오는 느낌도 든다.</p>

<p>추천하는 이유는 다음과 같다.</p>

<ol>
  <li>명령어 자동 완성 기능이 달려있다.</li>
  <li>AI 기능이 내장되어 있다.</li>
  <li>자주 쓰는 워크플로우를 <code class="language-plaintext highlighter-rouge">Warp Drive</code>에 저장해 놓을 수 있다.</li>
  <li>실행 블록별로 찾기, 복사 등 작업이 가능하다.</li>
</ol>

<p>속도는 Terminal.app 보다는 느리지만 Iterm보다는 확실히 빠르다. <a href="https://docs.warp.dev/how-does-warp-compare/performance">벤치마크</a>를 확인해보자.</p>

<p>이는 Warp에서 제공하는 벤치마크이므로 100% 신뢰할 수는 없지만 직접 사용해보니 체감상으로도 빠른 것 같다. 이외에도 편리한 기능이 많다.</p>

<p>다만, 아직 범용적으로 사용되기 어려운 단점도 있다.</p>

<ol>
  <li>zsh를 기본 쉘로 사용하는데 맨 처음 탭을 열 때 zsh 로딩이 조금 느리다.</li>
  <li>아직 한국어 지원이 완벽하지 않다. (한국어 파일명이 자음으로만 나온다)</li>
</ol>

<p>이와 같은 이유로 개발자 이외에는 쓰기 어려울 것 같다. 애초에 개발자가 아니면 터미널에 관심을 가지지 않겠지만…</p>

<p>위에 서술한 내용과는 별개로 사실 Warp로 넘어오게 된 이유는 간단하다.</p>

<p>🚀 <strong><code class="language-plaintext highlighter-rouge">터미널이 매우 깔끔하고 멋지다</code></strong></p>

<p><img src="/assets/img/warp.png" alt="image" /></p>

<hr />

<h1 id="설치">설치</h1>

<h3 id="-warp">● Warp</h3>

<p>우선 <a href="https://www.warp.dev/a">Warp 사이트</a>로 이동하여 다운받는다. 혹은 <code class="language-plaintext highlighter-rouge">brew install</code>도 가능하다.</p>

<p>설치 후 실행하면 바로 사용할 수 있다. 기존 테마도 멋있지만 커스텀 테마를 적용하는 것도 가능하다.</p>

<p>커스텀 테마는 <a href="https://terminal-themes.com/">관련 사이트</a>에서 다운받거나 yaml 파일을 직접 작성하여 적용할 수 있다.</p>

<p>필자는 <code class="language-plaintext highlighter-rouge">Seashell.yaml</code>을 다운 받아서 적용하였다. 테마 관련 폴더를 생성해서 그 안에 다운로드 받은 yaml 파일을 옮겨주면 된다.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> <span class="nt">-p</span> ~/.warp/themes/
<span class="nb">cp</span> ~/Downloads/.yaml ~/.warp/themes/
</code></pre></div></div>

<p>이제 Warp 테마 설정에서 해당 테마 선택이 가능하다.</p>

<p><a href="https://docs.warp.dev/appearance/custom-themes">공식문서</a>에서도 커스텀 테마 적용 방법에 대해 상세히 설명하고 있으므로 한번 살펴보자.</p>

<h3 id="-powerlevel10k">● Powerlevel10k</h3>

<p>Iterm2를 사용할 때 zsh 프롬프트를 꾸며주기 위해 <code class="language-plaintext highlighter-rouge">powerlevel10k</code>를 적용했었는데 Warp도 zsh를 사용하므로 동일하게 적용이 가능하다.</p>

<p>기존에 Iterm2를 사용하시던 분이라면 자동으로 적용이 될 것이다.</p>

<p>Warp에서도 친절하게 <a href="https://www.warp.dev/blog/how-to-set-up-powerlevel10k-on-warp#setup">powerlevel10k를 적용하는 방법</a>에 대해서 설명해주고 있다.</p>

<p>p10k를 설치하기에 앞서 터미널 상에서 아이콘들이 제대로 나타나기 위해서 폰트를 적용해주어야 한다.</p>

<p>절차는 다음과 같다.</p>

<ol>
  <li><a href="https://github.com/romkatv/powerlevel10k?tab=readme-ov-file#manual">Powerlevel10k 공식 깃허브 페이지</a>에서 MesloLGS NF 폰트를 다운로드한다. Regular, Bold, Italic, Bold Italic.ttf 파일을 모두 다운받아서 설치해준다.</li>
  <li>Warp의 설정에서 <code class="language-plaintext highlighter-rouge">Appearance &gt; Text</code> 로 이동한 뒤 <code class="language-plaintext highlighter-rouge">View all available system fonts</code> 박스를 체크해주고 드롭다운 메뉴에서 <code class="language-plaintext highlighter-rouge">MesloLGS NF</code> 폰트를 선택한다.</li>
  <li><code class="language-plaintext highlighter-rouge">Appearance &gt; Prompt</code> 에서 <code class="language-plaintext highlighter-rouge">Sheell prompt (PS1)</code>을 골라준다.</li>
</ol>

<p>이제 p10k를 설치해보자.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone <span class="nt">--depth</span><span class="o">=</span>1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
<span class="nb">echo</span> <span class="s1">'source ~/powerlevel10k/powerlevel10k.zsh-theme'</span> <span class="o">&gt;&gt;</span>~/.zshrc 
</code></pre></div></div>

<p>설치가 완료되었다면 <code class="language-plaintext highlighter-rouge">exec zsh</code> 명령어로 테마 설정 마법사를 시작한다. 만일 설정창이 뜨지 않는다면 <code class="language-plaintext highlighter-rouge">p10k configure</code> 명령어를 활용한다.</p>

<p>이제 설정 마법사가 안내해 주는대로 개인의 취향에 맞게 설정해주면 된다.</p>

<h3 id="-lsd">● lsd</h3>

<p>아이콘 얘기가 나왔으니 <code class="language-plaintext highlighter-rouge">ls</code> 명령어를 입력했을 때 나오는 결과값에도 아이콘을 입혀보자.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 설치</span>
<span class="nv">$ </span>brew <span class="nb">install </span>lsd

<span class="c"># alias 설정</span>
<span class="nv">$ </span>vi ~/.zshrc

<span class="nb">alias ls</span><span class="o">=</span><span class="s1">'lsd'</span>
<span class="nb">alias </span><span class="nv">ll</span><span class="o">=</span><span class="s1">'ls -alhF'</span>
<span class="nb">alias </span><span class="nv">lt</span><span class="o">=</span><span class="s1">'ls --tree'</span>

<span class="nv">$ </span><span class="nb">source</span> ~/.zshrc
</code></pre></div></div>

<p>이제 ls 명령을 입력하면 파일과 디렉토리의 차이가 한눈에 들어온다. 각 파일의 형태에 따라 아이콘이 다르게 표시되는 것도 볼 수 있다.</p>

<p><img src="/assets/img/lsd.png" alt="image" /></p>

<h3 id="-탭-이름-설정하기">● 탭 이름 설정하기</h3>

<p>Warp에서 탭을 열었을 때는 현재 경로가 탭 이름으로 표시되게 된다. 경로가 길 때는 잘 보이지 않으니 그냥 랜덤한 이모티콘으로 바꿔주자.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim ~/.zshrc
</code></pre></div></div>

<p>참고하고 싶은 분을 위해 .zshrc의 내용을 그대로 가져왔다.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.</span>
<span class="c"># Initialization code that may require console input (password prompts, [y/n]</span>
<span class="c"># confirmations, etc.) must go above this block; everything else may go below.</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nt">-r</span> <span class="s2">"</span><span class="k">${</span><span class="nv">XDG_CACHE_HOME</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/.cache</span><span class="k">}</span><span class="s2">/p10k-instant-prompt-</span><span class="k">${</span><span class="p">(%)</span><span class="k">:-</span><span class="p">%n</span><span class="k">}</span><span class="s2">.zsh"</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then
  </span><span class="nb">source</span> <span class="s2">"</span><span class="k">${</span><span class="nv">XDG_CACHE_HOME</span><span class="k">:-</span><span class="nv">$HOME</span><span class="p">/.cache</span><span class="k">}</span><span class="s2">/p10k-instant-prompt-</span><span class="k">${</span><span class="p">(%)</span><span class="k">:-</span><span class="p">%n</span><span class="k">}</span><span class="s2">.zsh"</span>
<span class="k">fi</span>

<span class="c"># ================================================= 이 부분 추가</span>
<span class="c"># set tab name randomly when a new tab is open</span>
<span class="k">function </span>set_name <span class="o">()</span> <span class="o">{</span>
  <span class="nv">emojis</span><span class="o">=(</span><span class="s2">"⚡️"</span> <span class="s2">"🔥"</span> <span class="s2">"👑"</span> <span class="s2">"🍻"</span> <span class="s2">"🚀"</span> <span class="s2">"💡"</span> <span class="s2">"🎉"</span> <span class="s2">"🌙"</span><span class="o">)</span>
  <span class="nv">RAND_EMOJI_N</span><span class="o">=</span><span class="k">$((</span> <span class="nv">$RANDOM</span> <span class="o">%</span> <span class="k">${#</span><span class="nv">emojis</span><span class="p">[@]</span><span class="k">}</span> <span class="o">+</span> <span class="m">1</span><span class="k">))</span>
  <span class="nb">echo</span> <span class="nt">-ne</span> <span class="s2">"</span><span class="se">\0</span><span class="s2">33]0;</span><span class="k">${</span><span class="nv">emojis</span><span class="p">[RAND_EMOJI_N]</span><span class="k">}</span><span class="se">\0</span><span class="s2">07"</span>
<span class="o">}</span>
<span class="c"># if the terminal is Zsh, then run set_name</span>
<span class="k">if</span> <span class="o">[</span> <span class="nt">-n</span> <span class="s2">"</span><span class="nv">$ZSH_VERSION</span><span class="s2">"</span> <span class="o">]</span><span class="p">;</span> <span class="k">then
  </span>precmd_functions+<span class="o">=(</span>set_name<span class="o">)</span>
<span class="k">fi</span>
<span class="c"># =================================================</span>

<span class="c"># set aliases for lsd package</span>
<span class="nb">alias ls</span><span class="o">=</span><span class="s1">'lsd'</span>
<span class="nb">alias </span><span class="nv">ll</span><span class="o">=</span><span class="s1">'ls -alhF'</span>
<span class="nb">alias </span><span class="nv">lt</span><span class="o">=</span><span class="s1">'ls --tree'</span>

<span class="nb">eval</span> <span class="si">$(</span>/opt/homebrew/bin/brew shellenv<span class="si">)</span>
<span class="nb">source</span> ~/powerlevel10k/powerlevel10k.zsh-theme

<span class="c"># To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.</span>
<span class="o">[[</span> <span class="o">!</span> <span class="nt">-f</span> ~/.p10k.zsh <span class="o">]]</span> <span class="o">||</span> <span class="nb">source</span> ~/.p10k.zsh
</code></pre></div></div>

<p>이제 적용해주면 된다.</p>
<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.zshrc
</code></pre></div></div>

<h3 id="-vim-커스텀-테마">● Vim 커스텀 테마</h3>

<p>이제 웬만한 부분은 완성되었다.</p>

<p>Mac을 사용하다보면 <code class="language-plaintext highlighter-rouge">Vim</code>을 텍스트 편집기로 사용하게 되는데 좀 더 완벽을 기한다면 Vim 커스텀 테마까지 적용해보자. 문서 읽기가 매우 편해진다.</p>

<p>Warp 커스텀 테마 때와 마찬가지로 <a href="https://vimcolorschemes.com/top/">사이트</a>에서 원하는 테마를 다운받는다.</p>

<p>테마 관련 폴더를 생성해서 다운로드받은 파일을 옮겨준다.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir</span> ~/.vim/colors
<span class="nb">cp</span> ~/Downloads/.yaml ~/.vim/colors/
vim ~/.vimrc
</code></pre></div></div>

<p>아래와 같이 설정해준다. 비어있다면 복사-붙여넣기를 한다.</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s2">" Syntax Highlighting
if has("</span>syntax<span class="s2">")
    syntax on
endif

set ts=4
set autoindent

colo  // &lt;- colors 안에 들어있는 .vim 파일명

set laststatus=2
set statusline=</span><span class="se">\ </span><span class="s2">%&lt;%l:%v</span><span class="se">\ </span><span class="s2">[%P]%=%a</span><span class="se">\ </span><span class="s2">%h%m%r</span><span class="se">\ </span><span class="s2">%F</span><span class="se">\</span><span class="s2">
</span></code></pre></div></div>

<p>vim을 재실행하면 테마가 적용된다.</p>

<p><img src="/assets/img/vim.png" alt="image" /></p>

<h2 id="결론">결론</h2>

<p>이제 VScode만 깔아준다면 개발 준비는 끝난 것이다.</p>

<p>다른거는 몰라도 <code class="language-plaintext highlighter-rouge">Warp + Powerlevel10k</code> 조합은 꼭 적용해보자. 할 일이 없어도 터미널을 켜고 있는 자신을 발견할 것이다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Mac, Terminal" /><summary type="html"><![CDATA[소개]]></summary></entry><entry><title type="html">[쿠버네티스] error: The connection to the server 192.168.x.x:6443 was refused - did you specify the right host or port?</title><link href="http://localhost:4000/k8s-install-error/" rel="alternate" type="text/html" title="[쿠버네티스] error: The connection to the server 192.168.x.x:6443 was refused - did you specify the right host or port?" /><published>2024-03-05T00:00:00+07:00</published><updated>2024-03-05T00:00:00+07:00</updated><id>http://localhost:4000/k8s-install-error</id><content type="html" xml:base="http://localhost:4000/k8s-install-error/"><![CDATA[<p>IDC에 서버를 구축하면서 오랜만에 순정 서버에 쿠버네티스를 설치할 일이 생겼다. 우분투는 이전에도 수없이 지우고 깔고 해봤기에 수월하게 넘어갔지만 오랜만에 하는 쿠버네티스 클러스터 구축에서 에러를 만나버렸다.</p>

<p><code class="language-plaintext highlighter-rouge">kubeadm init</code> 이후에 <code class="language-plaintext highlighter-rouge">kubectl get node</code>를 했을 때 처음에는 결과가 잘 나타나다가 시간이 조금 지나면 아래와 같은 에러가 나타나기 시작한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">error</span><span class="p">:</span> <span class="nx">The</span> <span class="nx">connection</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">server</span> <span class="mf">192.168</span><span class="p">.</span><span class="nx">x</span><span class="p">.</span><span class="nx">x</span><span class="p">:</span><span class="mi">6443</span> <span class="nx">was</span> <span class="nx">refused</span> <span class="o">-</span> <span class="nx">did</span> <span class="nx">you</span> <span class="nx">specify</span> <span class="nx">the</span> <span class="nx">right</span> <span class="nx">host</span> <span class="nx">or</span> <span class="nx">port</span><span class="p">?</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">6443</code>은 쿠버네티스에서 주로 사용하는 포트이고 192.168.x.x는 localhost니깐 위의 에러는 자기 자신에 연결할 수 없다는 이야기가 된다. 6443 포트를 통해서 자기 내부에서 돌고 있는 쿠버네티스 시스템과 통신을 하게 되는데 그게 불가능하다는 것은 쿠버네티스가 제대로 돌고 있지 않다는 것이다.</p>

<p>처음에는 UTM의 방화벽 정책 문제인가 싶었는데 조금 생각해보니 전혀 상관없는 문제였다.</p>

<p>컨테이너 런타임으로 containerd를 사용할 때는 <a href="https://kubernetes.io/ko/docs/setup/production-environment/container-runtimes/">공식문서</a>에서 말하길,</p>

<blockquote>
  <p>리눅스 배포판의 init 시스템이 systemd인 경우, systemd를 kubelet과 컨테이너 런타임의 cgroup 드라이버로 사용해야한다.</p>
</blockquote>

<p>라고 한다.</p>

<p>관련 설정 없이는 <code class="language-plaintext highlighter-rouge">systemd</code>와 <code class="language-plaintext highlighter-rouge">cgroupfs</code>가 cgroup driver로 혼용되기 때문에 이는 쿠버네티스 시스템에 큰 혼란을 초래하게 된다.</p>

<p>실제로도 watch 명령어를 통해서 kubeadm init 뒤에 초기 시스템 파드들이 어떻게 실행되는지 보았더니 계속 죽었다 살아나기를 반복하고 있었다.</p>

<p>해결 방법은 간단하다. 공식 문서에도 잘 나와있지만 아래를 참고해도 좋다. 컨테이너 런타임의 cgroup 드라이버를 설정해준다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
sudo service containerd restart
</code></pre></div></div>

<p>공식 문서를 꼼꼼하게 읽자.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Kubernetes, systemd" /><summary type="html"><![CDATA[IDC에 서버를 구축하면서 오랜만에 순정 서버에 쿠버네티스를 설치할 일이 생겼다. 우분투는 이전에도 수없이 지우고 깔고 해봤기에 수월하게 넘어갔지만 오랜만에 하는 쿠버네티스 클러스터 구축에서 에러를 만나버렸다.]]></summary></entry><entry><title type="html">[React Native] 화면 전체를 덮는 absolute 포지션의 컴포넌트 스타일링</title><link href="http://localhost:4000/absolute-panel/" rel="alternate" type="text/html" title="[React Native] 화면 전체를 덮는 absolute 포지션의 컴포넌트 스타일링" /><published>2024-02-22T00:00:00+07:00</published><updated>2024-02-22T00:00:00+07:00</updated><id>http://localhost:4000/absolute-panel</id><content type="html" xml:base="http://localhost:4000/absolute-panel/"><![CDATA[<p>화면 전체를 덮는 absolute 포지션의 컴포넌트를 구현할 때 보통 이런식으로 스타일링을 한다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">container</span><span class="p">:</span> <span class="p">{</span>
    <span class="nl">position</span><span class="p">:</span> <span class="dl">'</span><span class="s1">absolute</span><span class="dl">'</span><span class="p">,</span>
    <span class="nx">top</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nx">bottom</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nx">left</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
    <span class="nx">right</span><span class="p">:</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></div></div>

<p>모달을 띄우거나 할 때 뒷 배경을 옅은 회색으로 한다던가 opacity를 주기 위해서 주로 쓰게 되는데 쓸 때마다 코드가 너무 길어져 신경이 쓰였다.</p>

<p>아무 생각 없이 쓰던거라 더 좋은 방법을 찾을 생각조차 안하고 있었는데 우연히 공식문서에서 관련 내용을 발견했다.</p>

<p>React Native에서는 다음과 같이 <strong>한 줄</strong>로 구현이 가능하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">container</span><span class="p">:</span> <span class="p">{...</span><span class="nx">StyleSheet</span><span class="p">.</span><span class="nx">absoluteFillObject</span><span class="p">}</span>
</code></pre></div></div>
<p><a href="https://reactnative.dev/docs/stylesheet">공식문서 - StyleSheet</a></p>

<p>공식문서를 잘 읽어보는 것에 대한 중요성을 다시금 느낀다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[화면 전체를 덮는 absolute 포지션의 컴포넌트를 구현할 때 보통 이런식으로 스타일링을 한다. container: { position: 'absolute', top: 0, bottom: 0, left: 0, right: 0 }]]></summary></entry><entry><title type="html">[React Native] 컴포넌트 속성을 통해 전달하는 문자열의 줄바꿈 방법</title><link href="http://localhost:4000/transmit-component/" rel="alternate" type="text/html" title="[React Native] 컴포넌트 속성을 통해 전달하는 문자열의 줄바꿈 방법" /><published>2024-02-21T00:00:00+07:00</published><updated>2024-02-21T00:00:00+07:00</updated><id>http://localhost:4000/transmit-component</id><content type="html" xml:base="http://localhost:4000/transmit-component/"><![CDATA[<p>특정 컴포넌트를 구현할 때 속성을 통해 문자열을 보내줄 때가 있다. 보통 config로 따로 저장해놓은 고정 문구를 넣어주는 경우에 많이 쓰인다.</p>

<p>이 경우에 디자인 상의 이유로 줄바꿈을 자주 사용하게 되는데, 따옴표 안에 개행문자<code class="language-plaintext highlighter-rouge">\n</code>를 넣어도 아무 일도 일어나지 않아 종종 당황하곤 한다. 이는 개행 문자가 그대로 문자열로 인식되기 때문이다.</p>

<p>줄바꿈이 제대로 이루어지게 하기 위해서는 <strong>중괄호</strong>를 사용해 주어야 한다. 이런식으로 말이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nc">OnBoardingPage</span>
  <span class="n">subtitle</span><span class="o">={</span>
    <span class="err">'</span><span class="n">집에서</span> <span class="n">얼마나</span> <span class="n">걷고</span><span class="o">,</span> <span class="n">뛰고</span><span class="o">,</span> <span class="n">쉬었는지</span> <span class="n">등의</span><span class="err">\</span><span class="n">n정보를</span> <span class="n">실시간으로</span> <span class="n">분석해드려요</span><span class="o">.</span><span class="err">'</span>
  <span class="o">}</span>
<span class="o">/&gt;</span>
</code></pre></div></div>

<blockquote>
  <p>chatGPT는 그 이유에 대해 이렇게 말한다.<br />
<strong>“중괄호를 사용하면 JavaScript 표현식을 평가하고 결과를 문자열로 변환하여 JSX에 삽입할 수 있습니다.”</strong></p>
</blockquote>

<p>비슷한 느낌으로 <code class="language-plaintext highlighter-rouge">React</code>나 <code class="language-plaintext highlighter-rouge">Next</code>에서는 아예 컴포넌트 형식으로 전달하는 것을 추천한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nc">CheckUpCard</span>
  <span class="n">content</span><span class="o">={</span>
    <span class="o">&lt;&gt;</span>
      <span class="n">질환</span> <span class="n">등의</span> <span class="n">감별을</span> <span class="n">위한</span>
      <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
      <span class="n">정밀검사</span>
    <span class="o">&lt;/&gt;</span>
  <span class="o">}</span>
<span class="o">/&gt;</span>
</code></pre></div></div>

<p>컴포넌트 형식으로 전달하는 방식은 <strong>반응형으로 페이지를 구현할 필요가 있을 때</strong> 사용하면 유용하다. 이 때 개행문자<code class="language-plaintext highlighter-rouge">\n</code> 대신 <code class="language-plaintext highlighter-rouge">&lt;br&gt;</code>태그를 사용하게 되는데 이렇게 되면 PC 버전이냐 모바일 버전이냐에 따라 줄바꿈을 다르게 적용할 수 있기 때문이다.</p>

<p>빈 태그가 아닌 &lt;div&gt;태그 등을 사용하면 스타일도 부여할 수 있으니 자유도가 한층 높아지는 것은 말할 것도 없다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, React, Next" /><summary type="html"><![CDATA[특정 컴포넌트를 구현할 때 속성을 통해 문자열을 보내줄 때가 있다. 보통 config로 따로 저장해놓은 고정 문구를 넣어주는 경우에 많이 쓰인다.]]></summary></entry><entry><title type="html">[React Native] onPress에서 화살표 표현식의 생략</title><link href="http://localhost:4000/arrow-in-onpress/" rel="alternate" type="text/html" title="[React Native] onPress에서 화살표 표현식의 생략" /><published>2024-02-20T00:00:00+07:00</published><updated>2024-02-20T00:00:00+07:00</updated><id>http://localhost:4000/arrow-in-onpress</id><content type="html" xml:base="http://localhost:4000/arrow-in-onpress/"><![CDATA[<p>React Native에서 onPress를 사용할 때 무의식적으로 화살표 표현식 <code class="language-plaintext highlighter-rouge">()=&gt;</code>을 사용하고 있었는데 어느날 특정 경우에 생략이 가능하다는
것을 알게 되었다.</p>

<p>코드를 한 글자라도 줄일 수 있다는 생각에 과연 어떠한 조건에서 가능한지 궁금해서 찾아보았다. 다음의 두 가지 경우를 살펴보자.</p>
<h3 id="1">1</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">onPress</span><span class="o">={()=&gt;</span><span class="n">handlePressFirst</span><span class="o">(</span><span class="n">value</span><span class="o">)}</span>
</code></pre></div></div>
<h3 id="2">2</h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>onPress={handlePressSecond}
</code></pre></div></div>

<p>둘 다 정상적으로 실행되는 예시이다. 차이를 알겠는가?</p>

<p><code class="language-plaintext highlighter-rouge">handlePressFirst</code> 함수는 value라는 인자를 받고 있고 <code class="language-plaintext highlighter-rouge">handlePressSecond</code>는 아무런 인자 없이 실행되는 함수임을 알 수 있다.</p>

<p>만약 이렇게 하면 어떻게 될까?</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>onPress={handlePressFirst(value)}
</code></pre></div></div>

<p>이렇게 되면 해당 페이지가 렌더링 될 때 클릭 이벤트가 없어도 handlePressFirst 함수가 자동으로 실행될 것이다. 이는 예상치 못한 버그를 발생시킬 수 있으므로 좋지 않다. 주의하자.</p>

<p>다만 전달할 인자가 아무것도 없는데 화살표 표현식을 사용하는 것은 아무런 문제가 없다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">onPress</span><span class="o">={()=&gt;</span><span class="n">handlePressSecond</span><span class="o">()}</span>
</code></pre></div></div>

<p>가독성을 올리고 싶다면 onPress 안에 들어가는 함수가 아무런 인자를 받지 않는 함수일 때 화살표 표현식과 함수 뒤의 빈 괄호를 생략하면 된다.</p>

<p>잘 써먹을 만한 팁이지만 괜히 헷갈린다면 무조건 onPress 안에 <code class="language-plaintext highlighter-rouge">()=&gt;</code>를 넣자.</p>

<p>참고로 이는 React의 onClick에서도 동일하다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[React Native에서 onPress를 사용할 때 무의식적으로 화살표 표현식 ()=&gt;을 사용하고 있었는데 어느날 특정 경우에 생략이 가능하다는 것을 알게 되었다.]]></summary></entry><entry><title type="html">[React/RN] map 함수 안에서의 return문 사용법</title><link href="http://localhost:4000/return-in-map/" rel="alternate" type="text/html" title="[React/RN] map 함수 안에서의 return문 사용법" /><published>2024-02-05T00:00:00+07:00</published><updated>2024-02-05T00:00:00+07:00</updated><id>http://localhost:4000/return-in-map</id><content type="html" xml:base="http://localhost:4000/return-in-map/"><![CDATA[<p>개발을 처음 배울 시절, 궁금했던 것들을 하나하나 메모하면서 나중에 블로그 글로 하나씩 적어야겠다고 생각했는데 벌써 어언 1년이 지나서 이제서야 글로 옮긴다.</p>

<p>JS 문법에도 익숙지 않아서 map 함수를 보면 지레 겁을 먹었던 적도 있었는데 이제는 이런 함수의 존재가 너무나도 고맙다.</p>

<p>항상 사용할 때마다 return문을 꼭 써야하는 것인지 궁금했었는데 오늘 그 이야기를 하고자한다.</p>

<p>답을 먼저 말하면 <strong><code class="language-plaintext highlighter-rouge">그렇지 않다</code></strong>이다.</p>

<p>map 함수 안에서 return 문의 유무를 결정하는 기준은 화살표(=&gt;) 뒤에 <strong>중괄호를 쓰냐 소괄호를 쓰냐에 따라</strong> 갈리게 되는데 일반적으로 소괄호를 쓰는 형태는 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="o">.</span><span class="na">map</span><span class="o">((</span><span class="n">value</span><span class="o">,</span> <span class="n">key</span><span class="o">)=&gt;(&lt;</span><span class="nc">View</span> <span class="n">key</span><span class="o">={</span><span class="n">key</span><span class="o">}&gt;[</span><span class="n">컴포넌트</span><span class="o">]&lt;/</span><span class="nc">View</span><span class="o">&gt;))</span>
</code></pre></div></div>

<p>더 나아가 소괄호가 생략되는 경우도 많고 이는 코드가 훨씬 깔끔해 보이는 장점을 가진다.</p>

<p>반대로 중괄호를 쓰게 되면 아래와 같이 꼭 return문을 넣어주어야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span><span class="o">.</span><span class="na">map</span><span class="o">((</span><span class="n">value</span><span class="o">,</span> <span class="n">key</span><span class="o">)=&gt;{</span>
  <span class="kd">const</span> <span class="n">newValue</span> <span class="o">=</span> <span class="o">...</span> <span class="c1">// 새 변수 정의</span>
  <span class="k">return</span><span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span> <span class="n">key</span><span class="o">={</span><span class="n">key</span><span class="o">}&gt;</span>
      <span class="o">&lt;</span><span class="nc">Text</span><span class="o">&gt;</span>
        <span class="o">{</span><span class="n">newValue</span><span class="o">}</span>
      <span class="o">&lt;/</span><span class="nc">Text</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">})</span>
</code></pre></div></div>

<p>return을 쓰면 필연적으로 코드가 길어지게 되므로 항상 소괄호를 쓰는게 나아보일 수 있는데, 단 중괄호를 썼을 때 생기는 중요한 이점이 하나 존재한다.</p>

<p>바로 map 함수 내부에서 새로운 변수를 정의할 수 있다는 것이다. 이는 코드의 중복을 막아 가독성을 좋게 하는데 매우 중요할 수 있다.</p>

<p>하지만 그 뿐이므로 <strong>새로운 변수를 정의하는 경우를 제외한다면 return문은 과감히 생략해주자.</strong></p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React, React Native, Javascript" /><summary type="html"><![CDATA[개발을 처음 배울 시절, 궁금했던 것들을 하나하나 메모하면서 나중에 블로그 글로 하나씩 적어야겠다고 생각했는데 벌써 어언 1년이 지나서 이제서야 글로 옮긴다.]]></summary></entry><entry><title type="html">[Next/React] 모바일↔︎PC에 따른 줄바꿈 태그의 선택 적용</title><link href="http://localhost:4000/next-br/" rel="alternate" type="text/html" title="[Next/React] 모바일↔︎PC에 따른 줄바꿈 태그의 선택 적용" /><published>2024-01-03T00:00:00+07:00</published><updated>2024-01-03T00:00:00+07:00</updated><id>http://localhost:4000/next-br</id><content type="html" xml:base="http://localhost:4000/next-br/"><![CDATA[<p>웹페이지를 만들다보면 줄바꿈 태그(<code class="language-plaintext highlighter-rouge">br</code>)를 디바이스가 모바일이냐 PC냐에 따라 다르게 적용하고 싶을 때가 있다.</p>

<p>예를 들면 모바일에서는 줄바꿈을 했으면 좋겠고 PC에서는 그대로 길게 냅두고 싶은 경우다.</p>

<p>전통적인 방법으로는 css를 활용하는 방법이 있겠다.</p>

<p>빠르게 인터넷을 검색해보니 다음과 같은 코드가 나왔다.</p>

<div class="language-css highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">/* 767px 기준 */</span>
<span class="k">@media</span> <span class="n">only</span> <span class="n">screen</span> <span class="n">and</span> <span class="p">(</span><span class="n">max-width</span><span class="p">:</span> <span class="m">767px</span><span class="p">)</span> <span class="p">{</span>
  <span class="nt">br</span><span class="nc">.ignore</span> <span class="p">{</span>
    <span class="nl">display</span><span class="p">:</span> <span class="n">inline-block</span><span class="p">;</span>
    <span class="nl">content</span><span class="p">:</span> <span class="s1">" "</span><span class="p">;</span>
    <span class="nl">padding</span><span class="p">:</span> <span class="m">0</span> <span class="m">2px</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>global.css 파일 안에 이렇게 정의해준 뒤에 <strong><code class="language-plaintext highlighter-rouge">&lt;br className="ignore" /&gt;</code></strong>와 같이 사용해주면 모바일 버전에서만 br 태그를 무시할 수 있다.</p>

<p>처음에는 아하 그렇구나 싶었다.</p>

<p>하지만 사용하다보니 무조건 p 태그 안에 위치해야 한다거나, 반대로 PC에서만 br 태그를 무시하고 싶을 때 스타일을 새로 적용해 주어야 하는 등 딱 봐도 여러 한계점이 존재했다.</p>

<p>결국 이러한 불편함에서 벗어나기 위해서 여러 방법들을 찾아보기 시작했다.</p>

<h2 id="usemediaquery">useMediaQuery</h2>

<p>그 중 하나는 <code class="language-plaintext highlighter-rouge">useMediaQuery</code>를 활용하여 <code class="language-plaintext highlighter-rouge">isMobile</code> 변수를 만들어서 컴포넌트에 조건을 걸어 사용하는 것이다.</p>

<p>나름 깔끔하게 코드를 정리할 수 있고 <code class="language-plaintext highlighter-rouge">isMobile</code> 변수를 필두로 삼항연산자를 사용하여 모바일용 컴포넌트, PC용 컴포넌트를 나누어 렌더링하는 것이 가능했다. 코드 가독성도 나름 올라갔다.</p>

<p>하지만 이러한 방법은 매번 페이지마다 <code class="language-plaintext highlighter-rouge">isMobile</code> 변수를 정의해 주어야 한다는 귀찮음이 있었다. 그 외에도 새로고침을 할 때마다 PC화면일지언정 모바일용 컴포넌트가 먼저 렌더링된 후에 PC용으로 전환되는 등의 깜빡임 현상이 존재했다. 이거는 내게 꽤나 큰 스트레스로 다가왔다.</p>

<h2 id="tailwind">tailwind</h2>

<p>결국 돌고 돌아서 tailwind로 돌아왔다.</p>

<p>다행히도 근본 원인이었던 디바이스에 따른 br 태그의 선택 적용 문제도 tailwind를 사용하면서 깔끔하게 해결되었다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">sm:block hidden</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div&gt; /</span><span class="o">/</span> <span class="nx">pc</span>
<span class="o">&lt;</span><span class="nx">div</span> <span class="nx">className</span><span class="o">=</span><span class="dl">"</span><span class="s2">sm:hidden</span><span class="dl">"</span><span class="o">&gt;&lt;</span><span class="sr">/div&gt; /</span><span class="o">/</span> <span class="nx">mobile</span>
</code></pre></div></div>

<p>div 태그를 예시로 들었지만 br 태그도 똑같이 적용하면 된다.</p>

<p>코드도 한결 간단해졌고 PC용 컴포넌트, 모바일용 컴포넌트에 따라 가장 바깥을 위의 div 예시처럼 감싸주면 해결된다.</p>

<p>코드 간결성, 가독성을 모두 잡을 수 있어서 좋았다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Next, React" /><summary type="html"><![CDATA[웹페이지를 만들다보면 줄바꿈 태그(br)를 디바이스가 모바일이냐 PC냐에 따라 다르게 적용하고 싶을 때가 있다.]]></summary></entry><entry><title type="html">[Next/React] z-index가 작동하지 않는 경우</title><link href="http://localhost:4000/z-index/" rel="alternate" type="text/html" title="[Next/React] z-index가 작동하지 않는 경우" /><published>2023-12-28T00:00:00+07:00</published><updated>2023-12-28T00:00:00+07:00</updated><id>http://localhost:4000/z-index</id><content type="html" xml:base="http://localhost:4000/z-index/"><![CDATA[<p>생각보다 많이 헤맸던 경우기도 한데 Next 혹은 React에서 z-index가 원하는대로 작동하지 않을 때가 있다.</p>

<p>처음에는 그저 position이 absolute일 경우에만 z-index가 적용되는 줄 알고 absolute를 남발했던 때도 있었다.</p>

<p>하지만 항상 absolute position만으로 컴포넌트들을 배치할 수는 없지 않은가.</p>

<p>React Native로 앱 작업을 자주 하다보니 맨날 헷갈리는데 React Native에서는 default position이 <code class="language-plaintext highlighter-rouge">relative</code>인 반면
React나 Next에서는 <code class="language-plaintext highlighter-rouge">static</code>이 초기값이다.</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center"> </th>
      <th style="text-align: center"><a href="https://cssreference.io/property/position/">React/Next</a></th>
      <th style="text-align: center"><a href="https://reactnative.dev/docs/layout-props">React Native</a></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">position(default)</td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">static</code></td>
      <td style="text-align: center"><code class="language-plaintext highlighter-rouge">relative</code></td>
    </tr>
  </tbody>
</table>

<p><strong>그러므로 React/Next로 작업을 할 때, position: ‘static’ (default)인 경우에는 z-index가 적용되지 않기에 이를 사용하고 싶은 경우에는 position을 relative나 absolute로 설정해주어야 한다.</strong></p>

<p>하지만 재밌는 것은 React Native에서도 z-index를 적용해주고 싶으면 default가 relative여도 굳이 따로 선언해주어야 한다는 사실.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">position</span><span class="p">:</span> <span class="dl">'</span><span class="s1">relative</span><span class="dl">'</span><span class="p">,</span>
<span class="nx">zIndex</span><span class="p">:</span> <span class="mi">10</span>
</code></pre></div></div>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="Next, React" /><summary type="html"><![CDATA[생각보다 많이 헤맸던 경우기도 한데 Next 혹은 React에서 z-index가 원하는대로 작동하지 않을 때가 있다.]]></summary></entry><entry><title type="html">[React Native] 스크롤에 상관없이 고정된 컴포넌트 만들기</title><link href="http://localhost:4000/fixed-position/" rel="alternate" type="text/html" title="[React Native] 스크롤에 상관없이 고정된 컴포넌트 만들기" /><published>2023-12-26T00:00:00+07:00</published><updated>2023-12-26T00:00:00+07:00</updated><id>http://localhost:4000/fixed-position</id><content type="html" xml:base="http://localhost:4000/fixed-position/"><![CDATA[<p>React와 React Native는 비슷하면서도 은근히 다른 부분이 많은 것 같다.</p>

<p>두 프레임워크를 번갈아가며 사용하다보면 문법적인 부분에 대해서 헷갈릴 때가 자주 있다.</p>

<p>앱에서 새로운 기능을 만들다보니 컴포넌트 하나를 스크롤에 영향받지 않으면서 화면에 고정시킬 필요가 있었는데 React에서
자주 사용했던 문법을 썼더니 바로 에러가 났다.</p>
<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">position</span><span class="p">:</span> <span class="dl">'</span><span class="s1">fixed</span><span class="dl">'</span>
</code></pre></div></div>

<p>예를 들면 쇼핑 사이트에서 장바구니나 문의하기 버튼이 화면 측면에 계속해서 따라다니는 기능이다.</p>

<p>순간적으로 이거를 어떻게 해야하나 생각이 나질 않아 당황했는데 사실 곰곰히 생각해보면 간단한 질문이었다.</p>

<p>position이 <code class="language-plaintext highlighter-rouge">relative</code>일 리는 없을거고, <code class="language-plaintext highlighter-rouge">absolute</code>인 상태에서 스크롤을 무시할 수 있는 기능?</p>

<p>아무 생각 없이 화면 위에 absolute 포지션 레이어를 하나 더 씌워버려서 스크롤이 되지 않는 상황까지 갔다가 문득 깨달았다.</p>

<p><b>그냥 ScrollView나 FlatList의 내부가 아니라 같은 레벨(위치)에 삽입해주면 되는 것이었다.</b></p>

<p>스크롤을 해야할 정도로 구성 컴포넌트들이 많다면 화면 높이는 <code class="language-plaintext highlighter-rouge">Dimensions</code>로 계산해서 top으로 내려주어야 한다.</p>

<p>이 과정에서 아이폰의 경우 다이나믹 아일랜드에 대해 기존에 사용하던 유명 라이브러리들이 제대로 작동하지 않는 현상을 만났다.</p>

<p>그래서 현재는 그냥 맘편히 <a href="https://github.com/th3rdwave/react-native-safe-area-context"><code class="language-plaintext highlighter-rouge">react-native-safe-area-context</code></a>를 사용하고 있다.</p>

<p>다만 <code class="language-plaintext highlighter-rouge">SafeAreaView</code> 컴포넌트에 대해서는 다음과 같은 애니메이션 이슈가 존재하므로 주의하자.</p>

<blockquote>
  <p>While React Native exports a SafeAreaView component, this component only supports iOS 10+ with no support for older iOS versions or Android. In addition, it also has some issues, i.e. if a screen containing safe area is animating, it causes jumpy behavior. So we recommend to use the useSafeAreaInsets hook from the react-native-safe-area-context library to handle safe areas in a more reliable way. <a href="https://reactnavigation.org/docs/handling-safe-area/">출처 React Navigation</a></p>
</blockquote>

<p>이는 화면 전환을 할 때에도 가끔씩 발견되는 깜빡임 문제이다. 예민하지 않은 사람은 상관없을 수 있다.</p>

<p>따라서 Safe Area 관련 기능은 전부 <code class="language-plaintext highlighter-rouge">useSafeAreaInsets</code>를 사용하여 해결하기로 하고 다른 라이브러리는 삭제해주었다. 예를 들면 
<code class="language-plaintext highlighter-rouge">react-native-iphone-x-helper</code>와 같은 라이브러리다. 이게 제대로 작동하지 않는다는 것을 깨달을 때까지 시간이 꽤나 걸려서 묘한 배신감이 든다. 그리고 UI를 만들다보면 오히려 SafeAreaView를 사용하는 것이 더 귀찮음을 유발할 때가 많다. 특히 맨 처음 컴포넌트의 배경색을 지정할 때 그러하다.</p>

<p>아무튼, 높이 관련 라이브러리를 하나로 통일해서 깔끔하다.</p>

<div class="language-php highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">import</span> <span class="p">{</span> <span class="n">useSafeAreaInsets</span> <span class="p">}</span> <span class="n">from</span> <span class="s1">'react-native-safe-area-context'</span><span class="p">;</span>

<span class="k">const</span> <span class="no">Demo</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="k">const</span> <span class="no">insets</span> <span class="o">=</span> <span class="nf">useSafeAreaInsets</span><span class="p">();</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nc">View</span> <span class="n">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span> <span class="n">flex</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">}</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nc">ScrollView</span><span class="o">&gt;</span>
        <span class="mf">...</span>
      <span class="o">&lt;/</span><span class="nc">ScrollView</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nc">View</span> <span class="n">style</span><span class="o">=</span><span class="p">{</span> <span class="p">{</span>
        <span class="n">position</span><span class="o">:</span> <span class="s1">'absolute'</span><span class="p">,</span>
        <span class="n">top</span><span class="o">:</span> <span class="nc">Dimensions</span><span class="mf">.</span><span class="nf">get</span><span class="p">(</span><span class="s1">'window'</span><span class="p">)</span><span class="mf">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">insets</span><span class="mf">.</span><span class="n">bottom</span> <span class="o">-</span> <span class="p">[</span><span class="n">컴포넌트</span> <span class="n">높이</span><span class="p">]</span>
      <span class="p">}</span> <span class="p">}</span><span class="o">/&gt;</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
  <span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native, SafeAreaView" /><summary type="html"><![CDATA[React와 React Native는 비슷하면서도 은근히 다른 부분이 많은 것 같다.]]></summary></entry><entry><title type="html">[React Native] 모서리가 둥근 삼각형 만들기</title><link href="http://localhost:4000/30th-post/" rel="alternate" type="text/html" title="[React Native] 모서리가 둥근 삼각형 만들기" /><published>2023-08-17T00:00:00+07:00</published><updated>2023-08-17T00:00:00+07:00</updated><id>http://localhost:4000/30th-post</id><content type="html" xml:base="http://localhost:4000/30th-post/"><![CDATA[<p>앱을 만들다가 도형을 그려야할 때가 오면 나도 모르게 한숨을 내쉬고 있다.        <br />
디테일적인 부분까지 챙기려면 은근히 손이 많이 가는 작업이기 때문이다.</p>

<p>오늘은 오전 내내 모서리가 둥근 삼각형을 그려야했기에 나중을 위해서 기록해둔다.</p>

<h1 id="설계도">설계도</h1>
<p>삼각형을 그리기 위한 방법에는 여러가지가 있지만 우리가 익히 알고 있는 일반적인 삼각형을 그리는 일은 어렵지 않다. 
구글 검색을 해도 쉽게 나올 것이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">React</span> <span class="n">from</span> <span class="err">'</span><span class="n">react</span><span class="err">'</span><span class="o">;</span>
<span class="kn">import</span> <span class="err">{</span> <span class="nn">View</span><span class="o">,</span> <span class="nc">StyleSheet</span> <span class="o">}</span> <span class="n">from</span> <span class="err">'</span><span class="n">react</span><span class="o">-</span><span class="kd">native</span><span class="err">'</span><span class="o">;</span>

<span class="kd">const</span> <span class="nc">App</span> <span class="o">=</span> <span class="o">()</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span> <span class="n">style</span><span class="o">={</span><span class="n">styles</span><span class="o">.</span><span class="na">container</span><span class="o">}&gt;</span>
      <span class="o">&lt;</span><span class="nc">View</span> <span class="n">style</span><span class="o">={</span><span class="n">styles</span><span class="o">.</span><span class="na">triangle</span><span class="o">}</span> <span class="o">/&gt;</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">};</span>

<span class="kd">const</span> <span class="n">styles</span> <span class="o">=</span> <span class="nc">StyleSheet</span><span class="o">.</span><span class="na">create</span><span class="o">({</span>
  <span class="nl">container:</span> <span class="o">{</span>
    <span class="nl">flex:</span> <span class="mi">1</span><span class="o">,</span>
    <span class="nl">justifyContent:</span> <span class="err">'</span><span class="n">center</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">alignItems:</span> <span class="err">'</span><span class="n">center</span><span class="err">'</span><span class="o">,</span>
  <span class="o">},</span>
  <span class="nl">triangle:</span> <span class="o">{</span>
    <span class="nl">width:</span> <span class="mi">0</span><span class="o">,</span>
    <span class="nl">height:</span> <span class="mi">0</span><span class="o">,</span>
    <span class="nl">backgroundColor:</span> <span class="err">'</span><span class="n">transparent</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">borderStyle:</span> <span class="err">'</span><span class="n">solid</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">borderLeftWidth:</span> <span class="mi">50</span><span class="o">,</span>
    <span class="nl">borderRightWidth:</span> <span class="mi">50</span><span class="o">,</span>
    <span class="nl">borderBottomWidth:</span> <span class="mi">100</span><span class="o">,</span>
    <span class="nl">borderLeftColor:</span> <span class="err">'</span><span class="n">transparent</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">borderRightColor:</span> <span class="err">'</span><span class="n">transparent</span><span class="err">'</span><span class="o">,</span>
    <span class="nl">borderBottomColor:</span> <span class="err">'</span><span class="n">lime</span><span class="err">'</span><span class="o">,</span>
  <span class="o">},</span>
<span class="o">});</span>

<span class="n">export</span> <span class="k">default</span> <span class="nc">App</span><span class="o">;</span>
</code></pre></div></div>

<p>위와 같은 코드로도 충분히 삼각형을 그릴 수 있다. 하지만 우리가 필요한 건 모서리가 “둥근” 삼각형이다.
그렇다면 다른 접근 방식이 필요하다. 아래 그림을 보자.</p>
<p align="center"><img src="https://github.com/froggydisk/froggydisk.github.io/blob/master/assets/img/30th.png?raw=true" /></p>

<p>필자는 세 개의 평행사변형(마름모)의 모서리를 borderRadius로 둥글게 만든 뒤 이를 합치는 방법을 사용했다. 굳이 이 방법을 사용하지 않더라도 <code class="language-plaintext highlighter-rouge">react-native-svg</code> 라이브러리를 이용하면 훨씬 좋은 방법이 있을 수 있으니 원치 않는 방법이라면 다른 방법을 찾아보기를 강력히 권한다.</p>

<p>어쨌거나, 평행사변형 세 개를 잘 조작해야하는 것은 분명한데 그를 위해서는 transform을 잘 이용해야한다.
transform으로도 할 수 있는 것은 여러가지 있지만 여기서는 rotate(돌리고), skewX(비틀고), scaleY(늘리기)를 사용할 것이다. 
아래를 살펴보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nc">Triangle</span> <span class="o">=</span> <span class="o">({</span><span class="n">color</span><span class="o">,</span> <span class="n">size</span><span class="o">,</span> <span class="n">children</span><span class="o">})</span> <span class="o">=&gt;</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">(</span>
    <span class="o">&lt;</span><span class="nc">View</span>
      <span class="n">style</span><span class="o">={</span> <span class="o">{</span>
        <span class="nl">alignSelf:</span> <span class="err">'</span><span class="n">center</span><span class="err">'</span><span class="o">,</span>
        <span class="nl">width:</span> <span class="n">size</span><span class="o">,</span>
        <span class="nl">height:</span> <span class="n">size</span><span class="o">,</span>
      <span class="o">}</span> <span class="o">}&gt;</span>
      <span class="o">{</span><span class="cm">/* Upper Triangle */</span><span class="o">}</span>
      <span class="o">&lt;</span><span class="nc">View</span>
        <span class="n">style</span><span class="o">={</span> <span class="o">{</span>
          <span class="nl">position:</span> <span class="err">'</span><span class="n">absolute</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">width:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">height:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">borderTopRightRadius:</span> <span class="mi">30</span><span class="o">,</span>
          <span class="nl">backgroundColor:</span> <span class="n">color</span><span class="o">,</span>
          <span class="nl">transform:</span> <span class="o">[{</span><span class="nl">rotate:</span> <span class="err">'</span><span class="o">-</span><span class="mi">60</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span> <span class="o">{</span><span class="nl">skewX:</span> <span class="err">'</span><span class="o">-</span><span class="mi">30</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span> <span class="o">{</span><span class="nl">scaleY:</span> <span class="mf">0.866</span><span class="o">}],</span>
        <span class="o">}</span> <span class="o">}</span>
      <span class="o">/&gt;</span>
      <span class="o">{</span><span class="cm">/* Lower Triangle */</span><span class="o">}</span>
      <span class="o">&lt;</span><span class="nc">View</span>
        <span class="n">style</span><span class="o">={</span> <span class="o">{</span>
          <span class="nl">position:</span> <span class="err">'</span><span class="n">absolute</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">width:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">height:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">borderTopRightRadius:</span> <span class="mi">30</span><span class="o">,</span>
          <span class="nl">backgroundColor:</span> <span class="n">color</span><span class="o">,</span>
          <span class="nl">transform:</span> <span class="o">[</span>
            <span class="o">{</span><span class="nl">rotate:</span> <span class="err">'</span><span class="o">-</span><span class="mi">180</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">skewX:</span> <span class="err">'</span><span class="o">-</span><span class="mi">30</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">scaleY:</span> <span class="mf">0.866</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">translateY:</span> <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">size</span><span class="o">},</span>
          <span class="o">],</span>
        <span class="o">}</span> <span class="o">}</span>
      <span class="o">/&gt;</span>
      <span class="o">{</span><span class="cm">/* Bottom Right Triangle */</span><span class="o">}</span>
      <span class="o">&lt;</span><span class="nc">View</span>
        <span class="n">style</span><span class="o">={</span> <span class="o">{</span>
          <span class="nl">position:</span> <span class="err">'</span><span class="n">absolute</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">width:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">height:</span> <span class="err">'</span><span class="mi">100</span><span class="o">%</span><span class="err">'</span><span class="o">,</span>
          <span class="nl">borderTopLeftRadius:</span> <span class="mi">30</span><span class="o">,</span>
          <span class="nl">backgroundColor:</span> <span class="n">color</span><span class="o">,</span>
          <span class="nl">transform:</span> <span class="o">[</span>
            <span class="o">{</span><span class="nl">rotate:</span> <span class="err">'</span><span class="mi">180</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">skewX:</span> <span class="err">'</span><span class="mi">30</span><span class="n">deg</span><span class="err">'</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">scaleY:</span> <span class="mf">0.866</span><span class="o">},</span>
            <span class="o">{</span><span class="nl">translateY:</span> <span class="o">-</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">size</span><span class="o">},</span>
          <span class="o">],</span>
        <span class="o">}</span> <span class="o">}</span>
      <span class="o">/&gt;</span>
      <span class="o">{</span><span class="n">children</span><span class="o">}</span>
    <span class="o">&lt;/</span><span class="nc">View</span><span class="o">&gt;</span>
  <span class="o">);</span>
<span class="o">};</span>
</code></pre></div></div>

<p>모든 사이즈에 맞추어 삼각형을 만들 수 있게 끔 transform의 변수 조정을 해주었다. 코드만 보아도 쉽게 이해할 수 있을 것이다.</p>

<p>보통 도형 그리기는 노하우나 경험이 많이 필요하기에 잘 모르겠다면 우선 css로 되어있는 코드를 찾아보기를 권한다. 그 후 React Native 코드로 변환하는 과정을 거칠텐데 css 코드를 보아도 잘 이해가 안된다면 chatGPT에게 바꾸어 달라고 하자.</p>

<p>복사 붙여넣기가 코딩 실력 상승에는 도움이 안 될 수 있으나 처음에 방향성을 잡을 때는 훌륭한 방법이다. 막막할 때 아까운 시간을 흘려보내기 보다는 무엇이라도 빠르게 방법을 찾아서 시도해 보는 것이 더 중요하다고 생각한다.</p>]]></content><author><name>./workspace</name><email>sewoomkim93@gmail.com</email></author><category term="Blog" /><category term="React Native" /><summary type="html"><![CDATA[앱을 만들다가 도형을 그려야할 때가 오면 나도 모르게 한숨을 내쉬고 있다. 디테일적인 부분까지 챙기려면 은근히 손이 많이 가는 작업이기 때문이다.]]></summary></entry></feed>